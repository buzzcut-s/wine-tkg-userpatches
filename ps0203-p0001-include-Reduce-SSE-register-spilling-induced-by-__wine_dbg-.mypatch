From 654f8657f194f373104a7da99602ead040e00887 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 10 Sep 2020 10:04:55 +0200
Subject: [PATCH 1/4] include: Reduce SSE register spilling induced by
 __wine_dbg* calls.

This makes all wine/debug.h helpers and functions __cdecl, and uses
__ms_va_list for varargs.

As it's not going to work with libc vsnprintf, we also need to introduce
a new ntdll __wine_dbg_vsnprintf export.

The calls could be redirected to msvcrt vsnprintf but as we also need it
for ntdll.so, this implements the format string parsing (including MS
extensions), and forwards each argument to glibc snprintf.

Having the format string parsing in NTDLL will also let us introduce
some other extensions for TRACE messages, to replace common dbgstr_*
helpers for instance and reduce the amount of common code.

This also replaces __wine_dbg_output with __wine_dbg_vprintf, that
combines both the formatting and the output to save a few calls.
---
 dlls/ntdll/ntdll.spec    |   3 +-
 dlls/ntdll/thread.c      |  13 ++-
 dlls/ntdll/unix/debug.c  | 198 ++++++++++++++++++++++++++++++++++++++-
 dlls/ntdll/unix/loader.c |   3 +-
 dlls/ntdll/unixlib.h     |   3 +-
 dlls/winecrt0/debug.c    |  28 ++++--
 include/wine/debug.h     |  92 ++++++++----------
 7 files changed, 270 insertions(+), 70 deletions(-)

diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
index ca427c46c04..d5523fb33a8 100644
--- a/dlls/ntdll/ntdll.spec
+++ b/dlls/ntdll/ntdll.spec
@@ -1612,8 +1612,9 @@
 # Debugging
 @ cdecl -norelay __wine_dbg_get_channel_flags(ptr)
 @ cdecl -norelay __wine_dbg_header(long long str)
-@ cdecl -norelay __wine_dbg_output(str)
 @ cdecl -norelay __wine_dbg_strdup(str)
+@ cdecl -norelay __wine_dbg_vprintf(str ptr)
+@ cdecl -norelay __wine_dbg_vsnprintf(ptr long str ptr)
 
 # Virtual memory
 @ cdecl -syscall __wine_locked_recvmsg(long ptr long)
diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
index 578c7a5436c..d06f2404ffd 100644
--- a/dlls/ntdll/thread.c
+++ b/dlls/ntdll/thread.c
@@ -67,13 +67,20 @@ int __cdecl __wine_dbg_header( enum __wine_debug_class cls, struct __wine_debug_
 }
 
 /***********************************************************************
- *		__wine_dbg_output  (NTDLL.@)
+ *		__wine_dbg_vprintf  (NTDLL.@)
  */
-int __cdecl __wine_dbg_output( const char *str )
+int __cdecl __wine_dbg_vprintf( const char *format, __ms_va_list args )
 {
-    return unix_funcs->dbg_output( str );
+    return unix_funcs->dbg_vprintf( format, args );
 }
 
+/***********************************************************************
+ *      __wine_dbg_vsnprintf  (NTDLL.@)
+ */
+int __cdecl __wine_dbg_vsnprintf( char *buffer, size_t length, const char *format, __ms_va_list args )
+{
+    return unix_funcs->dbg_vsnprintf( buffer, length, format, args );
+}
 
 /*******************************************************************
  *		KiUserApcDispatcher (NTDLL.@)
diff --git a/dlls/ntdll/unix/debug.c b/dlls/ntdll/unix/debug.c
index 368baac46f4..4f842a95b0a 100644
--- a/dlls/ntdll/unix/debug.c
+++ b/dlls/ntdll/unix/debug.c
@@ -30,6 +30,8 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <stdint.h>
+#include <limits.h>
 #ifdef HAVE_UNISTD_H
 # include <unistd.h>
 #endif
@@ -236,15 +238,18 @@ const char * __cdecl __wine_dbg_strdup( const char *str )
 }
 
 /***********************************************************************
- *		__wine_dbg_output  (NTDLL.@)
+ *      __wine_dbg_vprintf  (NTDLL.@)
  */
-int __cdecl __wine_dbg_output( const char *str )
+int __cdecl __wine_dbg_vprintf( const char *format, __ms_va_list args )
 {
     struct debug_info *info = get_info();
-    const char *end = strrchr( str, '\n' );
+    char buffer[1024], *str, *end;
     int ret = 0;
 
-    if (end)
+    __wine_dbg_vsnprintf( buffer, sizeof(buffer), format, args );
+
+    str = buffer;
+    if ((end = strrchr( str, '\n' )))
     {
         ret += append_output( info, str, end + 1 - str );
         write( 2, info->output, info->out_pos );
@@ -287,6 +292,191 @@ int __cdecl __wine_dbg_header( enum __wine_debug_class cls, struct __wine_debug_
     return append_output( info, buffer, strlen( buffer ));
 }
 
+int __cdecl __wine_dbg_vsnprintf( char *buffer, size_t length, const char *format, __ms_va_list args )
+{
+    char fmtbuf[1024];
+    char *buf = buffer, *end = buffer + length;
+    char *fmt = fmtbuf, *tmp = fmt;
+    char old, *spec, *width = NULL, *prec = NULL;
+    int ret, w, p;
+
+    assert(strlen(format) < sizeof(fmtbuf));
+    memcpy(fmtbuf, format, strlen(format) + 1);
+
+    while (buf < end && *fmt)
+    {
+        if (!(tmp = strchr(tmp + 1, '%'))) tmp = fmt + strlen(fmt);
+        else if (fmt[0] == '%' && tmp == fmt + 1) continue;
+        old = *tmp;
+        *tmp = 0;
+
+        if (fmt[0] != '%') spec = tmp;
+        else spec = fmt + 1 + strcspn(fmt + 1, "AacCdeEfFgGinopsSuxXZ%");
+
+        if (fmt[0] != '%') prec = width = NULL;
+        else if (fmt[1] == '-' || fmt[1] == '+' || fmt[1] == ' ' || fmt[1] == '#' || fmt[1] == '0') width = fmt + 2;
+        else width = fmt + 1;
+
+        if (!width) w = -1;
+        else if (*width == '*') w = va_arg(args, int);
+        else if (!(w = atoi(width))) w = -1;
+
+        if (fmt[0] != '%' || !(prec = strchr(fmt, '.')) || ++prec >= spec) p = INT_MAX;
+        else if (*prec == '*') p = va_arg(args, int);
+        else if (!(p = atoi(prec))) p = INT_MAX;
+
+#define append_checked(b, l, x)                                                                    \
+    do { if ((ret = (x)) >= 0 && ret < (l)) b += ret;                                              \
+         else if (ret < 0) return ret;                                                             \
+         else return b - buffer + ret; } while (0)
+#define snprintf_checked(b, l, ...) append_checked(b, l, snprintf(b, l, __VA_ARGS__))
+#define snprintf_dispatch(b, l, f, a) \
+        append_checked(b, l, (width && *width == '*' ? (prec && *prec == '*' ? snprintf(b, l, f, w, p, a) \
+                                                                             : snprintf(b, l, f, w, a)) \
+                                                     : (prec && *prec == '*' ? snprintf(b, l, f, p, a) \
+                                                                             : snprintf(b, l, f, a))))
+
+        switch (*spec)
+        {
+        case 'c':
+        case 'C':
+            if (spec[-1] == 'l' || spec[-1] == 'w' || (spec[0] == 'C' && spec[-1] != 'h'))
+            {
+                unsigned int wc = va_arg(args, unsigned int);
+                if (wc >= ' ' && wc <= '~') snprintf_checked(buf, end - buf, "%c", wc);
+                else snprintf_checked(buf, end - buf, "\\U%04x", wc);
+                snprintf_checked(buf, end - buf, spec + 1);
+            }
+            else
+            {
+                snprintf_checked(buf, end - buf, "%c", va_arg(args, int));
+                snprintf_checked(buf, end - buf, spec + 1);
+            }
+            break;
+        case 'd':
+        case 'i':
+        case 'o':
+        case 'u':
+        case 'x':
+        case 'X':
+            if (spec[-1] == '4' && spec[-2] == '6' && spec[-3] == 'I')
+            {
+                spec[-3] = 'j';
+                spec[-2] = spec[0];
+                spec[-1] = 0;
+                snprintf_dispatch(buf, end - buf, fmt, va_arg(args, uintmax_t));
+                snprintf_checked(buf, end - buf, spec + 1);
+                break;
+            }
+            if (spec[-1] == '2' && spec[-2] == '3' && spec[-3] == 'I')
+            {
+                spec[-3] = spec[0];
+                spec[-2] = 0;
+                snprintf_dispatch(buf, end - buf, fmt, va_arg(args, unsigned int));
+                snprintf_checked(buf, end - buf, spec + 1);
+                break;
+            }
+
+            if (spec[-1] == 'I') spec[-1] = 'z';
+            if (spec[-1] == 'j')
+                snprintf_dispatch(buf, end - buf, fmt, va_arg(args, uintmax_t));
+            else if (spec[-1] == 'z')
+                snprintf_dispatch(buf, end - buf, fmt, va_arg(args, size_t));
+            else if (spec[-1] == 't')
+                snprintf_dispatch(buf, end - buf, fmt, va_arg(args, ptrdiff_t));
+            else if (spec[-1] == 'l' && spec[-2] == 'l')
+                snprintf_dispatch(buf, end - buf, fmt, va_arg(args, long long int));
+            else if (spec[-1] == 'l')
+                snprintf_dispatch(buf, end - buf, fmt, va_arg(args, long int));
+            else
+                snprintf_dispatch(buf, end - buf, fmt, va_arg(args, int));
+            break;
+        case 's':
+        case 'S':
+            if (spec[-1] == 'l' || spec[-1] == 'w' || (spec[0] == 'S' && spec[-1] != 'h'))
+            {
+                WCHAR *wstr = va_arg(args, WCHAR *);
+                while (*wstr && p--)
+                {
+                    if (*wstr >= ' ' && *wstr <= '~') snprintf_checked(buf, end - buf, "%c", *wstr++);
+                    else snprintf_checked(buf, end - buf, "\\U%04x", *wstr++);
+                }
+                snprintf_checked(buf, end - buf, spec + 1);
+            }
+            else
+            {
+                char *str = va_arg(args, char *);
+                if (spec[-1] != 'l' && spec[-1] != 'w')
+                    snprintf_dispatch(buf, end - buf, fmt, str);
+                else
+                {
+                    spec[-1] = 's';
+                    spec[0] = 0;
+                    snprintf_dispatch(buf, end - buf, fmt, str);
+                    snprintf_checked(buf, end - buf, spec + 1);
+                }
+            }
+            break;
+        case 'Z':
+            if (spec[-1] == 'l' || spec[-1] == 'w')
+            {
+                UNICODE_STRING *ptr = va_arg(args, UNICODE_STRING *);
+                WCHAR *wstr = ptr->Buffer;
+                USHORT len = ptr->Length;
+                while (len--)
+                {
+                    if (*wstr >= ' ' && *wstr <= '~') snprintf_checked(buf, end - buf, "%c", *wstr++);
+                    else snprintf_checked(buf, end - buf, "\\U%04x", *wstr++);
+                }
+                snprintf_checked(buf, end - buf, spec + 1);
+            }
+            else
+            {
+                ANSI_STRING *ptr = va_arg(args, ANSI_STRING *);
+                char *str = ptr->Buffer;
+                USHORT len = ptr->Length;
+                snprintf_checked(buf, end - buf, "%.*s", len, str);
+                snprintf_checked(buf, end - buf, spec + 1);
+            }
+            break;
+        case 'p':
+            snprintf_dispatch(buf, end - buf, fmt, va_arg(args, void *));
+            break;
+        case 'A':
+        case 'a':
+        case 'e':
+        case 'E':
+        case 'f':
+        case 'F':
+        case 'g':
+        case 'G':
+            if (spec[-1] == 'l') spec[-1] = 'L';
+            if (spec[-1] == 'L')
+                snprintf_dispatch(buf, end - buf, fmt, va_arg(args, long double));
+            else
+                snprintf_dispatch(buf, end - buf, fmt, va_arg(args, double));
+            break;
+        case '%':
+        case '\0':
+            snprintf_checked(buf, end - buf, fmt);
+            break;
+        case 'n':
+        default:
+            fprintf(stderr, "wine_dbg_vsnprintf: unsupported format string: %s\n", fmt);
+            break;
+        }
+
+#undef snprintf_dispatch
+#undef snprintf_checked
+#undef append_checked
+
+        *tmp = old;
+        fmt = tmp;
+    }
+
+    return buf - buffer;
+}
+
 /***********************************************************************
  *		dbg_init
  */
diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
index c2b6ea603e3..f25f6250515 100644
--- a/dlls/ntdll/unix/loader.c
+++ b/dlls/ntdll/unix/loader.c
@@ -1544,8 +1544,9 @@ static struct unix_funcs unix_funcs =
     unwind_builtin_dll,
     __wine_dbg_get_channel_flags,
     __wine_dbg_strdup,
-    __wine_dbg_output,
     __wine_dbg_header,
+    __wine_dbg_vprintf,
+    __wine_dbg_vsnprintf,
 };
 
 
diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
index 7ed3148e4c4..03701487f51 100644
--- a/dlls/ntdll/unixlib.h
+++ b/dlls/ntdll/unixlib.h
@@ -95,9 +95,10 @@ struct unix_funcs
     /* debugging functions */
     unsigned char (CDECL *dbg_get_channel_flags)( struct __wine_debug_channel *channel );
     const char *  (CDECL *dbg_strdup)( const char *str );
-    int           (CDECL *dbg_output)( const char *str );
     int           (CDECL *dbg_header)( enum __wine_debug_class cls, struct __wine_debug_channel *channel,
                                        const char *function );
+    int           (CDECL *dbg_vprintf)( const char *format, __ms_va_list args );
+    int           (CDECL *dbg_vsnprintf)( char *buffer, size_t length, const char *format, __ms_va_list args );
 };
 
 #endif /* __NTDLL_UNIXLIB_H */
diff --git a/dlls/winecrt0/debug.c b/dlls/winecrt0/debug.c
index cb07c7835d4..ecf711761e6 100644
--- a/dlls/winecrt0/debug.c
+++ b/dlls/winecrt0/debug.c
@@ -32,7 +32,8 @@ WINE_DECLARE_DEBUG_CHANNEL(pid);
 WINE_DECLARE_DEBUG_CHANNEL(timestamp);
 
 static const char * (__cdecl *p__wine_dbg_strdup)( const char *str );
-static int (__cdecl *p__wine_dbg_output)( const char *str );
+static int (__cdecl *p__wine_dbg_vprintf)( const char *format, __ms_va_list args );
+static int (__cdecl *p__wine_dbg_vsnprintf)( char *buffer, size_t length, const char *format, __ms_va_list args );
 static unsigned char (__cdecl *p__wine_dbg_get_channel_flags)( struct __wine_debug_channel *channel );
 static int (__cdecl *p__wine_dbg_header)( enum __wine_debug_class cls,
                                           struct __wine_debug_channel *channel,
@@ -169,15 +170,22 @@ static const char * __cdecl fallback__wine_dbg_strdup( const char *str )
     return ret;
 }
 
-static int __cdecl fallback__wine_dbg_output( const char *str )
+static int __cdecl fallback__wine_dbg_vprintf( const char *format, __ms_va_list args )
 {
-    size_t len = strlen( str );
+    char str[1024];
+    size_t len;
+    __wine_dbg_vsnprintf(str, sizeof(str), format, args);
 
-    if (!len) return 0;
+    if (!(len = strlen( str ))) return 0;
     InterlockedExchange( (LONG *)&partial_line_tid, str[len - 1] != '\n' ? GetCurrentThreadId() : 0 );
     return fwrite( str, 1, len, stderr );
 }
 
+static int __cdecl fallback__wine_dbg_vsnprintf( char *buffer, size_t length, const char *format, __ms_va_list args )
+{
+    return vsnprintf( buffer, length, format, args );
+}
+
 static int __cdecl fallback__wine_dbg_header( enum __wine_debug_class cls,
                                               struct __wine_debug_channel *channel,
                                               const char *function )
@@ -230,10 +238,16 @@ const char * __cdecl __wine_dbg_strdup( const char *str )
     return p__wine_dbg_strdup( str );
 }
 
-int __cdecl __wine_dbg_output( const char *str )
+int __cdecl __wine_dbg_vprintf( const char *format, __ms_va_list args )
+{
+    LOAD_FUNC( __wine_dbg_vprintf );
+    return p__wine_dbg_vprintf( format, args );
+}
+
+int __cdecl __wine_dbg_vsnprintf( char *buffer, size_t length, const char *format, __ms_va_list args )
 {
-    LOAD_FUNC( __wine_dbg_output );
-    return p__wine_dbg_output( str );
+    LOAD_FUNC( __wine_dbg_vsnprintf );
+    return p__wine_dbg_vsnprintf( buffer, length, format, args );
 }
 
 unsigned char __cdecl __wine_dbg_get_channel_flags( struct __wine_debug_channel *channel )
diff --git a/include/wine/debug.h b/include/wine/debug.h
index e064aaefb8e..0783e263dfc 100644
--- a/include/wine/debug.h
+++ b/include/wine/debug.h
@@ -145,9 +145,10 @@ struct __wine_debug_channel
 
 extern unsigned char __cdecl __wine_dbg_get_channel_flags( struct __wine_debug_channel *channel );
 extern const char * __cdecl __wine_dbg_strdup( const char *str );
-extern int __cdecl __wine_dbg_output( const char *str );
 extern int __cdecl __wine_dbg_header( enum __wine_debug_class cls, struct __wine_debug_channel *channel,
                                       const char *function );
+extern int __cdecl __wine_dbg_vprintf( const char *format, __ms_va_list args );
+extern int __cdecl __wine_dbg_vsnprintf( char *buffer, size_t length, const char *format, __ms_va_list args );
 
 /*
  * Exported definitions and macros
@@ -157,51 +158,37 @@ extern int __cdecl __wine_dbg_header( enum __wine_debug_class cls, struct __wine
    quotes.  The string will be valid for some time, but not indefinitely
    as strings are re-used.  */
 
-#if (defined(__x86_64__) || defined(__aarch64__)) && defined(__GNUC__) && defined(__WINE_USE_MSVCRT)
-# define __wine_dbg_cdecl __cdecl
-# define __wine_dbg_va_list __builtin_ms_va_list
-# define __wine_dbg_va_start(list,arg) __builtin_ms_va_start(list,arg)
-# define __wine_dbg_va_end(list) __builtin_ms_va_end(list)
-#else
-# define __wine_dbg_cdecl
-# define __wine_dbg_va_list va_list
-# define __wine_dbg_va_start(list,arg) va_start(list,arg)
-# define __wine_dbg_va_end(list) va_end(list)
-#endif
-
-static const char * __wine_dbg_cdecl wine_dbg_sprintf( const char *format, ... ) __WINE_PRINTF_ATTR(1,2);
-static inline const char * __wine_dbg_cdecl wine_dbg_sprintf( const char *format, ... )
+static const char * __cdecl wine_dbg_sprintf( const char *format, ... ) __WINE_PRINTF_ATTR(1,2);
+static inline const char * __cdecl wine_dbg_sprintf( const char *format, ... )
 {
     char buffer[200];
-    __wine_dbg_va_list args;
+    __ms_va_list args;
 
-    __wine_dbg_va_start( args, format );
-    vsnprintf( buffer, sizeof(buffer), format, args );
-    __wine_dbg_va_end( args );
+    __ms_va_start( args, format );
+    __wine_dbg_vsnprintf( buffer, sizeof(buffer), format, args );
+    __ms_va_end( args );
     return __wine_dbg_strdup( buffer );
 }
 
-static int __wine_dbg_cdecl wine_dbg_printf( const char *format, ... ) __WINE_PRINTF_ATTR(1,2);
-static inline int __wine_dbg_cdecl wine_dbg_printf( const char *format, ... )
+static int __cdecl wine_dbg_printf( const char *format, ... ) __WINE_PRINTF_ATTR(1,2);
+static inline int __cdecl wine_dbg_printf( const char *format, ... )
 {
-    char buffer[1024];
-    __wine_dbg_va_list args;
-
-    __wine_dbg_va_start( args, format );
-    vsnprintf( buffer, sizeof(buffer), format, args );
-    __wine_dbg_va_end( args );
-    return __wine_dbg_output( buffer );
+    __ms_va_list args;
+    int ret;
+    __ms_va_start( args, format );
+    ret = __wine_dbg_vprintf( format, args );
+    __ms_va_end( args );
+    return ret;
 }
 
-static int __wine_dbg_cdecl wine_dbg_log( enum __wine_debug_class cls,
+static int __cdecl wine_dbg_log( enum __wine_debug_class cls,
                                           struct __wine_debug_channel *channel, const char *func,
                                           const char *format, ... ) __WINE_PRINTF_ATTR(4,5);
-static inline int __wine_dbg_cdecl wine_dbg_log( enum __wine_debug_class cls,
+static inline int __cdecl wine_dbg_log( enum __wine_debug_class cls,
                                                  struct __wine_debug_channel *channel,
                                                  const char *function, const char *format, ... )
 {
-    char buffer[1024];
-    __wine_dbg_va_list args;
+    __ms_va_list args;
     int ret;
 
     if (*format == '\1')  /* special magic to avoid standard prefix */
@@ -211,14 +198,13 @@ static inline int __wine_dbg_cdecl wine_dbg_log( enum __wine_debug_class cls,
     }
     if ((ret = __wine_dbg_header( cls, channel, function )) == -1) return ret;
 
-    __wine_dbg_va_start( args, format );
-    vsnprintf( buffer, sizeof(buffer), format, args );
-    __wine_dbg_va_end( args );
-    ret += __wine_dbg_output( buffer );
+    __ms_va_start( args, format );
+    ret += __wine_dbg_vprintf( format, args );
+    __ms_va_end( args );
     return ret;
 }
 
-static inline const char *wine_dbgstr_an( const char *str, int n )
+static inline const char *__cdecl wine_dbgstr_an( const char *str, int n )
 {
     static const char hex[16] = {'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};
     char buffer[300], *dst = buffer;
@@ -262,7 +248,7 @@ static inline const char *wine_dbgstr_an( const char *str, int n )
     return __wine_dbg_strdup( buffer );
 }
 
-static inline const char *wine_dbgstr_wn( const WCHAR *str, int n )
+static inline const char *__cdecl wine_dbgstr_wn( const WCHAR *str, int n )
 {
     static const char hex[16] = {'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};
     char buffer[300], *dst = buffer;
@@ -308,17 +294,17 @@ static inline const char *wine_dbgstr_wn( const WCHAR *str, int n )
     return __wine_dbg_strdup( buffer );
 }
 
-static inline const char *wine_dbgstr_a( const char *s )
+static inline const char *__cdecl wine_dbgstr_a( const char *s )
 {
     return wine_dbgstr_an( s, -1 );
 }
 
-static inline const char *wine_dbgstr_w( const WCHAR *s )
+static inline const char *__cdecl wine_dbgstr_w( const WCHAR *s )
 {
     return wine_dbgstr_wn( s, -1 );
 }
 
-static inline const char *wine_dbgstr_guid( const GUID *id )
+static inline const char *__cdecl wine_dbgstr_guid( const GUID *id )
 {
     if (!id) return "(null)";
     if (!((ULONG_PTR)id >> 16)) return wine_dbg_sprintf( "<guid-0x%04hx>", (WORD)(ULONG_PTR)id );
@@ -328,20 +314,20 @@ static inline const char *wine_dbgstr_guid( const GUID *id )
                              id->Data4[4], id->Data4[5], id->Data4[6], id->Data4[7] );
 }
 
-static inline const char *wine_dbgstr_point( const POINT *pt )
+static inline const char *__cdecl wine_dbgstr_point( const POINT *pt )
 {
     if (!pt) return "(null)";
     return wine_dbg_sprintf( "(%d,%d)", pt->x, pt->y );
 }
 
-static inline const char *wine_dbgstr_rect( const RECT *rect )
+static inline const char *__cdecl wine_dbgstr_rect( const RECT *rect )
 {
     if (!rect) return "(null)";
     return wine_dbg_sprintf( "(%d,%d)-(%d,%d)", rect->left, rect->top,
                              rect->right, rect->bottom );
 }
 
-static inline const char *wine_dbgstr_longlong( ULONGLONG ll )
+static inline const char *__cdecl wine_dbgstr_longlong( ULONGLONG ll )
 {
     if (sizeof(ll) > sizeof(unsigned long) && ll >> 32)
         return wine_dbg_sprintf( "%lx%08lx", (unsigned long)(ll >> 32), (unsigned long)ll );
@@ -350,7 +336,7 @@ static inline const char *wine_dbgstr_longlong( ULONGLONG ll )
 
 #if defined(__oaidl_h__) && defined(V_VT)
 
-static inline const char *wine_dbgstr_vt( VARTYPE vt )
+static inline const char *__cdecl wine_dbgstr_vt( VARTYPE vt )
 {
     static const char *const variant_types[] =
     {
@@ -398,7 +384,7 @@ static inline const char *wine_dbgstr_vt( VARTYPE vt )
     return wine_dbg_sprintf( "vt(invalid %x)", vt );
 }
 
-static inline const char *wine_dbgstr_variant( const VARIANT *v )
+static inline const char *__cdecl wine_dbgstr_variant( const VARIANT *v )
 {
     if (!v)
         return "(null)";
@@ -505,15 +491,15 @@ static inline const char *wine_dbgstr_variant( const VARIANT *v )
 #ifdef __WINESRC__
 /* Wine uses shorter names that are very likely to conflict with other software */
 
-static inline const char *debugstr_an( const char * s, int n ) { return wine_dbgstr_an( s, n ); }
-static inline const char *debugstr_wn( const WCHAR *s, int n ) { return wine_dbgstr_wn( s, n ); }
-static inline const char *debugstr_guid( const struct _GUID *id ) { return wine_dbgstr_guid(id); }
-static inline const char *debugstr_a( const char *s )  { return wine_dbgstr_an( s, -1 ); }
-static inline const char *debugstr_w( const WCHAR *s ) { return wine_dbgstr_wn( s, -1 ); }
+static inline const char *__cdecl debugstr_an( const char * s, int n ) { return wine_dbgstr_an( s, n ); }
+static inline const char *__cdecl debugstr_wn( const WCHAR *s, int n ) { return wine_dbgstr_wn( s, n ); }
+static inline const char *__cdecl debugstr_guid( const struct _GUID *id ) { return wine_dbgstr_guid(id); }
+static inline const char *__cdecl debugstr_a( const char *s )  { return wine_dbgstr_an( s, -1 ); }
+static inline const char *__cdecl debugstr_w( const WCHAR *s ) { return wine_dbgstr_wn( s, -1 ); }
 
 #if defined(__oaidl_h__) && defined(V_VT)
-static inline const char *debugstr_vt( VARTYPE vt ) { return wine_dbgstr_vt( vt ); }
-static inline const char *debugstr_variant( const VARIANT *v ) { return wine_dbgstr_variant( v ); }
+static inline const char *__cdecl debugstr_vt( VARTYPE vt ) { return wine_dbgstr_vt( vt ); }
+static inline const char *__cdecl debugstr_variant( const VARIANT *v ) { return wine_dbgstr_variant( v ); }
 #endif
 
 #define TRACE                      WINE_TRACE
-- 
2.29.1

