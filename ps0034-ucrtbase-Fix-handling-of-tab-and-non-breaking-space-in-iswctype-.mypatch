From: Chip Davis <cdavis@codeweavers.com>
Subject: [PATCH v3] ucrtbase: Fix handling of tab and non-breaking space in iswctype().
Message-Id: <20191211232355.70180-1-cdavis@codeweavers.com>
Date: Wed, 11 Dec 2019 17:23:55 -0600

It's just these two that are handled specially AFAICT.

Signed-off-by: Chip Davis <cdavis@codeweavers.com>
---

Notes:
    v2: Fix build.
    v3: Fix sign extension bug.

 dlls/msvcr110/tests/msvcr110.c | 30 +++++++++++++++++++++++++
 dlls/msvcrt/tests/string.c     | 28 +++++++++++++++++++++++
 dlls/msvcrt/wcs.c              | 29 +++++++++++++++++-------
 dlls/ucrtbase/tests/misc.c     | 41 +++++++++++++++++++++++++++++-----
 13 files changed, 123 insertions(+), 23 deletions(-)

diff --git a/dlls/msvcr110/tests/msvcr110.c b/dlls/msvcr110/tests/msvcr110.c
index 09876131f07..862d2bfce74 100644
--- a/dlls/msvcr110/tests/msvcr110.c
+++ b/dlls/msvcr110/tests/msvcr110.c
@@ -33,6 +33,7 @@
 
 static char* (CDECL *p_setlocale)(int category, const char* locale);
 static size_t (CDECL *p___strncnt)(const char *str, size_t count);
+static int (CDECL *p_iswctype)(wchar_t, wctype_t);
 
 static unsigned int (CDECL *p_CurrentScheduler_GetNumberOfVirtualProcessors)(void);
 static unsigned int (CDECL *p__CurrentScheduler__GetNumberOfVirtualProcessors)(void);
@@ -52,6 +53,7 @@ static BOOL init(void)
 
     p_setlocale = (void*)GetProcAddress(module, "setlocale");
     p___strncnt = (void*)GetProcAddress(module, "__strncnt");
+    p_iswctype = (void*)GetProcAddress(module, "iswctype");
     p_CurrentScheduler_GetNumberOfVirtualProcessors = (void*)GetProcAddress(module, "?GetNumberOfVirtualProcessors@CurrentScheduler@Concurrency@@SAIXZ");
     p__CurrentScheduler__GetNumberOfVirtualProcessors = (void*)GetProcAddress(module, "?_GetNumberOfVirtualProcessors@_CurrentScheduler@details@Concurrency@@SAIXZ");
     p_CurrentScheduler_Id = (void*)GetProcAddress(module, "?Id@CurrentScheduler@Concurrency@@SAIXZ");
@@ -143,10 +145,38 @@ static void test___strncnt(void)
     }
 }
 
+static void test_iswctype(void)
+{
+    static const struct {
+        WCHAR c;
+        int t;
+        int r;
+    } tests[] = {
+        { '0', C1_DIGIT, C1_DIGIT },
+        { '9', C1_DIGIT, C1_DIGIT },
+        { 'a', C1_DIGIT, 0 },
+        { 'a', C1_LOWER, C1_LOWER },
+        { 0xa0, C1_BLANK, C1_BLANK },
+        { 0xe0, _ALPHA, C1_ALPHA|C1_LOWER },
+        { 0xff16, C1_DIGIT, C1_DIGIT },
+        { 0x0660, C1_DIGIT, C1_DIGIT },
+        { 0x0ce6, C1_DIGIT, C1_DIGIT }
+    };
+    int i, r;
+
+    p_setlocale(LC_ALL, "C");
+    for (i = 0; i < ARRAY_SIZE(tests); i++)
+    {
+        r = p_iswctype(tests[i].c, tests[i].t);
+        ok(r == tests[i].r, "iswctype returned %x for %x\n", r, tests[i].c);
+    }
+}
+
 START_TEST(msvcr110)
 {
     if (!init()) return;
     test_CurrentScheduler(); /* MUST be first (at least among Concurrency tests) */
     test_setlocale();
     test___strncnt();
+    test_iswctype();
 }
diff --git a/dlls/msvcrt/tests/string.c b/dlls/msvcrt/tests/string.c
index 1be4dcb129c..5b215728ad4 100644
--- a/dlls/msvcrt/tests/string.c
+++ b/dlls/msvcrt/tests/string.c
@@ -4024,6 +4024,33 @@ static void test_iswdigit(void)
     }
 }
 
+static void test_iswctype(void)
+{
+    static const struct {
+        WCHAR c;
+        int t;
+        int r;
+    } tests[] = {
+        { '0', C1_DIGIT, C1_DIGIT },
+        { '9', C1_DIGIT, C1_DIGIT },
+        { 'a', C1_DIGIT, 0 },
+        { 'a', C1_LOWER, C1_LOWER },
+        { 0xa0, C1_BLANK, C1_BLANK },
+        { 0xe0, _ALPHA, C1_ALPHA|C1_LOWER },
+        { 0xff16, C1_DIGIT, C1_DIGIT },
+        { 0x0660, C1_DIGIT, C1_DIGIT },
+        { 0x0ce6, C1_DIGIT, C1_DIGIT }
+    };
+    int i, r;
+
+    setlocale(LC_ALL, "C");
+    for (i = 0; i < ARRAY_SIZE(tests); i++)
+    {
+        r = iswctype(tests[i].c, tests[i].t);
+        ok(r == tests[i].r, "iswctype returned %x for %x\n", r, tests[i].c);
+    }
+}
+
 START_TEST(string)
 {
     char mem[100];
@@ -4167,4 +4194,5 @@ START_TEST(string)
     test___STRINGTOLD();
     test_SpecialCasing();
     test__mbbtype();
+    test_iswctype();
 }
diff --git a/dlls/ucrtbase/tests/misc.c b/dlls/ucrtbase/tests/misc.c
index f637997a0d1..c9b04b7dd47 100644
--- a/dlls/ucrtbase/tests/misc.c
+++ b/dlls/ucrtbase/tests/misc.c
@@ -35,6 +35,7 @@ static void test_isblank(void)
 
 #include <windef.h>
 #include <winbase.h>
+#include <winnls.h>
 #include "wine/test.h"
 
 #define DEFINE_EXPECT(func) \
@@ -518,6 +519,33 @@ static void test_isblank(void)
     }
 }
 
+static void test_iswctype(void)
+{
+    static const struct {
+        WCHAR c;
+        int t;
+        int r;
+    } tests[] = {
+        { '0', C1_DIGIT, C1_DIGIT },
+        { '9', C1_DIGIT, C1_DIGIT },
+        { 'a', C1_DIGIT, 0 },
+        { 'a', C1_LOWER, C1_LOWER },
+        { 0xa0, C1_BLANK, 0 },
+        { 0xe0, _ALPHA, C1_ALPHA|C1_LOWER },
+        { 0xff16, C1_DIGIT, C1_DIGIT },
+        { 0x0660, C1_DIGIT, C1_DIGIT },
+        { 0x0ce6, C1_DIGIT, C1_DIGIT }
+    };
+    int i, r;
+
+    _setlocale(LC_ALL, "C");
+    for (i = 0; i < ARRAY_SIZE(tests); i++)
+    {
+        r = _iswctype(tests[i].c, tests[i].t);
+        ok(r == tests[i].r, "iswctype returned %x for %x\n", r, tests[i].c);
+    }
+}
+
 static struct _exception exception;
 
 static int CDECL matherr_callback(struct _exception *e)
@@ -1327,6 +1353,7 @@ START_TEST(misc)
     test__sopen_s();
     test_lldiv();
     test_isblank();
+    test_iswctype();
     test_math_errors();
     test_asctime();
     test_strftime();

-- 
2.21.0

