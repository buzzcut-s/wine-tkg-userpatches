From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
Subject: [PATCH resend] webservices: Use sscanf to convert strings to doubles.
Message-Id: <CAEU2+vqrSfemb6YMeVUhNCvr1kGd6oG6Hwo1WgZyAM_xD27Ygw@mail.gmail.com>
Date: Fri, 3 Jan 2020 17:08:49 -0700

This removes the last "long double" instance impacted by commit
0e183cc3c0d3b6f89f79047cdd71c389afc75073.  Thanks go again to Piotr
for his help.

Next time I'll remember to wait for the VMs to update ;)

Best,
Erich

From 2336fb2de124dc1741dee762ca914c54595a6676 Mon Sep 17 00:00:00 2001
From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
Date: Thu, 19 Dec 2019 15:01:54 -0700
#Subject: webservices: Use sscanf to convert strings to doubles.

Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
---
 dlls/webservices/reader.c       | 103 ++++++++------------------------
 dlls/webservices/tests/reader.c |   3 +
 include/msvcrt/stdio.h          |   1 +
 3 files changed, 28 insertions(+), 79 deletions(-)

diff --git a/dlls/webservices/reader.c b/dlls/webservices/reader.c
index 181739650e..42387ee769 100644
--- a/dlls/webservices/reader.c
+++ b/dlls/webservices/reader.c
@@ -19,6 +19,7 @@
 #include <stdarg.h>
 #include <assert.h>
 #include <float.h>
+#include <locale.h>
 
 #include "windef.h"
 #include "winbase.h"
@@ -3729,12 +3730,11 @@ static HRESULT str_to_double( const unsigned char *str, ULONG len, double *ret )
     static const unsigned __int64 nan = 0xfff8000000000000;
     static const unsigned __int64 inf = 0x7ff0000000000000;
     static const unsigned __int64 inf_min = 0xfff0000000000000;
-    HRESULT hr = WS_E_INVALID_FORMAT;
-    const unsigned char *p = str, *q;
-    int sign = 1, exp_sign = 1, exp = 0, exp_tmp = 0, neg_exp, i, nb_digits, have_digits;
-    unsigned __int64 val = 0, tmp;
-    long double exp_val = 1.0, exp_mul = 10.0;
-    unsigned int fpword = _control87( 0, 0 );
+    const char *p = (const char*)str;
+    _locale_t cloc;
+    double tmp;
+    int ok, n;
+    ULONG i;
 
     while (len && read_isspace( *p )) { p++; len--; }
     while (len && read_isspace( p[len - 1] )) { len--; }
@@ -3755,89 +3755,34 @@ static HRESULT str_to_double( const unsigned char *str, ULONG len, double *ret )
         *(unsigned __int64 *)ret = inf_min;
         return S_OK;
     }
-
-    *ret = 0.0;
-    if (*p == '-')
-    {
-        sign = -1;
-        p++; len--;
-    }
-    else if (*p == '+') { p++; len--; };
-    if (!len) return S_OK;
-
-    _control87( _MCW_EM | _RC_NEAR | _PC_64, _MCW_EM | _MCW_RC | _MCW_PC );
-
-    q = p;
-    while (len && isdigit( *q )) { q++; len--; }
-    have_digits = nb_digits = q - p;
-    for (i = 0; i < nb_digits; i++)
+    if (*p == '+' || *p == '-')
     {
-        tmp = val * 10 + p[i] - '0';
-        if (val > MAX_UINT64 / 10 || tmp < val)
+        if (len == 1 || (len == 2 && *(p+1) == '.'))
         {
-            for (; i < nb_digits; i++) exp++;
-            break;
+            ret = 0;
+            return S_OK;
         }
-        val = tmp;
     }
-
-    if (len)
+    if (len == 1 && *p == '.')
     {
-        if (*q == '.')
-        {
-            p = ++q; len--;
-            while (len && isdigit( *q )) { q++; len--; };
-            have_digits |= nb_digits = q - p;
-            for (i = 0; i < nb_digits; i++)
-            {
-                tmp = val * 10 + p[i] - '0';
-                if (val > MAX_UINT64 / 10 || tmp < val) break;
-                val = tmp;
-                exp--;
-            }
-        }
-        if (len > 1 && tolower(*q) == 'e')
-        {
-            if (!have_digits) goto done;
-            p = ++q; len--;
-            if (*p == '-')
-            {
-                exp_sign = -1;
-                p++; len--;
-            }
-            else if (*p == '+') { p++; len--; };
-
-            q = p;
-            while (len && isdigit( *q )) { q++; len--; };
-            nb_digits = q - p;
-            if (!nb_digits || len) goto done;
-            for (i = 0; i < nb_digits; i++)
-            {
-                if (exp_tmp > MAX_INT32 / 10 || (exp_tmp = exp_tmp * 10 + p[i] - '0') < 0)
-                    exp_tmp = MAX_INT32;
-            }
-            exp_tmp *= exp_sign;
-
-            if (exp < 0 && exp_tmp < 0 && exp + exp_tmp >= 0) exp = MIN_INT32;
-            else if (exp > 0 && exp_tmp > 0 && exp + exp_tmp < 0) exp = MAX_INT32;
-            else exp += exp_tmp;
-        }
+        ret = 0;
+        return S_OK;
     }
-    if (!have_digits || len) goto done;
 
-    if ((neg_exp = exp < 0)) exp = -exp;
-    for (; exp; exp >>= 1)
+    for (i = 0; i < len; i++)
     {
-        if (exp & 1) exp_val *= exp_mul;
-        exp_mul *= exp_mul;
+        if (p[i] >= '0' && p[i] <= '9') continue;
+        if (p[i] != 'e' && p[i] != 'E' && p[i] != '.' && p[i] != '+' && p[i] != '-')
+            return WS_E_INVALID_FORMAT;
     }
+    if (p[len-1] == 'e' || p[len-1] == 'E') return WS_E_INVALID_FORMAT; /* "1e" */
 
-    *ret = sign * (neg_exp ? val / exp_val : val * exp_val);
-    hr = S_OK;
-
-done:
-    _control87( fpword, _MCW_EM | _MCW_RC | _MCW_PC );
-    return hr;
+    cloc = _create_locale(LC_ALL, "C");
+    ok = _snscanf_l(p, len, "%lf%n", cloc, &tmp, &n);
+    _free_locale(cloc);
+    if (ok != 1 || n != len) return WS_E_INVALID_FORMAT;
+    *ret = tmp;
+    return S_OK;
 }
 
 static HRESULT str_to_float( const unsigned char *str, ULONG len, float *ret )
diff --git a/dlls/webservices/tests/reader.c b/dlls/webservices/tests/reader.c
index 70623052de..96eee2cf77 100644
--- a/dlls/webservices/tests/reader.c
+++ b/dlls/webservices/tests/reader.c
@@ -3650,7 +3650,10 @@ static void test_double(void)
         {"<t>-0.0</t>", S_OK, 0x8000000000000000},
         {"<t>+0.0</t>", S_OK, 0},
         {"<t>-</t>", S_OK, 0},
+        {"<t>-.</t>", S_OK, 0},
         {"<t>+</t>", S_OK, 0},
+        {"<t>+.</t>", S_OK, 0},
+        {"<t>.</t>", S_OK, 0},
         {"<t>.0</t>", S_OK, 0},
         {"<t>0.</t>", S_OK, 0},
         {"<t>0</t>", S_OK, 0},
diff --git a/include/msvcrt/stdio.h b/include/msvcrt/stdio.h
index 6d0aaeaa6c..fa81f3d536 100644
--- a/include/msvcrt/stdio.h
+++ b/include/msvcrt/stdio.h
@@ -191,6 +191,7 @@ int    WINAPIV sprintf_s(char*,size_t,const char*,...);
 int    WINAPIV _scprintf(const char *, ...);
 int    WINAPIV sscanf(const char*,const char*,...);
 int    WINAPIV sscanf_s(const char*,const char*,...);
+int    WINAPIV _snscanf_l(const char*,size_t,const char*,_locale_t,...);
 FILE*  __cdecl tmpfile(void);
 char*  __cdecl tmpnam(char*);
 int    __cdecl ungetc(int,FILE*);

-- 
2.17.1

