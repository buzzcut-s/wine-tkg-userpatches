From b6a5e76710e8b00b6c65046e1e61f6958bd1c04f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Fri, 11 Sep 2020 17:16:47 +0200
Subject: [PATCH 1/5] wmphoto: Implement class factory for WmpDecoder.

---
 dlls/wmphoto/Makefile.in |  1 +
 dlls/wmphoto/main.c      | 97 ++++++++++++++++++++++++++++++++++++++--
 2 files changed, 95 insertions(+), 3 deletions(-)

diff --git a/dlls/wmphoto/Makefile.in b/dlls/wmphoto/Makefile.in
index 24e1f49496a..83462bd4c2f 100644
--- a/dlls/wmphoto/Makefile.in
+++ b/dlls/wmphoto/Makefile.in
@@ -1,4 +1,5 @@
 MODULE = wmphoto.dll
+IMPORTS = windowscodecs uuid kernelbase
 
 EXTRADLLFLAGS = -mno-cygwin
 
diff --git a/dlls/wmphoto/main.c b/dlls/wmphoto/main.c
index d3a926e7704..efb408e94cb 100644
--- a/dlls/wmphoto/main.c
+++ b/dlls/wmphoto/main.c
@@ -1,5 +1,6 @@
 /*
  * Copyright 2017 Vincent Povirk for CodeWeavers
+ * Copyright 2020 RÃ©mi Bernon for CodeWeavers
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -17,16 +18,96 @@
  */
 
 #include <stdarg.h>
+#include <stdio.h>
+#include <string.h>
+#include <setjmp.h>
+
+#define COBJMACROS
 
 #include "windef.h"
 #include "winbase.h"
 #include "objbase.h"
 #include "rpcproxy.h"
+#include "wincodecsdk.h"
 
 #include "wine/debug.h"
 
 WINE_DEFAULT_DEBUG_CHANNEL(wincodecs);
 
+static HRESULT wmp_decoder_create(IUnknown *outer, IUnknown **out)
+{
+    FIXME("outer %p, out %p, stub!\n", outer, out);
+    return E_NOTIMPL;
+}
+
+struct class_factory
+{
+    IClassFactory IClassFactory_iface;
+    HRESULT (*create_instance)(IUnknown *outer, IUnknown **out);
+};
+
+static inline struct class_factory *impl_from_IClassFactory(IClassFactory *iface)
+{
+    return CONTAINING_RECORD(iface, struct class_factory, IClassFactory_iface);
+}
+
+static HRESULT WINAPI class_factory_QueryInterface(IClassFactory *iface, REFIID iid, void **out)
+{
+    TRACE("iface %p, iid %s, out %p.\n", iface, debugstr_guid(iid), out);
+
+    if (IsEqualGUID(iid, &IID_IUnknown) || IsEqualGUID(iid, &IID_IClassFactory))
+    {
+        *out = iface;
+        IClassFactory_AddRef(iface);
+        return S_OK;
+    }
+
+    *out = NULL;
+    FIXME("%s not implemented.\n", debugstr_guid(iid));
+    return E_NOINTERFACE;
+}
+
+static ULONG WINAPI class_factory_AddRef(IClassFactory *iface) { return 2; }
+
+static ULONG WINAPI class_factory_Release(IClassFactory *iface) { return 1; }
+
+static HRESULT WINAPI class_factory_CreateInstance(IClassFactory *iface, IUnknown *outer, REFIID iid, void **out)
+{
+    struct class_factory *factory = impl_from_IClassFactory(iface);
+    IUnknown *unk;
+    HRESULT hr;
+
+    TRACE("iface %p, outer %p, iid %s, out %p.\n", iface, outer, debugstr_guid(iid), out);
+
+    if (outer && !IsEqualGUID(iid, &IID_IUnknown)) return E_NOINTERFACE;
+
+    *out = NULL;
+    if (SUCCEEDED(hr = factory->create_instance(outer, &unk)))
+    {
+        hr = IUnknown_QueryInterface(unk, iid, out);
+        IUnknown_Release(unk);
+    }
+
+    return hr;
+}
+
+static HRESULT WINAPI class_factory_LockServer(IClassFactory *iface, BOOL lock)
+{
+    FIXME("iface %p, lock %d, stub!\n", iface, lock);
+    return S_OK;
+}
+
+static const IClassFactoryVtbl class_factory_vtbl =
+{
+    class_factory_QueryInterface,
+    class_factory_AddRef,
+    class_factory_Release,
+    class_factory_CreateInstance,
+    class_factory_LockServer,
+};
+
+static struct class_factory wmp_decoder_cf = {{&class_factory_vtbl}, wmp_decoder_create};
+
 static HINSTANCE WMPHOTO_hInstance;
 
 BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
@@ -49,10 +130,20 @@ HRESULT WINAPI DllCanUnloadNow(void)
     return S_FALSE;
 }
 
-HRESULT WINAPI DllGetClassObject(REFCLSID rclsid, REFIID riid, LPVOID * ppv)
+HRESULT WINAPI DllGetClassObject(REFCLSID clsid, REFIID iid, LPVOID *out)
 {
-    FIXME("wmphoto: stub\n");
-    return E_NOTIMPL;
+    struct class_factory *factory;
+
+    TRACE("clsid %s, iid %s, out %p.\n", debugstr_guid(clsid), debugstr_guid(iid), out);
+
+    if (IsEqualGUID(clsid, &CLSID_WICWmpDecoder)) factory = &wmp_decoder_cf;
+    else
+    {
+        FIXME("%s not implemented.\n", debugstr_guid(clsid));
+        return CLASS_E_CLASSNOTAVAILABLE;
+    }
+
+    return IClassFactory_QueryInterface(&factory->IClassFactory_iface, iid, out);
 }
 
 HRESULT WINAPI DllRegisterServer(void)
-- 
2.29.1

