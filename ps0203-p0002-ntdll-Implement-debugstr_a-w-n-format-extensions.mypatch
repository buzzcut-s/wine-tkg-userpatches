From a66f4897e392755c1b131283bec4790d7c84e294 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Fri, 18 Sep 2020 13:44:33 +0200
Subject: [PATCH 2/4] ntdll: Implement debugstr_a/w(n) format extensions.

This makes it possible to write TRACE("%p(astr)", "string") and get the
equivalent of TRACE("%s", debugstr_a("string")), respectively with
"%p(wstr)" and debugstr_w(...).

The width format specifier (including '*') can be used to control the
length (GCC format checker doesn't like precision specifier on %p).

Note that the format extension is just here to illustrate, we could
think of any other syntax. The main issue is to pass GCC format checker,
and as done in the Linux kernel, %p suffixes seems to be the best fit.
---
 dlls/ntdll/unix/debug.c | 96 ++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 95 insertions(+), 1 deletion(-)

diff --git a/dlls/ntdll/unix/debug.c b/dlls/ntdll/unix/debug.c
index 4f842a95b0a..acccd2fe2a6 100644
--- a/dlls/ntdll/unix/debug.c
+++ b/dlls/ntdll/unix/debug.c
@@ -292,6 +292,90 @@ int __cdecl __wine_dbg_header( enum __wine_debug_class cls, struct __wine_debug_
     return append_output( info, buffer, strlen( buffer ));
 }
 
+static size_t sprintf_dbgstr_an( char *buffer, size_t length, const char *str, int n )
+{
+    static const char hex[16] = {'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};
+    char *dst = buffer;
+
+    if (!str) { if (length >= 7) strcpy(buffer, "(null)"); return 6; }
+    if (!((ULONG_PTR)str >> 16)) return snprintf( buffer, length, "#%04x", LOWORD(str) );
+    if (n == -1) for (n = 0; str[n]; n++) ;
+    *dst++ = '"';
+    while (n-- > 0 && dst <= buffer + length - 9)
+    {
+        unsigned char c = *str++;
+        switch (c)
+        {
+        case '\n': *dst++ = '\\'; *dst++ = 'n'; break;
+        case '\r': *dst++ = '\\'; *dst++ = 'r'; break;
+        case '\t': *dst++ = '\\'; *dst++ = 't'; break;
+        case '"':  *dst++ = '\\'; *dst++ = '"'; break;
+        case '\\': *dst++ = '\\'; *dst++ = '\\'; break;
+        default:
+            if (c < ' ' || c >= 127)
+            {
+                *dst++ = '\\';
+                *dst++ = 'x';
+                *dst++ = hex[(c >> 4) & 0x0f];
+                *dst++ = hex[c & 0x0f];
+            }
+            else *dst++ = c;
+        }
+    }
+    *dst++ = '"';
+    if (n > 0)
+    {
+        *dst++ = '.';
+        *dst++ = '.';
+        *dst++ = '.';
+    }
+    *dst = 0;
+    return dst - buffer;
+}
+
+static size_t sprintf_dbgstr_wn( char *buffer, size_t length, const WCHAR *str, int n )
+{
+    static const char hex[16] = {'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};
+    char *dst = buffer;
+
+    if (!str) { if (length >= 7) strcpy(buffer, "(null)"); return 6; }
+    if (!((ULONG_PTR)str >> 16)) return snprintf( buffer, length, "#%04x", LOWORD(str) );
+    if (n == -1) for (n = 0; str[n]; n++) ;
+    *dst++ = 'L';
+    *dst++ = '"';
+    while (n-- > 0 && dst <= buffer + length - 10)
+    {
+        WCHAR c = *str++;
+        switch (c)
+        {
+        case '\n': *dst++ = '\\'; *dst++ = 'n'; break;
+        case '\r': *dst++ = '\\'; *dst++ = 'r'; break;
+        case '\t': *dst++ = '\\'; *dst++ = 't'; break;
+        case '"':  *dst++ = '\\'; *dst++ = '"'; break;
+        case '\\': *dst++ = '\\'; *dst++ = '\\'; break;
+        default:
+            if (c < ' ' || c >= 127)
+            {
+                *dst++ = '\\';
+                *dst++ = hex[(c >> 12) & 0x0f];
+                *dst++ = hex[(c >> 8) & 0x0f];
+                *dst++ = hex[(c >> 4) & 0x0f];
+                *dst++ = hex[c & 0x0f];
+            }
+            else *dst++ = (char)c;
+        }
+    }
+    *dst++ = '"';
+    if (n > 0)
+    {
+        *dst++ = '.';
+        *dst++ = '.';
+        *dst++ = '.';
+    }
+    *dst = 0;
+    return dst - buffer;
+}
+
 int __cdecl __wine_dbg_vsnprintf( char *buffer, size_t length, const char *format, __ms_va_list args )
 {
     char fmtbuf[1024];
@@ -440,7 +524,17 @@ int __cdecl __wine_dbg_vsnprintf( char *buffer, size_t length, const char *forma
             }
             break;
         case 'p':
-            snprintf_dispatch(buf, end - buf, fmt, va_arg(args, void *));
+            if (!strncmp(spec, "p(astr)", 7)) /* debugstr_a / debugstr_an */
+            {
+                append_checked(buf, end - buf, sprintf_dbgstr_an(buf, end - buf, va_arg(args, const char *), w));
+                snprintf_checked(buf, end - buf, spec + 7);
+            }
+            else if (!strncmp(spec, "p(wstr)", 7)) /* debugstr_w / debugstr_wn */
+            {
+                append_checked(buf, end - buf, sprintf_dbgstr_wn(buf, end - buf, va_arg(args, const WCHAR *), w));
+                snprintf_checked(buf, end - buf, spec + 7);
+            }
+            else snprintf_dispatch(buf, end - buf, fmt, va_arg(args, void *));
             break;
         case 'A':
         case 'a':
-- 
2.29.1

