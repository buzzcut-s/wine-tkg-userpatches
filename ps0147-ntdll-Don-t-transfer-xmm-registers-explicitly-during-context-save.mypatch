From: Paul Gofman <pgofman@codeweavers.com>
Subject: [PATCH] ntdll: Don't transfer xmm registers explicitly during context save and restore on x64.
Message-Id: <20200817231159.1408984-1-pgofman@codeweavers.com>
Date: Tue, 18 Aug 2020 02:11:59 +0300

fxsave / fxrstor already do that.

Signed-off-by: Paul Gofman <pgofman@codeweavers.com>
---
 dlls/ntdll/signal_x86_64.c      | 16 ----------------
 dlls/ntdll/unix/signal_x86_64.c | 16 ----------------
 2 files changed, 32 deletions(-)

diff --git a/dlls/ntdll/signal_x86_64.c b/dlls/ntdll/signal_x86_64.c
index faf24b93b58..dad4340c06c 100644
--- a/dlls/ntdll/signal_x86_64.c
+++ b/dlls/ntdll/signal_x86_64.c
@@ -341,22 +341,6 @@ __ASM_GLOBAL_FUNC( RtlCaptureContext,
                    "movq (%rsp),%rax\n\t"
                    "movq %rax,0xf8(%rcx)\n\t"       /* context->Rip */
                    "fxsave 0x100(%rcx)\n\t"         /* context->FtlSave */
-                   "movdqa %xmm0,0x1a0(%rcx)\n\t"   /* context->Xmm0 */
-                   "movdqa %xmm1,0x1b0(%rcx)\n\t"   /* context->Xmm1 */
-                   "movdqa %xmm2,0x1c0(%rcx)\n\t"   /* context->Xmm2 */
-                   "movdqa %xmm3,0x1d0(%rcx)\n\t"   /* context->Xmm3 */
-                   "movdqa %xmm4,0x1e0(%rcx)\n\t"   /* context->Xmm4 */
-                   "movdqa %xmm5,0x1f0(%rcx)\n\t"   /* context->Xmm5 */
-                   "movdqa %xmm6,0x200(%rcx)\n\t"   /* context->Xmm6 */
-                   "movdqa %xmm7,0x210(%rcx)\n\t"   /* context->Xmm7 */
-                   "movdqa %xmm8,0x220(%rcx)\n\t"   /* context->Xmm8 */
-                   "movdqa %xmm9,0x230(%rcx)\n\t"   /* context->Xmm9 */
-                   "movdqa %xmm10,0x240(%rcx)\n\t"  /* context->Xmm10 */
-                   "movdqa %xmm11,0x250(%rcx)\n\t"  /* context->Xmm11 */
-                   "movdqa %xmm12,0x260(%rcx)\n\t"  /* context->Xmm12 */
-                   "movdqa %xmm13,0x270(%rcx)\n\t"  /* context->Xmm13 */
-                   "movdqa %xmm14,0x280(%rcx)\n\t"  /* context->Xmm14 */
-                   "movdqa %xmm15,0x290(%rcx)\n\t"  /* context->Xmm15 */
                    "ret" );
 
 /******************************************************************************
diff --git a/dlls/ntdll/signal_x86_64.c b/dlls/ntdll/signal_x86_64.c
index ecf326700e6..8e21333ba19 100644
--- a/dlls/ntdll/signal_x86_64.c
+++ b/dlls/ntdll/signal_x86_64.c
@@ -1516,22 +1516,6 @@ __ASM_GLOBAL_FUNC( set_full_cpu_context,
                    "movq 0xf8(%rdi),%rax\n\t"       /* context->Rip */
                    "movq %rax,(%rsp)\n\t"
                    "fxrstor 0x100(%rdi)\n\t"        /* context->FtlSave */
-                   "movdqa 0x1a0(%rdi),%xmm0\n\t"   /* context->Xmm0 */
-                   "movdqa 0x1b0(%rdi),%xmm1\n\t"   /* context->Xmm1 */
-                   "movdqa 0x1c0(%rdi),%xmm2\n\t"   /* context->Xmm2 */
-                   "movdqa 0x1d0(%rdi),%xmm3\n\t"   /* context->Xmm3 */
-                   "movdqa 0x1e0(%rdi),%xmm4\n\t"   /* context->Xmm4 */
-                   "movdqa 0x1f0(%rdi),%xmm5\n\t"   /* context->Xmm5 */
-                   "movdqa 0x200(%rdi),%xmm6\n\t"   /* context->Xmm6 */
-                   "movdqa 0x210(%rdi),%xmm7\n\t"   /* context->Xmm7 */
-                   "movdqa 0x220(%rdi),%xmm8\n\t"   /* context->Xmm8 */
-                   "movdqa 0x230(%rdi),%xmm9\n\t"   /* context->Xmm9 */
-                   "movdqa 0x240(%rdi),%xmm10\n\t"  /* context->Xmm10 */
-                   "movdqa 0x250(%rdi),%xmm11\n\t"  /* context->Xmm11 */
-                   "movdqa 0x260(%rdi),%xmm12\n\t"  /* context->Xmm12 */
-                   "movdqa 0x270(%rdi),%xmm13\n\t"  /* context->Xmm13 */
-                   "movdqa 0x280(%rdi),%xmm14\n\t"  /* context->Xmm14 */
-                   "movdqa 0x290(%rdi),%xmm15\n\t"  /* context->Xmm15 */
                    "movq 0x78(%rdi),%rax\n\t"       /* context->Rax */
                    "movq 0xb0(%rdi),%rdi\n\t"       /* context->Rdi */
                    "iretq" );

-- 
2.26.2

