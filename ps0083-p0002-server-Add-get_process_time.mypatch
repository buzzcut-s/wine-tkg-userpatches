From: brock@polynubstudios.com
Subject: [PATCH 2/3] server: Add get_process_time
Message-Id: <20200219100204.143995-2-brock@polynubstudios.com>
Date: Wed, 19 Feb 2020 21:02:03 +1100
In-Reply-To: <20200219100204.143995-1-brock@polynubstudios.com>
References: <20200219100204.143995-1-brock@polynubstudios.com>

From: Brock York <twunknown@gmail.com>

get_process_time returns the amount of time a given
process has spent in kernel and user mode.
Reads from /proc/[pid]/stat the utime and stime fields

Signed-off-by: Brock York <brock@polynubstudios.com>
---
 include/wine/server_protocol.h | 18 ++++++++++++++++-
 server/process.c               | 35 ++++++++++++++++++++++++++++++++++
 server/protocol.def            |  8 ++++++++
 server/request.h               |  8 ++++++++
 server/trace.c                 | 15 +++++++++++++++
 5 files changed, 83 insertions(+), 1 deletion(-)

diff --git a/include/wine/server_protocol.h b/include/wine/server_protocol.h
index 3b457df8b0..58a6af779b 100644
--- a/include/wine/server_protocol.h
+++ b/include/wine/server_protocol.h
@@ -5797,6 +5797,19 @@ struct resume_process_reply
 };
 
 
+struct get_process_time_request
+{
+    struct request_header __header;
+    obj_handle_t handle;
+};
+struct get_process_time_reply
+{
+    struct reply_header __header;
+    unsigned __int64 utime;
+    unsigned __int64 stime;
+};
+
+
 enum request
 {
     REQ_new_process,
@@ -6109,6 +6122,7 @@ enum request
     REQ_get_fsync_idx,
     REQ_fsync_msgwait,
     REQ_get_fsync_apc_idx,
+    REQ_get_process_time,
     REQ_NB_REQUESTS
 };
 
@@ -6413,6 +6427,7 @@ union generic_request
     struct get_fsync_idx_request get_fsync_idx_request;
     struct fsync_msgwait_request fsync_msgwait_request;
     struct get_fsync_apc_idx_request get_fsync_apc_idx_request;
+    struct get_process_time_request get_process_time_request;
 };
 union generic_reply
 {
@@ -6715,8 +6730,9 @@ union generic_reply
     struct get_fsync_idx_reply get_fsync_idx_reply;
     struct fsync_msgwait_reply fsync_msgwait_reply;
     struct get_fsync_apc_idx_reply get_fsync_apc_idx_reply;
+    struct get_process_time_reply get_process_time_reply;
 };
 
-#define SERVER_PROTOCOL_VERSION 596
+#define SERVER_PROTOCOL_VERSION 597
 
 #endif /* __WINE_WINE_SERVER_PROTOCOL_H */
diff --git a/server/process.c b/server/process.c
index 73984f363f..112006b02e 100644
--- a/server/process.c
+++ b/server/process.c
@@ -1792,3 +1792,38 @@ DECL_HANDLER(resume_process)
         release_object( process );
     }
 }
+
+/* Get kernel and user time for a process */
+DECL_HANDLER(get_process_time)
+{
+    char procPath[32];
+    char line[1024];
+    FILE *procPidStat = NULL;
+    //See man (5) proc for format of /proc/[pid]/stat file
+    const char *procPidStatFmt = "%*d %*s %*c %*d %*d %*d %*d %*d %*u %*lu %*lu %*lu %*lu %lu %lu";
+    unsigned __int64 utime = 0;
+    unsigned __int64 stime = 0;
+    struct process *process = get_process_from_handle( req->handle, PROCESS_QUERY_LIMITED_INFORMATION );
+
+    if (!process) return;
+#ifdef linux
+    if (process->unix_pid != -1)
+    {
+        sprintf( procPath, "/proc/%u/stat", process->unix_pid );
+        if ((procPidStat = fopen( procPath, "r" )))
+        {
+            fgets( line, sizeof(line), procPidStat );
+            if (sscanf( line, procPidStatFmt, &utime, &stime ) == 2)
+            {
+                reply->utime = utime;
+                reply->stime = stime;
+            }
+            else set_error(STATUS_SEVERITY_ERROR);
+            fclose(procPidStat);
+        }
+        else set_error( STATUS_ACCESS_DENIED );
+    }
+    else set_error( STATUS_ACCESS_DENIED );
+#endif
+    release_object( process );
+}
diff --git a/server/protocol.def b/server/protocol.def
index 6c44b2b43f..5cc568a5bb 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -3956,6 +3956,14 @@ struct handle_info
 @REQ(resume_process)
     obj_handle_t handle;       /* process handle */
 @END
+
+/* Get kernel and user time for a process */
+@REQ(get_process_time)
+    obj_handle_t handle;       /* process handle */
+@REPLY
+    unsigned __int64 utime;   /* time process has spent in user mode */
+    unsigned __int64 stime;   /* time process has spent in kernel mode */
+@END
 
 /* Return system information values */
 @REQ(get_system_info)
diff --git a/server/request.h b/server/request.h
index 15fcb671bb..b38a9f0b5a 100644
--- a/server/request.h
+++ b/server/request.h
@@ -410,6 +410,7 @@ DECL_HANDLER(set_job_completion_port);
 DECL_HANDLER(get_fsync_idx);
 DECL_HANDLER(fsync_msgwait);
 DECL_HANDLER(get_fsync_apc_idx);
+DECL_HANDLER(get_process_time);
 
 #ifdef WANT_REQUEST_HANDLERS
 
@@ -713,6 +714,7 @@ static const req_handler req_handlers[REQ_NB_REQUESTS] =
     (req_handler)req_get_fsync_idx,
     (req_handler)req_fsync_msgwait,
     (req_handler)req_get_fsync_apc_idx,
+    (req_handler)req_get_process_time,
 };
 
 C_ASSERT( sizeof(affinity_t) == 8 );
@@ -741,6 +743,7 @@ C_ASSERT( sizeof(rectangle_t) == 16 );
 C_ASSERT( sizeof(short int) == 2 );
 C_ASSERT( sizeof(thread_id_t) == 4 );
 C_ASSERT( sizeof(timeout_t) == 8 );
+C_ASSERT( sizeof(unsigned __int64) == 8 );
 C_ASSERT( sizeof(unsigned char) == 1 );
 C_ASSERT( sizeof(unsigned int) == 4 );
 C_ASSERT( sizeof(unsigned short) == 2 );
@@ -2446,6 +2449,11 @@ C_ASSERT( FIELD_OFFSET(struct suspend_process_request, handle) == 12 );
 C_ASSERT( sizeof(struct get_fsync_apc_idx_request) == 16 );
 C_ASSERT( FIELD_OFFSET(struct get_fsync_apc_idx_reply, shm_idx) == 8 );
 C_ASSERT( sizeof(struct get_fsync_apc_idx_reply) == 16 );
+C_ASSERT( FIELD_OFFSET(struct get_process_time_request, handle) == 12 );
+C_ASSERT( sizeof(struct get_process_time_request) == 16 );
+C_ASSERT( FIELD_OFFSET(struct get_process_time_reply, utime) == 8 );
+C_ASSERT( FIELD_OFFSET(struct get_process_time_reply, stime) == 16 );
+C_ASSERT( sizeof(struct get_process_time_reply) == 24 );
 
 #endif  /* WANT_REQUEST_HANDLERS */
 
diff --git a/server/trace.c b/server/trace.c
index 79e3f22ee5..c69531c9de 100644
--- a/server/trace.c
+++ b/server/trace.c
@@ -4608,6 +4608,17 @@ static void dump_resume_process_request( const struct resume_process_request *re
     fprintf( stderr, " handle=%04x", req->handle );
 }
 
+static void dump_get_process_time_request( const struct get_process_time_request *req )
+{
+    fprintf( stderr, " handle=%04x", req->handle );
+}
+
+static void dump_get_process_time_reply( const struct get_process_time_reply *req )
+{
+    dump_uint64( " utime=", &req->utime );
+    dump_uint64( ", stime=", &req->stime );
+}
+
 static const dump_func req_dumpers[REQ_NB_REQUESTS] = {
     (dump_func)dump_new_process_request,
     (dump_func)dump_exec_process_request,
@@ -4917,6 +4928,7 @@ static const dump_func req_dumpers[REQ_NB_REQUESTS] = {
     (dump_func)dump_get_fsync_idx_request,
     (dump_func)dump_fsync_msgwait_request,
     (dump_func)dump_get_fsync_apc_idx_request,
+    (dump_func)dump_get_process_time_request,
 };
 
 static const dump_func reply_dumpers[REQ_NB_REQUESTS] = {
@@ -5217,6 +5229,7 @@ static const dump_func reply_dumpers[REQ_NB_REQUESTS] = {
     (dump_func)dump_get_fsync_idx_reply,
     NULL,
     (dump_func)dump_get_fsync_apc_idx_reply,
+    (dump_func)dump_get_process_time_reply,
 };
 
 static const char * const req_names[REQ_NB_REQUESTS] = {
@@ -5517,6 +5530,7 @@ static const char * const req_names[REQ_NB_REQUESTS] = {
     "get_fsync_idx",
     "fsync_msgwait",
     "get_fsync_apc_idx",
+    "get_process_time",
 };
 
 static const struct
@@ -5625,6 +5639,7 @@ static const struct
     { "REPARSE_POINT_NOT_RESOLVED",  STATUS_REPARSE_POINT_NOT_RESOLVED },
     { "SECTION_TOO_BIG",             STATUS_SECTION_TOO_BIG },
     { "SEMAPHORE_LIMIT_EXCEEDED",    STATUS_SEMAPHORE_LIMIT_EXCEEDED },
+    { "SEVERITY_ERROR",              STATUS_SEVERITY_ERROR },
     { "SHARING_VIOLATION",           STATUS_SHARING_VIOLATION },
     { "SHUTDOWN_IN_PROGRESS",        STATUS_SHUTDOWN_IN_PROGRESS },
     { "SUSPEND_COUNT_EXCEEDED",      STATUS_SUSPEND_COUNT_EXCEEDED },

-- 
2.25.0

