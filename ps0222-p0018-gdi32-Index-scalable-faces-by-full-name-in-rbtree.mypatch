From 2561aaf7037b6bf7eaba757074e3b8da825c862e Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Fri, 6 Nov 2020 13:14:37 +0100
Subject: [PATCH 18/24] gdi32: Index scalable faces by full name in rbtree.

To quickly discard already loaded faces from the registry list.
---
 dlls/gdi32/font.c | 57 +++++++++++++++++++++++++++++++++++++----------
 1 file changed, 45 insertions(+), 12 deletions(-)

diff --git a/dlls/gdi32/font.c b/dlls/gdi32/font.c
index 0aaf331cec2..80612661329 100644
--- a/dlls/gdi32/font.c
+++ b/dlls/gdi32/font.c
@@ -68,6 +68,7 @@ struct gdi_font_family
 struct gdi_font_face
 {
     struct list   entry;
+    struct wine_rb_entry entry_full;
     unsigned int  refcount;
     WCHAR        *style_name;
     WCHAR        *full_name;
@@ -580,8 +581,15 @@ static int family_second_name_compare( const void *key, const struct wine_rb_ent
     return family_namecmp( (const WCHAR *)key, family->second_name );
 }
 
+static int face_full_name_compare( const void *key, const struct wine_rb_entry *entry )
+{
+    const struct gdi_font_face *face = WINE_RB_ENTRY_VALUE( entry, const struct gdi_font_face, entry_full );
+    return facename_compare( (const WCHAR *)key, face->full_name, LF_FULLFACESIZE - 1 );
+}
+
 static struct wine_rb_tree family_tree = { family_name_compare };
 static struct wine_rb_tree family_second_tree = { family_second_name_compare };
+static struct wine_rb_tree face_tree = { face_full_name_compare };
 
 static struct gdi_font_family *create_family( const WCHAR *name, const WCHAR *second_name )
 {
@@ -628,6 +636,13 @@ static struct gdi_font_family *find_family_from_any_name( const WCHAR *name )
     return WINE_RB_ENTRY_VALUE( entry, struct gdi_font_family, entry_second );
 }
 
+static struct gdi_font_face *find_face_from_full_name(const WCHAR *full_name)
+{
+    struct wine_rb_entry *entry;
+    if (!(entry = wine_rb_get( &face_tree, full_name ))) return NULL;
+    return WINE_RB_ENTRY_VALUE( entry, struct gdi_font_face, entry_full );
+}
+
 static const struct list *get_family_face_list( const struct gdi_font_family *family )
 {
     return family->replacement ? &family->replacement->faces : &family->faces;
@@ -816,6 +831,8 @@ static void release_face( struct gdi_font_face *face )
         list_remove( &face->entry );
         release_family( face->family );
     }
+    if (face->entry_full.parent || face_tree.root == &face->entry_full)
+        wine_rb_remove( &face_tree, &face->entry_full );
     HeapFree( GetProcessHeap(), 0, face->file );
     HeapFree( GetProcessHeap(), 0, face->style_name );
     HeapFree( GetProcessHeap(), 0, face->full_name );
@@ -910,6 +927,11 @@ static BOOL insert_face_in_family_list( struct gdi_font_face *face, struct gdi_f
                 face->family = family;
                 family->refcount++;
                 face->refcount++;
+                if (cursor->entry_full.parent || face_tree.root == &cursor->entry_full)
+                {
+                    wine_rb_replace( &face_tree, &cursor->entry_full, &face->entry_full );
+                    memset( &cursor->entry_full, 0, sizeof(cursor->entry_full) );
+                }
                 release_face( cursor );
                 return TRUE;
             }
@@ -920,6 +942,7 @@ static BOOL insert_face_in_family_list( struct gdi_font_face *face, struct gdi_f
     TRACE( "Adding face %s in family %s from %s\n", debugstr_w(face->full_name),
            debugstr_w(family->family_name), debugstr_w(face->file) );
     list_add_before( &cursor->entry, &face->entry );
+    if (face->scalable) wine_rb_put( &face_tree, face->full_name, &face->entry_full );
     face->family = family;
     family->refcount++;
     face->refcount++;
@@ -7886,7 +7909,7 @@ static void update_external_font_keys( HKEY hkey )
 
 static void load_registry_fonts(void)
 {
-    WCHAR value[LF_FULLFACESIZE + 12], data[MAX_PATH];
+    WCHAR value[LF_FULLFACESIZE + 12], full_name[LF_FULLFACESIZE + 12], data[MAX_PATH], *tmp;
     DWORD i = 0, type, dlen, vlen;
     struct wine_rb_entry *entry;
     HKEY hkey;
@@ -7902,23 +7925,33 @@ static void load_registry_fonts(void)
 
     vlen = ARRAY_SIZE(value);
     dlen = sizeof(data);
-    while (!RegEnumValueW( hkey, i++, value, &vlen, NULL, &type, (LPBYTE)data, &dlen ))
+    while (!RegEnumValueW( hkey, i++, value, &vlen, NULL, &type, NULL, NULL ))
     {
         if (type != REG_SZ) goto next;
-        dlen /= sizeof(WCHAR);
-        if ((entry = wine_rb_get( &external_keys, value )))
+        lstrcpyW( full_name, value );
+        if ((tmp = wcsrchr( full_name, ' ' )) && !facename_compare( tmp, L" (TrueType)", -1 )) *tmp = '\0';
+
+        if (find_face_from_full_name( full_name ))
+            WARN("Skipping already loaded face %s\n", debugstr_w(full_name));
+        else if (RegQueryValueExW( hkey, value, NULL, NULL, (LPBYTE)data, &dlen ))
+            WARN("Unable to get face path %s\n", debugstr_w(value));
+        else
         {
-            struct external_key *key = WINE_RB_ENTRY_VALUE( entry, struct external_key, entry );
-            if (!wcsicmp( key->path, data ))
+            dlen /= sizeof(WCHAR);
+            if ((entry = wine_rb_get( &external_keys, value )))
             {
-                key->found = TRUE;
-                goto next;
+                struct external_key *key = WINE_RB_ENTRY_VALUE( entry, struct external_key, entry );
+                if (!wcsicmp( key->path, data ))
+                {
+                    key->found = TRUE;
+                    goto next;
+                }
             }
+            if (data[0] && data[1] == ':')
+                add_font_resource( data, ADDFONT_ALLOW_BITMAP | ADDFONT_ADD_TO_CACHE );
+            else if (dlen >= 6 && !wcsicmp( data + dlen - 5, L".fon" ))
+                add_system_font_resource( data, ADDFONT_ALLOW_BITMAP | ADDFONT_ADD_TO_CACHE );
         }
-        if (data[0] && data[1] == ':')
-            add_font_resource( data, ADDFONT_ALLOW_BITMAP | ADDFONT_ADD_TO_CACHE );
-        else if (dlen >= 6 && !wcsicmp( data + dlen - 5, L".fon" ))
-            add_system_font_resource( data, ADDFONT_ALLOW_BITMAP | ADDFONT_ADD_TO_CACHE );
     next:
         vlen = ARRAY_SIZE(value);
         dlen = sizeof(data);
-- 
2.29.2

