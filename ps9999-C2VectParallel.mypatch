From 53cf49d45075af0afcba7154b3a3edfbddb3c02b Mon Sep 17 00:00:00 2001
From: Torge Matthies <openglfreak@googlemail.com>
Date: Mon, 20 Jan 2020 01:27:58 +0100
Subject: [PATCH 1/2] vcomp/tests: Add tests for C2VectParallel.

---
 dlls/vcomp/tests/vcomp.c | 52 ++++++++++++++++++++++++++++++++++++++++
 1 file changed, 52 insertions(+)

diff --git a/dlls/vcomp/tests/vcomp.c b/dlls/vcomp/tests/vcomp.c
index a8b80a0e22..96be00ba03 100644
--- a/dlls/vcomp/tests/vcomp.c
+++ b/dlls/vcomp/tests/vcomp.c
@@ -135,6 +135,8 @@ static int   (CDECL   *pomp_test_lock)(omp_lock_t *lock);
 static int   (CDECL   *pomp_test_nest_lock)(omp_nest_lock_t *lock);
 static void  (CDECL   *pomp_unset_lock)(omp_lock_t *lock);
 static void  (CDECL   *pomp_unset_nest_lock)(omp_nest_lock_t *lock);
+static void  (WINAPIV *pC2VectParallel)(int start, int end, int stride, BOOL inclusive, unsigned int numChunks,
+                                        int schedule, void (CDECL * func)(int, int, ...), int argcnt, ...);
 
 #define VCOMP_DYNAMIC_FLAGS_STATIC      0x01
 #define VCOMP_DYNAMIC_FLAGS_CHUNKED     0x02
@@ -378,6 +380,7 @@ static BOOL init_vcomp(void)
     VCOMP_GET_PROC(omp_test_nest_lock);
     VCOMP_GET_PROC(omp_unset_lock);
     VCOMP_GET_PROC(omp_unset_nest_lock);
+    VCOMP_GET_PROC(C2VectParallel);
 
     return TRUE;
 }
@@ -2222,6 +2225,54 @@ static void test_reduction_float_double(void)
     }
 }
 
+static void CDECL c2vect_worker_threads(int start, int end, LONG* count)
+{
+    InterlockedIncrement(count);
+}
+
+static void CDECL c2vect_worker_range(int start, int end, LONG* count, BOOL inclusive)
+{
+    InterlockedExchangeAdd(count, abs(end - start) + !!inclusive);
+}
+
+static void test_C2VectParallel(void)
+{
+    static const struct
+    {
+        int start, end, stride;
+        BOOL inclusive;
+        int schedule;
+        LONG expected;
+    }
+    range_tests[] =
+    {
+        { -10, 1418, 1, FALSE, 0, 1428 },
+        { -10, 1418, 1, TRUE, 0, 1429 },
+        { 10, -1418, -1, FALSE, 0, 1428 },
+        { 10, -1418, -1, TRUE, 0, 1429 },
+    };
+    int i;
+    LONG count;
+
+    if (!pC2VectParallel)
+        return;
+
+    count = 0;
+    pC2VectParallel(0, 0xDEAD, 1, FALSE, 4, 0, (void (CDECL *)(int, int, ...))c2vect_worker_threads, 3, &count);
+    todo_wine
+    ok(count == 4, "expected 4 threads, got %i\n", count);
+
+    for (i = 0; i < ARRAY_SIZE(range_tests); i++)
+    {
+        count = 0;
+        pC2VectParallel(range_tests[i].start, range_tests[i].end, range_tests[i].stride, range_tests[i].inclusive, 4,
+                        range_tests[i].schedule, (void (CDECL *)(int, int, ...))c2vect_worker_range, 4, &count,
+                        range_tests[i].inclusive);
+        todo_wine
+        ok(count == range_tests[i].expected, "expected count == %i, got %i\n", range_tests[i].expected, count);
+    }
+}
+
 START_TEST(vcomp)
 {
     if (!init_vcomp())
@@ -2251,6 +2302,7 @@ START_TEST(vcomp)
     test_reduction_integer32();
     test_reduction_integer64();
     test_reduction_float_double();
+    test_C2VectParallel();
 
     release_vcomp();
 }
-- 
2.25.0

From b10ce96e2b73bc1264242eb2a4242a3c15a576b5 Mon Sep 17 00:00:00 2001
From: Torge Matthies <openglfreak@googlemail.com>
Date: Mon, 20 Jan 2020 01:26:52 +0100
Subject: [PATCH 2/2] vcomp: Implement C2VectParallel.

---
 dlls/vcomp/Makefile.in      |   3 +-
 dlls/vcomp/c2vectparallel.c | 298 ++++++++++++++++++++++++++++++++++++
 dlls/vcomp/tests/vcomp.c    |   2 -
 dlls/vcomp/vcomp.spec       |   1 +
 dlls/vcomp110/vcomp110.spec |   2 +-
 dlls/vcomp120/vcomp120.spec |   2 +-
 dlls/vcomp140/vcomp140.spec |   2 +-
 7 files changed, 304 insertions(+), 6 deletions(-)
 create mode 100644 dlls/vcomp/c2vectparallel.c

diff --git a/dlls/vcomp/Makefile.in b/dlls/vcomp/Makefile.in
index 31f9c99b7f..5a2276075b 100644
--- a/dlls/vcomp/Makefile.in
+++ b/dlls/vcomp/Makefile.in
@@ -3,4 +3,5 @@ MODULE = vcomp.dll
 EXTRADLLFLAGS = -mno-cygwin
 
 C_SRCS = \
-	main.c
+	main.c \
+	c2vectparallel.c
diff --git a/dlls/vcomp/c2vectparallel.c b/dlls/vcomp/c2vectparallel.c
new file mode 100644
index 0000000000..9c72210d54
--- /dev/null
+++ b/dlls/vcomp/c2vectparallel.c
@@ -0,0 +1,298 @@
+/*
+ *
+ * C2VectParallel implementation
+ *
+ * Copyright 2020 Torge Matthies
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#include <stdarg.h>
+
+#include "windef.h"
+#include "wine/debug.h"
+#include "wine/asm.h"
+
+WINE_DEFAULT_DEBUG_CHANNEL(vcomp);
+
+extern int CDECL omp_get_num_threads(void);
+extern int CDECL omp_get_thread_num(void);
+extern void CDECL _vcomp_set_num_threads(int num_threads);
+extern void WINAPIV _vcomp_fork(BOOL ifval, int nargs, void *wrapper, ...);
+
+#if defined(__i386__)
+
+extern void CDECL C2VectParallel_call_func(void (CDECL * func)(int, int, ...), int nargs,
+										   int arg1, int arg2, __ms_va_list args);
+__ASM_GLOBAL_FUNC( C2VectParallel_call_func,
+                   "pushl %ebp\n\t"
+                   __ASM_CFI(".cfi_adjust_cfa_offset 4\n\t")
+                   __ASM_CFI(".cfi_rel_offset %ebp,0\n\t")
+                   "movl %esp,%ebp\n\t"
+                   __ASM_CFI(".cfi_def_cfa_register %ebp\n\t")
+                   "pushl %esi\n\t"
+                   __ASM_CFI(".cfi_rel_offset %esi,-4\n\t")
+                   "pushl %edi\n\t"
+                   __ASM_CFI(".cfi_rel_offset %edi,-8\n\t")
+                   "movl 12(%ebp),%edx\n\t"
+                   "movl %esp,%edi\n\t"
+                   "shll $2,%edx\n\t"
+                   "jz 1f\n\t"
+                   "subl %edx,%edi\n\t"
+                   "andl $~15,%edi\n\t"
+                   "movl %edi,%esp\n\t"
+                   "movl 16(%ebp),%ecx\n\t"
+                   "movl %ecx,0(%edi)\n\t"
+                   "movl 20(%ebp),%ecx\n\t"
+                   "movl %ecx,4(%edi)\n\t"
+                   "addl $8,%edi\n\t"
+                   "movl 12(%ebp),%ecx\n\t"
+                   "subl $2,%ecx\n\t"
+                   "movl 24(%ebp),%esi\n\t"
+                   "cld\n\t"
+                   "rep; movsl\n"
+                   "1:\tcall *8(%ebp)\n\t"
+                   "leal -8(%ebp),%esp\n\t"
+                   "popl %edi\n\t"
+                   __ASM_CFI(".cfi_same_value %edi\n\t")
+                   "popl %esi\n\t"
+                   __ASM_CFI(".cfi_same_value %esi\n\t")
+                   "popl %ebp\n\t"
+                   __ASM_CFI(".cfi_def_cfa %esp,4\n\t")
+                   __ASM_CFI(".cfi_same_value %ebp\n\t")
+                   "ret" )
+
+#elif defined(__x86_64__)
+
+extern void CDECL C2VectParallel_call_func(void (CDECL * func)(int, int, ...), int nargs,
+										   int arg1, int arg2, __ms_va_list args);
+__ASM_GLOBAL_FUNC( C2VectParallel_call_func,
+                   "pushq %rbp\n\t"
+                   __ASM_SEH(".seh_pushreg %rbp\n\t")
+                   __ASM_CFI(".cfi_adjust_cfa_offset 8\n\t")
+                   __ASM_CFI(".cfi_rel_offset %rbp,0\n\t")
+                   "movq %rsp,%rbp\n\t"
+                   __ASM_SEH(".seh_setframe %rbp,0\n\t")
+                   __ASM_CFI(".cfi_def_cfa_register %rbp\n\t")
+                   "pushq %rsi\n\t"
+                   __ASM_SEH(".seh_pushreg %rsi\n\t")
+                   __ASM_CFI(".cfi_rel_offset %rsi,-8\n\t")
+                   "pushq %rdi\n\t"
+                   __ASM_SEH(".seh_pushreg %rdi\n\t")
+                   __ASM_SEH(".seh_endprologue\n\t")
+                   __ASM_CFI(".cfi_rel_offset %rdi,-16\n\t")
+                   "movq %rcx,%rax\n\t"
+                   "movq $4,%rcx\n\t"
+                   "cmp %rcx,%rdx\n\t"
+                   "cmovgq %rdx,%rcx\n\t"
+                   "leaq 0(,%rcx,8),%rdx\n\t"
+                   "subq %rdx,%rsp\n\t"
+                   "andq $~15,%rsp\n\t"
+                   "subq $2,%rcx\n\t"
+                   "movq %rsp,%rdi\n\t"
+                   "movq %r8,0(%rdi)\n\t"
+                   "movq %r9,8(%rdi)\n\t"
+                   "addq $16,%rdi\n\t"
+                   "movq 48(%rbp),%rsi\n\t"
+                   "rep; movsq\n\t"
+                   "movq 0(%rsp),%rcx\n\t"
+                   "movq 8(%rsp),%rdx\n\t"
+                   "movq 16(%rsp),%r8\n\t"
+                   "movq 24(%rsp),%r9\n\t"
+                   "callq *%rax\n\t"
+                   "leaq -16(%rbp),%rsp\n\t"
+                   "popq %rdi\n\t"
+                   __ASM_CFI(".cfi_same_value %rdi\n\t")
+                   "popq %rsi\n\t"
+                   __ASM_CFI(".cfi_same_value %rsi\n\t")
+                   __ASM_CFI(".cfi_def_cfa_register %rsp\n\t")
+                   "popq %rbp\n\t"
+                   __ASM_CFI(".cfi_adjust_cfa_offset -8\n\t")
+                   __ASM_CFI(".cfi_same_value %rbp\n\t")
+                   "ret")
+
+/*#elif defined(__arm__)
+
+extern void CDECL C2VectParallel_call_func(void (CDECL * func)(int, int, ...), int nargs,
+										   int arg1, int arg2, __ms_va_list args);
+__ASM_GLOBAL_FUNC( C2VectParallel_call_func,
+                   ".arm\n\t"
+                   "push {r4, r5, LR}\n\t"
+                   "mov r4, r0\n\t"
+                   "mov r5, SP\n\t"
+                   "lsl r3, r1, #2\n\t"
+                   "cmp r3, #0\n\t"
+                   "beq 5f\n\t"
+                   "sub SP, SP, r3\n\t"
+                   "tst r1, #1\n\t"
+                   "subeq SP, SP, #4\n\t"
+                   "1:\tsub r3, r3, #4\n\t"
+                   "ldr r0, [r2, r3]\n\t"
+                   "str r0, [SP, r3]\n\t"
+                   "cmp r3, #0\n\t"
+                   "bgt 1b\n\t"
+                   "cmp r1, #1\n\t"
+                   "bgt 2f\n\t"
+                   "pop {r0}\n\t"
+                   "b 5f\n\t"
+                   "2:\tcmp r1, #2\n\t"
+                   "bgt 3f\n\t"
+                   "pop {r0-r1}\n\t"
+                   "b 5f\n\t"
+                   "3:\tcmp r1, #3\n\t"
+                   "bgt 4f\n\t"
+                   "pop {r0-r2}\n\t"
+                   "b 5f\n\t"
+                   "4:\tpop {r0-r3}\n\t"
+                   "5:\tblx r4\n\t"
+                   "mov SP, r5\n\t"
+                   "pop {r4, r5, PC}" )
+
+#elif defined(__aarch64__)
+
+extern void CDECL C2VectParallel_call_func(void (CDECL * func)(int, int, ...), int nargs,
+										   int arg1, int arg2, __ms_va_list args);
+__ASM_GLOBAL_FUNC( C2VectParallel_call_func,
+                   "stp x29, x30, [SP,#-16]!\n\t"
+                   "mov x29, SP\n\t"
+                   "mov x9, x0\n\t"
+                   "cbz w1, 4f\n\t"
+                   "lsl w8, w1, #3\n\t"
+                   "cmp w8, #64\n\t"
+                   "b.ge 1f\n\t"
+                   "mov w8, #64\n"
+                   "1:\ttbz w8, #3, 2f\n\t"
+                   "add w8, w8, #8\n"
+                   "2:\tsub x10, x29, x8\n\t"
+                   "mov sp, x10\n"
+                   "3:\tldr x0, [x2], #8\n\t"
+                   "str x0, [x10], #8\n\t"
+                   "subs w1, w1, #1\n\t"
+                   "b.ne 3b\n\t"
+                   "ldp x0, x1, [sp], #16\n\t"
+                   "ldp x2, x3, [sp], #16\n\t"
+                   "ldp x4, x5, [sp], #16\n\t"
+                   "ldp x6, x7, [sp], #16\n"
+                   "4:\tblr x9\n\t"
+                   "mov SP, x29\n\t"
+                   "ldp x29, x30, [SP], #16\n\t"
+                   "ret\n" )*/
+
+#else
+
+static void CDECL C2VectParallel_call_func(void (CDECL * func)(int, int, ...), int nargs,
+										   int arg1, int arg2, __ms_va_list args)
+{
+    ERR("Not implemented for this architecture\n");
+}
+
+#endif
+
+struct C2VectParallel_data {
+    int start;
+    int end;
+    int stride;
+    BOOL inclusive;
+
+    void (* func)(int, int, ...);
+    int argcnt;
+	__ms_va_list valist;
+};
+
+void WINAPIV C2VectParallel_callback(struct C2VectParallel_data* data)
+{
+    int start, end, step, stride, num_threads;
+
+    /* Load the stride into a local variable. */
+    stride = data->stride;
+    /* Get the number of threads working on the input. */
+    num_threads = omp_get_num_threads();
+
+    /* Calculate how much of the input each thread works on. */
+    step = data->end - data->start;
+    if (step < 0) step = -step;
+    if (data->inclusive) step = step + 1;
+    step = step + (num_threads - 1);
+    step = step / num_threads;
+
+    /* Calculate the total number of input elements. */
+    step = data->end - data->start;
+    if (step < 0) step = -step;
+    if (data->inclusive) step = step + 1;
+    /* Divide by the number of threads, while rounding up. */
+    step = (step + (num_threads - 1)) / num_threads;
+    /* Make step a multiple of stride. */
+    if (step % stride != 0)
+        step += (stride < 0 ? -stride : stride) - step % stride;
+    /* Make step negative if stride is negative. */
+    if (stride < 0)
+        step = -step;
+
+    /* Calculate the start and the end of the range of input this thread
+       should be working on. */
+    start = data->start + step * omp_get_thread_num();
+    end = start + step;
+
+    /* Remove the last element from the range if inclusive is true.
+       Needed because otherwise the callback would process the first element
+       of the following range too. */
+    if (data->inclusive)
+        end -= step < 0 ? -1 : 1;
+
+    /* Clamp start and end to the input data range, and just return if
+       they are both outside the range. */
+    if (step < 0)
+    {
+        if (end < data->end || (!data->inclusive && end == data->end))
+        {
+            if (start < data->end || (!data->inclusive && start == data->end))
+                return;
+            end = data->end;
+        }
+    }
+    else
+    {
+        if (end > data->end || (!data->inclusive && end == data->end))
+        {
+            if (start > data->end || (!data->inclusive && start == data->end))
+                return;
+            end = data->end;
+        }
+    }
+
+    /* Call the user-provided callback function. */
+    C2VectParallel_call_func(data->func, data->argcnt, start, end, data->valist);
+}
+
+void WINAPIV C2VectParallel(int start, int end, int stride, BOOL inclusive, unsigned int numChunks,
+                            int schedule, void (CDECL * func)(int, int, ...), int argcnt, ...)
+{
+    struct C2VectParallel_data data;
+
+    TRACE("(%d, %d, %d, %d, %ud, %d, %p, %d, ...)\n", start, end, stride, inclusive, numChunks, schedule, func, argcnt);
+
+    data.start = start;
+    data.end = end;
+    data.stride = stride;
+    data.inclusive = inclusive;
+    data.func = func;
+    data.argcnt = argcnt;
+    __ms_va_start(data.valist, argcnt);
+
+    _vcomp_set_num_threads(numChunks);
+    _vcomp_fork(TRUE, 1, C2VectParallel_callback, &data);
+
+    __ms_va_end(data.valist);
+}
diff --git a/dlls/vcomp/tests/vcomp.c b/dlls/vcomp/tests/vcomp.c
index 96be00ba03..575086a5ec 100644
--- a/dlls/vcomp/tests/vcomp.c
+++ b/dlls/vcomp/tests/vcomp.c
@@ -2259,7 +2259,6 @@ static void test_C2VectParallel(void)
 
     count = 0;
     pC2VectParallel(0, 0xDEAD, 1, FALSE, 4, 0, (void (CDECL *)(int, int, ...))c2vect_worker_threads, 3, &count);
-    todo_wine
     ok(count == 4, "expected 4 threads, got %i\n", count);
 
     for (i = 0; i < ARRAY_SIZE(range_tests); i++)
@@ -2268,7 +2267,6 @@ static void test_C2VectParallel(void)
         pC2VectParallel(range_tests[i].start, range_tests[i].end, range_tests[i].stride, range_tests[i].inclusive, 4,
                         range_tests[i].schedule, (void (CDECL *)(int, int, ...))c2vect_worker_range, 4, &count,
                         range_tests[i].inclusive);
-        todo_wine
         ok(count == range_tests[i].expected, "expected count == %i, got %i\n", range_tests[i].expected, count);
     }
 }
diff --git a/dlls/vcomp/vcomp.spec b/dlls/vcomp/vcomp.spec
index f2231c0de2..fb4d626c07 100644
--- a/dlls/vcomp/vcomp.spec
+++ b/dlls/vcomp/vcomp.spec
@@ -1,3 +1,4 @@
+@ varargs C2VectParallel(long long long long long long ptr long)
 @ cdecl _vcomp_atomic_add_i1(ptr long)
 @ cdecl _vcomp_atomic_add_i2(ptr long)
 @ cdecl _vcomp_atomic_add_i4(ptr long)
diff --git a/dlls/vcomp110/vcomp110.spec b/dlls/vcomp110/vcomp110.spec
index cec1c99a7f..09488c2578 100644
--- a/dlls/vcomp110/vcomp110.spec
+++ b/dlls/vcomp110/vcomp110.spec
@@ -1,4 +1,4 @@
-@ stub C2VectParallel
+@ varargs C2VectParallel(long long long long long long ptr long) vcomp.C2VectParallel
 @ cdecl _vcomp_atomic_add_i1(ptr long) vcomp._vcomp_atomic_add_i1
 @ cdecl _vcomp_atomic_add_i2(ptr long) vcomp._vcomp_atomic_add_i2
 @ cdecl _vcomp_atomic_add_i4(ptr long) vcomp._vcomp_atomic_add_i4
diff --git a/dlls/vcomp120/vcomp120.spec b/dlls/vcomp120/vcomp120.spec
index cec1c99a7f..09488c2578 100644
--- a/dlls/vcomp120/vcomp120.spec
+++ b/dlls/vcomp120/vcomp120.spec
@@ -1,4 +1,4 @@
-@ stub C2VectParallel
+@ varargs C2VectParallel(long long long long long long ptr long) vcomp.C2VectParallel
 @ cdecl _vcomp_atomic_add_i1(ptr long) vcomp._vcomp_atomic_add_i1
 @ cdecl _vcomp_atomic_add_i2(ptr long) vcomp._vcomp_atomic_add_i2
 @ cdecl _vcomp_atomic_add_i4(ptr long) vcomp._vcomp_atomic_add_i4
diff --git a/dlls/vcomp140/vcomp140.spec b/dlls/vcomp140/vcomp140.spec
index cec1c99a7f..09488c2578 100644
--- a/dlls/vcomp140/vcomp140.spec
+++ b/dlls/vcomp140/vcomp140.spec
@@ -1,4 +1,4 @@
-@ stub C2VectParallel
+@ varargs C2VectParallel(long long long long long long ptr long) vcomp.C2VectParallel
 @ cdecl _vcomp_atomic_add_i1(ptr long) vcomp._vcomp_atomic_add_i1
 @ cdecl _vcomp_atomic_add_i2(ptr long) vcomp._vcomp_atomic_add_i2
 @ cdecl _vcomp_atomic_add_i4(ptr long) vcomp._vcomp_atomic_add_i4
-- 
2.25.0

