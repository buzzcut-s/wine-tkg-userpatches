From: Piotr Caban <piotr@codeweavers.com>
Subject: [PATCH 5/6 v2] server: Introduce when_t type that stores absolute timeout using regular or monotonic clock.
Message-Id: <0b895760-1b09-16b8-91bb-3f69a36cf4c9@codeweavers.com>
Date: Fri, 21 Feb 2020 13:43:49 +0100

Signed-off-by: Piotr Caban <piotr@codeweavers.com>
---
  dlls/ntdll/server.c |  2 +-
  dlls/ntdll/sync.c   |  2 +-
  server/file.h       |  1 +
  server/protocol.def |  7 +++++--
  server/timer.c      | 14 +++++++++-----
  server/trace.c      |  5 +++++
  tools/make_requests |  1 +
  7 files changed, 23 insertions(+), 9 deletions(-)

diff --git a/dlls/ntdll/server.c b/dlls/ntdll/server.c
index df832f555e..e109f4a107 100644
--- a/dlls/ntdll/server.c
+++ b/dlls/ntdll/server.c
@@ -600,7 +600,7 @@ unsigned int server_select( const select_op_t *select_op, data_size_t size, UINT
     obj_handle_t apc_handle = 0;
     apc_call_t call;
     apc_result_t result;
-    timeout_t when = timeout ? timeout->QuadPart : TIMEOUT_INFINITE;
+    when_t when = timeout ? timeout->QuadPart : TIMEOUT_INFINITE;
     sigset_t old_set;
 
     memset( &result, 0, sizeof(result) );
diff --git a/dlls/ntdll/sync.c b/dlls/ntdll/sync.c
index 5d150e6314..6abad124b0 100644
--- a/dlls/ntdll/sync.c
+++ b/dlls/ntdll/sync.c
@@ -2463,7 +2463,7 @@ NTSTATUS WINAPI RtlWaitOnAddress( const void *addr, const void *cmp, SIZE_T size
     obj_handle_t apc_handle = 0;
     apc_call_t call;
     apc_result_t result;
-    timeout_t when = timeout ? timeout->QuadPart : TIMEOUT_INFINITE;
+    when_t when = timeout ? timeout->QuadPart : TIMEOUT_INFINITE;
     sigset_t old_set;
 
     if (size != 1 && size != 2 && size != 4 && size != 8)
diff --git a/server/file.h b/server/file.h
index 51734f4f79..1da31f1f4a 100644
--- a/server/file.h
+++ b/server/file.h
@@ -138,6 +138,7 @@ typedef void (*timeout_callback)( void *private );
 extern struct timeout_user *add_timeout_user( timeout_t when, timeout_callback func, void *private );
 extern void remove_timeout_user( struct timeout_user *user );
 extern const char *get_timeout_str( timeout_t timeout );
+extern const char *get_when_str( when_t when );
 
 /* file functions */
 
diff --git a/server/protocol.def b/server/protocol.def
index f84e358501..b918afa7f2 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -214,6 +214,9 @@ struct wake_up_reply
 typedef __int64 timeout_t;
 #define TIMEOUT_INFINITE (((timeout_t)0x7fffffff) << 32 | 0xffffffff)
 
+/* absolute timeout, negative means that monotonic clock is used */
+typedef __int64 when_t;
+
 /* structure for process startup info */
 typedef struct
 {
@@ -1096,7 +1099,7 @@ struct rawinput_device
 @REQ(select)
     int          flags;        /* wait flags (see below) */
     client_ptr_t cookie;       /* magic cookie to return to client */
-    timeout_t    timeout;      /* timeout */
+    when_t       timeout;      /* timeout */
     obj_handle_t prev_apc;     /* handle to previous APC */
     VARARG(result,apc_result); /* result of previous APC */
     VARARG(data,select_op);    /* operation-specific data */
@@ -2141,7 +2144,7 @@ enum char_info_mode
 @REQ(get_timer_info)
     obj_handle_t handle;        /* handle to the timer */
 @REPLY
-    timeout_t    when;          /* absolute time when the timer next expires */
+    when_t       when;          /* time when the timer next expires */
     int          signaled;      /* is the timer signaled? */
 @END
 
diff --git a/server/timer.c b/server/timer.c
index 9ab11a4e7d..8bd9d57404 100644
--- a/server/timer.c
+++ b/server/timer.c
@@ -43,7 +43,7 @@ struct timer
     int                  manual;    /* manual reset */
     int                  signaled;  /* current signaled state */
     unsigned int         period;    /* timer period in ms */
-    timeout_t            when;      /* next expiration (uses monotonic clock if negative) */
+    when_t               when;      /* next expiration (uses monotonic clock if negative) */
     struct timeout_user *timeout;   /* timeout user */
     struct thread       *thread;    /* thread that set the APC function */
     client_ptr_t         callback;  /* callback APC function */
@@ -103,9 +103,9 @@ static struct timer *create_timer( struct object *root, const struct unicode_str
     return timer;
 }
 
-static inline timeout_t when_to_abs_timeout( timeout_t when )
+static inline timeout_t when_to_abs_timeout( when_t when )
 {
-    if (when > 0) return when;
+    if (when >= 0) return when;
     return current_time - monotonic_time - when;
 }
 
@@ -187,13 +187,17 @@ static int set_timer( struct timer *timer, timeout_t expire, unsigned int period
     return signaled;
 }
 
+const char *get_when_str( when_t when )
+{
+    return get_timeout_str( when_to_abs_timeout(when) );
+}
+
 static void timer_dump( struct object *obj, int verbose )
 {
     struct timer *timer = (struct timer *)obj;
-    timeout_t timeout = (timer->when >= 0) ? timer->when : timer->when + monotonic_time;
     assert( obj->ops == &timer_ops );
     fprintf( stderr, "Timer manual=%d when=%s period=%u\n",
-             timer->manual, get_timeout_str(timeout), timer->period );
+             timer->manual, get_when_str(timer->when), timer->period );
 }
 
 static struct object_type *timer_get_type( struct object *obj )
diff --git a/server/trace.c b/server/trace.c
index 79e3f22ee5..44fd0732ba 100644
--- a/server/trace.c
+++ b/server/trace.c
@@ -88,6 +88,11 @@ static void dump_timeout( const char *prefix, const timeout_t *time )
     fprintf( stderr, "%s%s", prefix, get_timeout_str(*time) );
 }
 
+static void dump_when( const char *prefix, const when_t *when )
+{
+    fprintf( stderr, "%s%s", prefix, get_when_str(*when) );
+}
+
 static void dump_uint64( const char *prefix, const unsigned __int64 *val )
 {
     if ((unsigned int)*val != *val)
diff --git a/tools/make_requests b/tools/make_requests
index 4e39bb65a9..bb923dac18 100755
--- a/tools/make_requests
+++ b/tools/make_requests
@@ -43,6 +43,7 @@ my %formats =
     "mem_size_t"    => [  8,   8,  "&dump_uint64" ],
     "affinity_t"    => [  8,   8,  "&dump_uint64" ],
     "timeout_t"     => [  8,   8,  "&dump_timeout" ],
+    "when_t"        => [  8,   8,  "&dump_when" ],
     "rectangle_t"   => [  16,  4,  "&dump_rectangle" ],
     "char_info_t"   => [  4,   2,  "&dump_char_info" ],
     "apc_call_t"    => [  40,  8,  "&dump_apc_call" ],

