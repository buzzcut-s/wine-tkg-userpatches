From 04edab3523e2cb6fe3bae42c69d432c6ee8ba1e8 Mon Sep 17 00:00:00 2001
From: Huw Davies <huw@codeweavers.com>
Date: Wed, 8 Jul 2020 13:39:49 +0100
Subject: [PATCH 12/15] server: Use separate functions to update the desktop
 and input keystates.

Signed-off-by: Huw Davies <huw@codeweavers.com>
---
 server/queue.c | 44 +++++++++++++++++++++++++++-----------------
 1 file changed, 27 insertions(+), 17 deletions(-)

diff --git a/server/queue.c b/server/queue.c
index 032308a5220..129d731f7fd 100644
--- a/server/queue.c
+++ b/server/queue.c
@@ -1395,10 +1395,10 @@ static void set_input_key_state( unsigned char *keystate, unsigned char key, uns
 }
 
 /* update the key state for a keyboard message */
-static void update_key_state( struct desktop *desktop, unsigned char *keystate,
-                              unsigned int msg, lparam_t wparam )
+static void update_key_state( unsigned char *keystate, unsigned int msg,
+                              lparam_t wparam, int desktop )
 {
-    unsigned char key, down = 0, down_val = (keystate == desktop->keystate) ? 0xc0 : 0x80;
+    unsigned char key, down = 0, down_val = desktop ? 0xc0 : 0x80;
 
     switch (msg)
     {
@@ -1457,6 +1457,11 @@ static void update_input_key_state( struct desktop *desktop, unsigned char *keys
     }
 }
 
+static void update_desktop_key_state( struct desktop *desktop, unsigned int msg, lparam_t wparam )
+{
+    update_key_state( desktop->keystate, msg, wparam, 1 );
+}
+
 /* update the desktop key state according to a mouse message flags */
 static void update_desktop_mouse_state( struct desktop *desktop, unsigned int flags,
                                         int x, int y, lparam_t wparam )
@@ -1464,21 +1474,21 @@ static void update_desktop_mouse_state( struct desktop *desktop, unsigned int fl
     if (flags & MOUSEEVENTF_MOVE)
         update_desktop_cursor_pos( desktop, x, y );
     if (flags & MOUSEEVENTF_LEFTDOWN)
-        update_key_state( desktop, desktop->keystate, WM_LBUTTONDOWN, wparam );
+        update_desktop_key_state( desktop, WM_LBUTTONDOWN, wparam );
     if (flags & MOUSEEVENTF_LEFTUP)
-        update_key_state( desktop, desktop->keystate, WM_LBUTTONUP, wparam );
+        update_desktop_key_state( desktop, WM_LBUTTONUP, wparam );
     if (flags & MOUSEEVENTF_RIGHTDOWN)
-        update_key_state( desktop, desktop->keystate, WM_RBUTTONDOWN, wparam );
+        update_desktop_key_state( desktop, WM_RBUTTONDOWN, wparam );
     if (flags & MOUSEEVENTF_RIGHTUP)
-        update_key_state( desktop, desktop->keystate, WM_RBUTTONUP, wparam );
+        update_desktop_key_state( desktop, WM_RBUTTONUP, wparam );
     if (flags & MOUSEEVENTF_MIDDLEDOWN)
-        update_key_state( desktop, desktop->keystate, WM_MBUTTONDOWN, wparam );
+        update_desktop_key_state( desktop, WM_MBUTTONDOWN, wparam );
     if (flags & MOUSEEVENTF_MIDDLEUP)
-        update_key_state( desktop, desktop->keystate, WM_MBUTTONUP, wparam );
+        update_desktop_key_state( desktop, WM_MBUTTONUP, wparam );
     if (flags & MOUSEEVENTF_XDOWN)
-        update_key_state( desktop, desktop->keystate, WM_XBUTTONDOWN, wparam );
+        update_desktop_key_state( desktop, WM_XBUTTONDOWN, wparam );
     if (flags & MOUSEEVENTF_XUP)
-        update_key_state( desktop, desktop->keystate, WM_XBUTTONUP, wparam );
+        update_desktop_key_state( desktop, WM_XBUTTONUP, wparam );
 }
 
 /* release the hardware message currently being processed by the given thread */
@@ -1505,7 +1515,7 @@ static void synchronize_input_key_state( struct thread_input *input )
 static void update_input_key_state( struct thread_input *input, unsigned int msg, lparam_t wparam )
 {
     synchronize_input_key_state( input );
-    update_key_state( input->desktop, input->keystate, msg, wparam );
+    update_key_state( input->keystate, msg, wparam, 0 );
 }
 
 /* release the hardware message currently being processed by the given thread */
@@ -1635,7 +1645,7 @@ static void queue_hardware_message( struct desktop *desktop, struct message *msg
     struct hardware_msg_data *msg_data = msg->data;
     unsigned int msg_code;
 
-    update_key_state( desktop, desktop->keystate, msg->msg, msg->wparam );
+    update_desktop_key_state( desktop, msg->msg, msg->wparam );
     last_input_time = get_tick_count();
     if (msg->msg != WM_MOUSEMOVE) always_queue = 1;
 
@@ -2039,7 +2049,7 @@ static int queue_keyboard_message( struct desktop *desktop, user_handle_t win, c
 
     if ((device = current->process->rawinput_kbd) && (device->flags & RIDEV_NOLEGACY))
     {
-        update_key_state( desktop, desktop->keystate, message_code, vkey );
+        update_desktop_key_state( desktop, message_code, vkey );
         return 0;
     }
 
