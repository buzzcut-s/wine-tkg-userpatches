From 09a7e5731123a39aff018a2f9c4f1617191f3016 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Fri, 6 Nov 2020 20:05:36 +0100
Subject: [PATCH 05/24] gdi32: Compare font face names using
 RtlDowncaseUnicodeChar.

This is faster than wcsicmp, and does not depend on the current locale.
---
 dlls/gdi32/font.c       | 61 ++++++++++++++++++++++++-----------------
 dlls/gdi32/tests/font.c |  2 +-
 2 files changed, 37 insertions(+), 26 deletions(-)

diff --git a/dlls/gdi32/font.c b/dlls/gdi32/font.c
index 6ad03df176b..1cf3e979b5d 100644
--- a/dlls/gdi32/font.c
+++ b/dlls/gdi32/font.c
@@ -96,6 +96,17 @@ static struct font_gamma_ramp font_gamma_ramp;
 static void add_face_to_cache( struct gdi_font_face *face );
 static void remove_face_from_cache( struct gdi_font_face *face );
 
+static inline int facename_compare( const WCHAR *str1, const WCHAR *str2, SIZE_T len )
+{
+    while (len--)
+    {
+        WCHAR c1 = RtlDowncaseUnicodeChar(*str1++), c2 = RtlDowncaseUnicodeChar(*str2++);
+        if (c1 != c2) return c1 - c2;
+        else if (!c1) return 0;
+    }
+    return 0;
+}
+
   /* Device -> World size conversion */
 
 /* Performs a device to world transformation on the specified width (which
@@ -461,7 +472,7 @@ static const WCHAR *get_gdi_font_subst( const WCHAR *from_name, int from_charset
 
     LIST_FOR_EACH_ENTRY( subst, &font_subst_list, struct gdi_font_subst, entry )
     {
-        if (!wcsicmp(subst->names, from_name) &&
+        if (!facename_compare( subst->names, from_name, -1 ) &&
            (subst->from_charset == from_charset || subst->from_charset == -1))
         {
             if (to_charset) *to_charset = subst->to_charset;
@@ -564,7 +575,7 @@ static struct gdi_font_family *find_family_from_name( const WCHAR *name )
     struct gdi_font_family *family;
 
     LIST_FOR_EACH_ENTRY( family, &font_list, struct gdi_font_family, entry )
-        if (!wcsnicmp( family->family_name, name, LF_FACESIZE - 1 )) return family;
+        if (!facename_compare( family->family_name, name, LF_FACESIZE - 1 )) return family;
     return NULL;
 }
 
@@ -574,8 +585,8 @@ static struct gdi_font_family *find_family_from_any_name( const WCHAR *name )
 
     LIST_FOR_EACH_ENTRY( family, &font_list, struct gdi_font_family, entry )
     {
-        if (!wcsnicmp( family->family_name, name, LF_FACESIZE - 1 )) return family;
-        if (!wcsnicmp( family->second_name, name, LF_FACESIZE - 1 )) return family;
+        if (!facename_compare( family->family_name, name, LF_FACESIZE - 1 )) return family;
+        if (!facename_compare( family->second_name, name, LF_FACESIZE - 1 )) return family;
     }
     return NULL;
 }
@@ -595,7 +606,7 @@ static struct gdi_font_face *find_face_from_filename( const WCHAR *file_name, co
 
     LIST_FOR_EACH_ENTRY( family, &font_list, struct gdi_font_family, entry )
     {
-        if (family_name && wcsnicmp( family_name, family->family_name, LF_FACESIZE - 1 )) continue;
+        if (family_name && facename_compare( family_name, family->family_name, LF_FACESIZE - 1 )) continue;
         LIST_FOR_EACH_ENTRY( face, get_family_face_list(family), struct gdi_font_face, entry )
         {
             if (!face->file) continue;
@@ -793,7 +804,7 @@ static int remove_font( const WCHAR *file, DWORD flags )
 
 static inline BOOL faces_equal( const struct gdi_font_face *f1, const struct gdi_font_face *f2 )
 {
-    if (wcsicmp( f1->full_name, f2->full_name )) return FALSE;
+    if (facename_compare( f1->full_name, f2->full_name, -1 )) return FALSE;
     if (f1->scalable) return TRUE;
     if (f1->size.y_ppem != f2->size.y_ppem) return FALSE;
     return !memcmp( &f1->fs, &f2->fs, sizeof(f1->fs) );
@@ -1039,7 +1050,7 @@ static void reorder_vertical_fonts(void)
     {
         family = LIST_ENTRY( ptr, struct gdi_font_family, entry );
         vert_family = LIST_ENTRY( vptr, struct gdi_font_family, entry );
-        if (wcsicmp( family->family_name, vert_family->family_name + 1 ) > 0)
+        if (facename_compare( family->family_name, vert_family->family_name + 1, -1 ) > 0)
         {
             list_remove( vptr );
             list_add_before( ptr, vptr );
@@ -1163,7 +1174,7 @@ static struct gdi_font_link *find_gdi_font_link( const WCHAR *name )
     struct gdi_font_link *link;
 
     LIST_FOR_EACH_ENTRY( link, &font_links, struct gdi_font_link, entry )
-        if (!wcsnicmp( link->name, name, LF_FACESIZE - 1 )) return link;
+        if (!facename_compare( link->name, name, LF_FACESIZE - 1 )) return link;
     return NULL;
 }
 
@@ -1176,8 +1187,8 @@ static struct gdi_font_family *find_family_from_font_links( const WCHAR *name, c
 
     LIST_FOR_EACH_ENTRY( link, &font_links, struct gdi_font_link, entry )
     {
-        if (!wcsnicmp( link->name, name, LF_FACESIZE - 1) ||
-            (subst && !wcsnicmp( link->name, subst, LF_FACESIZE - 1 )))
+        if (!facename_compare( link->name, name, LF_FACESIZE - 1 ) ||
+            (subst && !facename_compare( link->name, subst, LF_FACESIZE - 1 )))
         {
             TRACE("found entry in system list\n");
             LIST_FOR_EACH_ENTRY( entry, &link->links, struct gdi_font_link_entry, entry )
@@ -1278,7 +1289,7 @@ static void populate_system_links( const WCHAR *name, const WCHAR * const *value
     font_link = add_gdi_font_link( name );
     for ( ; *values; values++)
     {
-        if  (!wcsicmp( name, *values )) continue;
+        if  (!facename_compare( name, *values, -1 )) continue;
         if (!(value = get_gdi_font_subst( *values, -1, NULL ))) value = *values;
         if (!(family = find_family_from_name( value ))) continue;
         /* use first extant filename for this Family */
@@ -1361,12 +1372,12 @@ static void load_system_links(void)
         {
             const WCHAR *subst = get_gdi_font_subst( font_links_defaults_list[i].shelldlg, -1, NULL );
 
-            if ((!wcsicmp( font_links_defaults_list[i].shelldlg, shelldlg_name ) ||
-                 (subst && !wcsicmp( subst, shelldlg_name ))))
+            if ((!facename_compare( font_links_defaults_list[i].shelldlg, shelldlg_name, -1 ) ||
+                 (subst && !facename_compare( subst, shelldlg_name, -1 ))))
             {
                 for (j = 0; j < ARRAY_SIZE(font_links_list); j++)
                     populate_system_links( font_links_list[j], font_links_defaults_list[i].substitutes );
-                if (!wcsicmp(shelldlg_name, font_links_defaults_list[i].substitutes[0]))
+                if (!facename_compare(shelldlg_name, font_links_defaults_list[i].substitutes[0], -1))
                     populate_system_links( shelldlg_name, font_links_defaults_list[i].substitutes );
             }
         }
@@ -1467,7 +1478,7 @@ static struct gdi_font_face *find_matching_face_by_name( const WCHAR *name, cons
     /* search by full face name */
     LIST_FOR_EACH_ENTRY( family, &font_list, struct gdi_font_family, entry )
         LIST_FOR_EACH_ENTRY( face, get_family_face_list(family), struct gdi_font_face, entry )
-            if (!wcsnicmp( face->full_name, name, LF_FACESIZE - 1 ) &&
+            if (!facename_compare( face->full_name, name, LF_FACESIZE - 1 ) &&
                 can_select_face( face, fs, can_use_bitmap ))
                 return face;
 
@@ -1492,8 +1503,8 @@ static struct gdi_font_face *find_any_face( const LOGFONTW *lf, FONTSIGNATURE fs
         LIST_FOR_EACH_ENTRY( family, &font_list, struct gdi_font_family, entry )
         {
             if ((family->family_name[0] == '@') == !want_vertical) continue;
-            if (wcsicmp( family->family_name + want_vertical, name ) &&
-                wcsicmp( family->second_name + want_vertical, name )) continue;
+            if (facename_compare( family->family_name + want_vertical, name, -1 ) &&
+                facename_compare( family->second_name + want_vertical, name, -1 )) continue;
             if ((face = find_best_matching_face( family, lf, fs, FALSE ))) return face;
         }
     }
@@ -2139,7 +2150,7 @@ static void create_child_font_list( struct gdi_font *font )
      * Sans Serif.  This is how asian windows get default fallbacks for fonts
      */
     if (is_dbcs_ansi_cp(GetACP()) && font->charset != SYMBOL_CHARSET && font->charset != OEM_CHARSET &&
-        wcsicmp( font_name, L"Microsoft Sans Serif" ) != 0)
+        facename_compare( font_name, L"Microsoft Sans Serif", -1 ) != 0)
     {
         if ((font_link = find_gdi_font_link( L"Microsoft Sans Serif" )))
         {
@@ -2164,7 +2175,7 @@ static BOOL fontcmp( const struct gdi_font *font, DWORD hash, const LOGFONTW *lf
     if (memcmp( &font->matrix, matrix, sizeof(*matrix))) return TRUE;
     if (memcmp( &font->lf, lf, offsetof(LOGFONTW, lfFaceName))) return TRUE;
     if (!font->can_use_bitmap != !can_use_bitmap) return TRUE;
-    return wcsicmp( font->lf.lfFaceName, lf->lfFaceName);
+    return facename_compare( font->lf.lfFaceName, lf->lfFaceName, -1 );
 }
 
 static DWORD hash_font( const LOGFONTW *lf, const FMAT2 *matrix, BOOL can_use_bitmap )
@@ -2685,16 +2696,16 @@ static BOOL family_matches( struct gdi_font_family *family, const WCHAR *face_na
 {
     struct gdi_font_face *face;
 
-    if (!wcsnicmp( face_name, family->family_name, LF_FACESIZE - 1 )) return TRUE;
+    if (!facename_compare( face_name, family->family_name, LF_FACESIZE - 1 )) return TRUE;
     LIST_FOR_EACH_ENTRY( face, get_family_face_list(family), struct gdi_font_face, entry )
-        if (!wcsnicmp( face_name, face->full_name, LF_FACESIZE - 1 )) return TRUE;
+        if (!facename_compare( face_name, face->full_name, LF_FACESIZE - 1 )) return TRUE;
     return FALSE;
 }
 
 static BOOL face_matches( const WCHAR *family_name, struct gdi_font_face *face, const WCHAR *face_name )
 {
-    if (!wcsnicmp( face_name, family_name, LF_FACESIZE - 1)) return TRUE;
-    return !wcsnicmp( face_name, face->full_name, LF_FACESIZE - 1 );
+    if (!facename_compare( face_name, family_name, LF_FACESIZE - 1)) return TRUE;
+    return !facename_compare( face_name, face->full_name, LF_FACESIZE - 1 );
 }
 
 static BOOL enum_face_charsets( const struct gdi_font_family *family, struct gdi_font_face *face,
@@ -3560,7 +3571,7 @@ static struct gdi_font *select_font( LOGFONTW *lf, FMAT2 dcmat, BOOL can_use_bit
        SYMBOL_CHARSET so that Symbol gets picked irrespective of the
        original value lfCharSet.  Note this is a special case for
        Symbol and doesn't happen at least for "Wingdings*" */
-    if (!wcsicmp( lf->lfFaceName, L"Symbol" )) lf->lfCharSet = SYMBOL_CHARSET;
+    if (!facename_compare( lf->lfFaceName, L"Symbol", -1 )) lf->lfCharSet = SYMBOL_CHARSET;
 
     /* check the cache first */
     if ((font = find_cached_gdi_font( lf, &dcmat, can_use_bitmap )))
@@ -7764,7 +7775,7 @@ struct external_key
 
 static int compare_external_key( const void *key, const struct wine_rb_entry *entry )
 {
-    return wcsicmp( key, WINE_RB_ENTRY_VALUE( entry, struct external_key, entry )->value );
+    return facename_compare( key, WINE_RB_ENTRY_VALUE( entry, struct external_key, entry )->value, -1 );
 }
 
 static struct wine_rb_tree external_keys = { compare_external_key };
#diff --git a/dlls/gdi32/tests/font.c b/dlls/gdi32/tests/font.c
#index 9b3c0eeeb61..d2cd50f4ab9 100644
#--- a/dlls/gdi32/tests/font.c
#+++ b/dlls/gdi32/tests/font.c
#@@ -7285,7 +7285,7 @@ static void test_lang_names(void)
#             wcscpy( font_w.lfFaceName, L"Wine POLICE D'ÉCRITURE (fr)" );
#             memset( &efnd_w, 0, sizeof(efnd_w) );
#             EnumFontFamiliesExW( dc, &font_w, enum_fullname_data_proc_w, (LPARAM)&efnd_w, 0 );
#-            todo_wine ok( efnd_w.total == 1, "%d: EnumFontFamiliesExW unexpected count %u.\n", i, efnd_w.total );
#+            ok( efnd_w.total == 1, "%d: EnumFontFamiliesExW unexpected count %u.\n", i, efnd_w.total );
#         }
# 
#         strcpy( font.lfFaceName, "Wine Lang Cond (ko)" );
-- 
2.29.2

