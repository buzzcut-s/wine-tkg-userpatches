From: Piotr Caban <piotr@codeweavers.com>
Subject: [PATCH 6/7] msvcrt: Remove MSVCRT__locale_t type.
Message-Id: <c3ecaa23-5556-e824-820c-91552c3e1329@codeweavers.com>
Date: Thu, 26 Nov 2020 19:19:18 +0100

Signed-off-by: Piotr Caban <piotr@codeweavers.com>
---
  dlls/msvcrt/console.c |   4 +-
  dlls/msvcrt/ctype.c   |  32 ++++----
  dlls/msvcrt/file.c    |  26 +++----
  dlls/msvcrt/locale.c  |  22 +++---
  dlls/msvcrt/mbcs.c    |  82 ++++++++++----------
  dlls/msvcrt/msvcrt.h  |  67 ++++++++--------
  dlls/msvcrt/printf.h  |  22 +++---
  dlls/msvcrt/scanf.c   |  48 ++++++------
  dlls/msvcrt/scanf.h   |  32 ++++----
  dlls/msvcrt/string.c  |  56 +++++++-------
  dlls/msvcrt/time.c    |  10 +--
  dlls/msvcrt/wcs.c     | 174 +++++++++++++++++++++---------------------
  12 files changed, 284 insertions(+), 291 deletions(-)

diff --git a/dlls/msvcrt/console.c b/dlls/msvcrt/console.c
index 9bf5e56b8dd..e2452104010 100644
--- a/dlls/msvcrt/console.c
+++ b/dlls/msvcrt/console.c
@@ -567,7 +567,7 @@ int WINAPIV _cwprintf(const MSVCRT_wchar_t* format, ...)
  *		__conio_common_vcprintf (UCRTBASE.@)
  */
 int CDECL MSVCRT__conio_common_vcprintf(unsigned __int64 options, const char* format,
-                                        MSVCRT__locale_t locale, __ms_va_list valist)
+                                        _locale_t locale, __ms_va_list valist)
 {
     if (options & ~UCRTBASE_PRINTF_MASK)
         FIXME("options %s not handled\n", wine_dbgstr_longlong(options));
@@ -579,7 +579,7 @@ int CDECL MSVCRT__conio_common_vcprintf(unsigned __int64 options, const char* fo
  *		__conio_common_vcwprintf (UCRTBASE.@)
  */
 int CDECL MSVCRT__conio_common_vcwprintf(unsigned __int64 options, const MSVCRT_wchar_t* format,
-                                         MSVCRT__locale_t locale, __ms_va_list valist)
+                                         _locale_t locale, __ms_va_list valist)
 {
     if (options & ~UCRTBASE_PRINTF_MASK)
         FIXME("options %s not handled\n", wine_dbgstr_longlong(options));
diff --git a/dlls/msvcrt/ctype.c b/dlls/msvcrt/ctype.c
index adeab8cf928..0679c66f338 100644
--- a/dlls/msvcrt/ctype.c
+++ b/dlls/msvcrt/ctype.c
@@ -145,7 +145,7 @@ const unsigned short* CDECL MSVCRT___pctype_func(void)
 /*********************************************************************
  *		_isctype_l (MSVCRT.@)
  */
-int CDECL MSVCRT__isctype_l(int c, int type, MSVCRT__locale_t locale)
+int CDECL MSVCRT__isctype_l(int c, int type, _locale_t locale)
 {
   pthreadlocinfo locinfo;
 
@@ -186,7 +186,7 @@ int CDECL MSVCRT__isctype(int c, int type)
 /*********************************************************************
  *		_isalnum_l (MSVCRT.@)
  */
-int CDECL MSVCRT__isalnum_l(int c, MSVCRT__locale_t locale)
+int CDECL MSVCRT__isalnum_l(int c, _locale_t locale)
 {
   return MSVCRT__isctype_l( c, MSVCRT__ALPHA | MSVCRT__DIGIT, locale );
 }
@@ -202,7 +202,7 @@ int CDECL MSVCRT_isalnum(int c)
 /*********************************************************************
  *		_isalpha_l (MSVCRT.@)
  */
-int CDECL MSVCRT__isalpha_l(int c, MSVCRT__locale_t locale)
+int CDECL MSVCRT__isalpha_l(int c, _locale_t locale)
 {
   return MSVCRT__isctype_l( c, MSVCRT__ALPHA, locale );
 }
@@ -218,7 +218,7 @@ int CDECL MSVCRT_isalpha(int c)
 /*********************************************************************
  *		_iscntrl_l (MSVCRT.@)
  */
-int CDECL MSVCRT__iscntrl_l(int c, MSVCRT__locale_t locale)
+int CDECL MSVCRT__iscntrl_l(int c, _locale_t locale)
 {
   return MSVCRT__isctype_l( c, MSVCRT__CONTROL, locale );
 }
@@ -234,7 +234,7 @@ int CDECL MSVCRT_iscntrl(int c)
 /*********************************************************************
  *		_isdigit_l (MSVCRT.@)
  */
-int CDECL MSVCRT__isdigit_l(int c, MSVCRT__locale_t locale)
+int CDECL MSVCRT__isdigit_l(int c, _locale_t locale)
 {
   return MSVCRT__isctype_l( c, MSVCRT__DIGIT, locale );
 }
@@ -250,7 +250,7 @@ int CDECL MSVCRT_isdigit(int c)
 /*********************************************************************
  *		_isgraph_l (MSVCRT.@)
  */
-int CDECL MSVCRT__isgraph_l(int c, MSVCRT__locale_t locale)
+int CDECL MSVCRT__isgraph_l(int c, _locale_t locale)
 {
   return MSVCRT__isctype_l( c, MSVCRT__ALPHA | MSVCRT__DIGIT | MSVCRT__PUNCT, locale );
 }
@@ -266,7 +266,7 @@ int CDECL MSVCRT_isgraph(int c)
 /*********************************************************************
  *		_isleadbyte_l (MSVCRT.@)
  */
-int CDECL MSVCRT__isleadbyte_l(int c, MSVCRT__locale_t locale)
+int CDECL MSVCRT__isleadbyte_l(int c, _locale_t locale)
 {
   return MSVCRT__isctype_l( c, MSVCRT__LEADBYTE, locale );
 }
@@ -282,7 +282,7 @@ int CDECL MSVCRT_isleadbyte(int c)
 /*********************************************************************
  *		_islower_l (MSVCRT.@)
  */
-int CDECL MSVCRT__islower_l(int c, MSVCRT__locale_t locale)
+int CDECL MSVCRT__islower_l(int c, _locale_t locale)
 {
   return MSVCRT__isctype_l( c, MSVCRT__LOWER, locale );
 }
@@ -298,7 +298,7 @@ int CDECL MSVCRT_islower(int c)
 /*********************************************************************
  *		_isprint_l (MSVCRT.@)
  */
-int CDECL MSVCRT__isprint_l(int c, MSVCRT__locale_t locale)
+int CDECL MSVCRT__isprint_l(int c, _locale_t locale)
 {
   return MSVCRT__isctype_l( c, MSVCRT__ALPHA | MSVCRT__DIGIT | MSVCRT__BLANK | MSVCRT__PUNCT, locale );
 }
@@ -322,7 +322,7 @@ int CDECL MSVCRT_ispunct(int c)
 /*********************************************************************
  *		_ispunct_l (MSVCR80.@)
  */
-int CDECL MSVCRT__ispunct_l(int c, MSVCRT__locale_t locale)
+int CDECL MSVCRT__ispunct_l(int c, _locale_t locale)
 {
   return MSVCRT__isctype_l( c, MSVCRT__PUNCT, locale );
 }
@@ -330,7 +330,7 @@ int CDECL MSVCRT__ispunct_l(int c, MSVCRT__locale_t locale)
 /*********************************************************************
  *		_isspace_l (MSVCRT.@)
  */
-int CDECL MSVCRT__isspace_l(int c, MSVCRT__locale_t locale)
+int CDECL MSVCRT__isspace_l(int c, _locale_t locale)
 {
   return MSVCRT__isctype_l( c, MSVCRT__SPACE, locale );
 }
@@ -346,7 +346,7 @@ int CDECL MSVCRT_isspace(int c)
 /*********************************************************************
  *		_isupper_l (MSVCRT.@)
  */
-int CDECL MSVCRT__isupper_l(int c, MSVCRT__locale_t locale)
+int CDECL MSVCRT__isupper_l(int c, _locale_t locale)
 {
   return MSVCRT__isctype_l( c, MSVCRT__UPPER, locale );
 }
@@ -362,7 +362,7 @@ int CDECL MSVCRT_isupper(int c)
 /*********************************************************************
  *		_isxdigit_l (MSVCRT.@)
  */
-int CDECL MSVCRT__isxdigit_l(int c, MSVCRT__locale_t locale)
+int CDECL MSVCRT__isxdigit_l(int c, _locale_t locale)
 {
   return MSVCRT__isctype_l( c, MSVCRT__HEX, locale );
 }
@@ -378,7 +378,7 @@ int CDECL MSVCRT_isxdigit(int c)
 /*********************************************************************
  *		_isblank_l (MSVCRT.@)
  */
-int CDECL MSVCRT__isblank_l(int c, MSVCRT__locale_t locale)
+int CDECL MSVCRT__isblank_l(int c, _locale_t locale)
 {
   return c == '\t' || MSVCRT__isctype_l( c, MSVCRT__BLANK, locale );
 }
@@ -435,7 +435,7 @@ int CDECL MSVCRT___iscsymf(int c)
 /*********************************************************************
  *		_toupper_l (MSVCRT.@)
  */
-int CDECL MSVCRT__toupper_l(int c, MSVCRT__locale_t locale)
+int CDECL MSVCRT__toupper_l(int c, _locale_t locale)
 {
     pthreadlocinfo locinfo;
     unsigned char str[2], *p = str, ret[2];
@@ -489,7 +489,7 @@ int CDECL MSVCRT__toupper(int c)
 /*********************************************************************
  *              _tolower_l (MSVCRT.@)
  */
-int CDECL MSVCRT__tolower_l(int c, MSVCRT__locale_t locale)
+int CDECL MSVCRT__tolower_l(int c, _locale_t locale)
 {
     pthreadlocinfo locinfo;
     unsigned char str[2], *p = str, ret[2];
diff --git a/dlls/msvcrt/file.c b/dlls/msvcrt/file.c
index c913f86df89..a49461e3318 100644
--- a/dlls/msvcrt/file.c
+++ b/dlls/msvcrt/file.c
@@ -5157,7 +5157,7 @@ static int puts_clbk_file_w(void *file, int len, const MSVCRT_wchar_t *str)
 }
 
 static int vfprintf_helper(DWORD options, MSVCRT_FILE* file, const char *format,
-        MSVCRT__locale_t locale, __ms_va_list valist)
+        _locale_t locale, __ms_va_list valist)
 {
     printf_arg args_ctx[MSVCRT__ARGMAX+1];
     BOOL tmp_buf;
@@ -5189,7 +5189,7 @@ static int vfprintf_helper(DWORD options, MSVCRT_FILE* file, const char *format,
 }
 
 static int vfwprintf_helper(DWORD options, MSVCRT_FILE* file, const MSVCRT_wchar_t *format,
-        MSVCRT__locale_t locale, __ms_va_list valist)
+        _locale_t locale, __ms_va_list valist)
 {
     printf_arg args_ctx[MSVCRT__ARGMAX+1];
     BOOL tmp_buf;
@@ -5224,7 +5224,7 @@ static int vfwprintf_helper(DWORD options, MSVCRT_FILE* file, const MSVCRT_wchar
  *    _vfprintf_s_l (MSVCRT.@)
  */
 int CDECL MSVCRT__vfprintf_s_l(MSVCRT_FILE* file, const char *format,
-        MSVCRT__locale_t locale, __ms_va_list valist)
+        _locale_t locale, __ms_va_list valist)
 {
     return vfprintf_helper(MSVCRT_PRINTF_INVOKE_INVALID_PARAM_HANDLER, file, format, locale, valist);
 }
@@ -5233,7 +5233,7 @@ int CDECL MSVCRT__vfprintf_s_l(MSVCRT_FILE* file, const char *format,
  *    _vfwprintf_s_l (MSVCRT.@)
  */
 int CDECL MSVCRT__vfwprintf_s_l(MSVCRT_FILE* file, const MSVCRT_wchar_t *format,
-        MSVCRT__locale_t locale, __ms_va_list valist)
+        _locale_t locale, __ms_va_list valist)
 {
     return vfwprintf_helper(MSVCRT_PRINTF_INVOKE_INVALID_PARAM_HANDLER, file, format, locale, valist);
 }
@@ -5276,7 +5276,7 @@ int CDECL MSVCRT_vfwprintf_s(MSVCRT_FILE* file, const MSVCRT_wchar_t *format, __
  *              __stdio_common_vfprintf (UCRTBASE.@)
  */
 int CDECL MSVCRT__stdio_common_vfprintf(unsigned __int64 options, MSVCRT_FILE *file, const char *format,
-                                        MSVCRT__locale_t locale, __ms_va_list valist)
+                                        _locale_t locale, __ms_va_list valist)
 {
     if (options & ~UCRTBASE_PRINTF_MASK)
         FIXME("options %s not handled\n", wine_dbgstr_longlong(options));
@@ -5288,7 +5288,7 @@ int CDECL MSVCRT__stdio_common_vfprintf(unsigned __int64 options, MSVCRT_FILE *f
  *              __stdio_common_vfprintf_s (UCRTBASE.@)
  */
 int CDECL MSVCRT__stdio_common_vfprintf_s(unsigned __int64 options, MSVCRT_FILE *file, const char *format,
-                                          MSVCRT__locale_t locale, __ms_va_list valist)
+                                          _locale_t locale, __ms_va_list valist)
 {
     if (options & ~UCRTBASE_PRINTF_MASK)
         FIXME("options %s not handled\n", wine_dbgstr_longlong(options));
@@ -5301,7 +5301,7 @@ int CDECL MSVCRT__stdio_common_vfprintf_s(unsigned __int64 options, MSVCRT_FILE
  *              __stdio_common_vfwprintf (UCRTBASE.@)
  */
 int CDECL MSVCRT__stdio_common_vfwprintf(unsigned __int64 options, MSVCRT_FILE *file, const MSVCRT_wchar_t *format,
-                                         MSVCRT__locale_t locale, __ms_va_list valist)
+                                         _locale_t locale, __ms_va_list valist)
 {
     if (options & ~UCRTBASE_PRINTF_MASK)
         FIXME("options %s not handled\n", wine_dbgstr_longlong(options));
@@ -5313,7 +5313,7 @@ int CDECL MSVCRT__stdio_common_vfwprintf(unsigned __int64 options, MSVCRT_FILE *
  *              __stdio_common_vfwprintf_s (UCRTBASE.@)
  */
 int CDECL MSVCRT__stdio_common_vfwprintf_s(unsigned __int64 options, MSVCRT_FILE *file, const MSVCRT_wchar_t *format,
-                                           MSVCRT__locale_t locale, __ms_va_list valist)
+                                           _locale_t locale, __ms_va_list valist)
 {
     if (options & ~UCRTBASE_PRINTF_MASK)
         FIXME("options %s not handled\n", wine_dbgstr_longlong(options));
@@ -5328,7 +5328,7 @@ int CDECL MSVCRT__stdio_common_vfwprintf_s(unsigned __int64 options, MSVCRT_FILE
  *    _vfprintf_l (MSVCRT.@)
  */
 int CDECL MSVCRT__vfprintf_l(MSVCRT_FILE* file, const char *format,
-        MSVCRT__locale_t locale, __ms_va_list valist)
+        _locale_t locale, __ms_va_list valist)
 {
     return vfprintf_helper(0, file, format, locale, valist);
 }
@@ -5337,7 +5337,7 @@ int CDECL MSVCRT__vfprintf_l(MSVCRT_FILE* file, const char *format,
  *              _vfwprintf_l (MSVCRT.@)
  */
 int CDECL MSVCRT__vfwprintf_l(MSVCRT_FILE* file, const MSVCRT_wchar_t *format,
-        MSVCRT__locale_t locale, __ms_va_list valist)
+        _locale_t locale, __ms_va_list valist)
 {
     return vfwprintf_helper(0, file, format, locale, valist);
 }
@@ -5346,7 +5346,7 @@ int CDECL MSVCRT__vfwprintf_l(MSVCRT_FILE* file, const MSVCRT_wchar_t *format,
  *    _vfprintf_p_l (MSVCRT.@)
  */
 int CDECL MSVCRT__vfprintf_p_l(MSVCRT_FILE* file, const char *format,
-        MSVCRT__locale_t locale, __ms_va_list valist)
+        _locale_t locale, __ms_va_list valist)
 {
     return vfprintf_helper(MSVCRT_PRINTF_POSITIONAL_PARAMS | MSVCRT_PRINTF_INVOKE_INVALID_PARAM_HANDLER,
             file, format, locale, valist);
@@ -5364,7 +5364,7 @@ int CDECL MSVCRT__vfprintf_p(MSVCRT_FILE* file, const char *format, __ms_va_list
  *    _vfwprintf_p_l (MSVCRT.@)
  */
 int CDECL MSVCRT__vfwprintf_p_l(MSVCRT_FILE* file, const MSVCRT_wchar_t *format,
-        MSVCRT__locale_t locale, __ms_va_list valist)
+        _locale_t locale, __ms_va_list valist)
 {
     return vfwprintf_helper(MSVCRT_PRINTF_POSITIONAL_PARAMS | MSVCRT_PRINTF_INVOKE_INVALID_PARAM_HANDLER,
             file, format, locale, valist);
@@ -5465,7 +5465,7 @@ int WINAPIV MSVCRT_fwprintf_s(MSVCRT_FILE* file, const MSVCRT_wchar_t *format, .
 /*********************************************************************
  *              _fwprintf_l (MSVCRT.@)
  */
-int WINAPIV MSVCRT__fwprintf_l(MSVCRT_FILE* file, const MSVCRT_wchar_t *format, MSVCRT__locale_t locale, ...)
+int WINAPIV MSVCRT__fwprintf_l(MSVCRT_FILE* file, const MSVCRT_wchar_t *format, _locale_t locale, ...)
 {
     __ms_va_list valist;
     int res;
diff --git a/dlls/msvcrt/locale.c b/dlls/msvcrt/locale.c
index 86d4a2dbe8f..56753e3b7cc 100644
--- a/dlls/msvcrt/locale.c
+++ b/dlls/msvcrt/locale.c
@@ -40,7 +40,7 @@ WINE_DEFAULT_DEBUG_CHANNEL(msvcrt);
 
 #define MAX_ELEM_LEN 64 /* Max length of country/language/CP string */
 #define MAX_LOCALE_LENGTH 256
-MSVCRT__locale_t MSVCRT_locale = NULL;
+_locale_t MSVCRT_locale = NULL;
 unsigned short *MSVCRT__pctype = NULL;
 unsigned int MSVCRT___lc_codepage = 0;
 int MSVCRT___lc_collate_cp = 0;
@@ -1151,7 +1151,7 @@ void free_mbcinfo(pthreadmbcinfo mbcinfo)
     MSVCRT_free(mbcinfo);
 }
 
-MSVCRT__locale_t CDECL get_current_locale_noalloc(MSVCRT__locale_t locale)
+_locale_t CDECL get_current_locale_noalloc(_locale_t locale)
 {
     thread_data_t *data = msvcrt_get_thread_data();
 
@@ -1164,7 +1164,7 @@ MSVCRT__locale_t CDECL get_current_locale_noalloc(MSVCRT__locale_t locale)
     return locale;
 }
 
-void CDECL free_locale_noalloc(MSVCRT__locale_t locale)
+void CDECL free_locale_noalloc(_locale_t locale)
 {
     free_locinfo(locale->locinfo);
     free_mbcinfo(locale->mbcinfo);
@@ -1173,9 +1173,9 @@ void CDECL free_locale_noalloc(MSVCRT__locale_t locale)
 /*********************************************************************
  *      _get_current_locale (MSVCRT.@)
  */
-MSVCRT__locale_t CDECL MSVCRT__get_current_locale(void)
+_locale_t CDECL MSVCRT__get_current_locale(void)
 {
-    MSVCRT__locale_t loc = MSVCRT_malloc(sizeof(MSVCRT__locale_tstruct));
+    _locale_t loc = MSVCRT_malloc(sizeof(_locale_tstruct));
     if(!loc)
         return NULL;
 
@@ -1185,7 +1185,7 @@ MSVCRT__locale_t CDECL MSVCRT__get_current_locale(void)
 /*********************************************************************
  *      _free_locale (MSVCRT.@)
  */
-void CDECL MSVCRT__free_locale(MSVCRT__locale_t locale)
+void CDECL MSVCRT__free_locale(_locale_t locale)
 {
     if (!locale)
         return;
@@ -1948,11 +1948,11 @@ static pthreadlocinfo create_locinfo(int category,
 /*********************************************************************
  *      _create_locale (MSVCRT.@)
  */
-MSVCRT__locale_t CDECL MSVCRT__create_locale(int category, const char *locale)
+_locale_t CDECL MSVCRT__create_locale(int category, const char *locale)
 {
-    MSVCRT__locale_t loc;
+    _locale_t loc;
 
-    loc = MSVCRT_malloc(sizeof(MSVCRT__locale_tstruct));
+    loc = MSVCRT_malloc(sizeof(_locale_tstruct));
     if(!loc)
         return NULL;
 
@@ -1976,9 +1976,9 @@ MSVCRT__locale_t CDECL MSVCRT__create_locale(int category, const char *locale)
 /*********************************************************************
  *      _wcreate_locale (MSVCR110.@)
  */
-MSVCRT__locale_t CDECL MSVCRT__wcreate_locale(int category, const MSVCRT_wchar_t *locale)
+_locale_t CDECL MSVCRT__wcreate_locale(int category, const MSVCRT_wchar_t *locale)
 {
-    MSVCRT__locale_t loc;
+    _locale_t loc;
     MSVCRT_size_t len;
     char *str;
 
@@ -2082,7 +2082,7 @@ MSVCRT_wchar_t* CDECL MSVCRT__wsetlocale(int category, const MSVCRT_wchar_t* wlo
 int CDECL _configthreadlocale(int type)
 {
     thread_data_t *data = msvcrt_get_thread_data();
-    MSVCRT__locale_t locale;
+    _locale_t locale;
     int ret;
 
     if(!data)
diff --git a/dlls/msvcrt/mbcs.c b/dlls/msvcrt/mbcs.c
index 101d47dab6e..6867f381c24 100644
--- a/dlls/msvcrt/mbcs.c
+++ b/dlls/msvcrt/mbcs.c
@@ -86,7 +86,7 @@ static const unsigned char mbctombb_932_kana[] = {
   0xd2,0xd3,0xac,0xd4,0xad,0xd5,0xae,0xd6,0xd7,0xd8,0xd9,0xda,0xdb,0xdc,0xdc,0xb2,
   0xb4,0xa6,0xdd,0xb3,0xb6,0xb9};
 
-static MSVCRT_wchar_t msvcrt_mbc_to_wc_l(unsigned int ch, MSVCRT__locale_t locale)
+static MSVCRT_wchar_t msvcrt_mbc_to_wc_l(unsigned int ch, _locale_t locale)
 {
     pthreadmbcinfo mbcinfo;
     MSVCRT_wchar_t chW;
@@ -197,7 +197,7 @@ int CDECL MSVCRT____mb_cur_max_func(void)
 /*********************************************************************
  *		___mb_cur_max_l_func  (MSVCR80.@)
  */
-int CDECL ___mb_cur_max_l_func(MSVCRT__locale_t locale)
+int CDECL ___mb_cur_max_l_func(_locale_t locale)
 {
   pthreadlocinfo locinfo;
 
@@ -422,7 +422,7 @@ int CDECL _getmbcp(void)
 /*********************************************************************
  *		_mbsnextc_l(MSVCRT.@)
  */
-unsigned int CDECL _mbsnextc_l(const unsigned char* str, MSVCRT__locale_t locale)
+unsigned int CDECL _mbsnextc_l(const unsigned char* str, _locale_t locale)
 {
   if(_ismbblead_l(*str, locale))
     return *str << 8 | str[1];
@@ -617,7 +617,7 @@ unsigned char* CDECL _mbsninc(const unsigned char* str, MSVCRT_size_t num)
  *              _mbsnlen_l(MSVCRT.@)
  */
 MSVCRT_size_t CDECL _mbsnlen_l(const unsigned char *str,
-        MSVCRT_size_t maxsize, MSVCRT__locale_t locale)
+        MSVCRT_size_t maxsize, _locale_t locale)
 {
     pthreadmbcinfo mbcinfo;
     MSVCRT_size_t i = 0, len = 0;
@@ -655,7 +655,7 @@ MSVCRT_size_t CDECL _mbslen(const unsigned char* str)
 /*********************************************************************
  *              _mbslen_l(MSVCRT.@)
  */
-MSVCRT_size_t CDECL _mbslen_l(const unsigned char* str, MSVCRT__locale_t locale)
+MSVCRT_size_t CDECL _mbslen_l(const unsigned char* str, _locale_t locale)
 {
     return _mbsnlen_l(str, -1, locale);
 }
@@ -672,7 +672,7 @@ MSVCRT_size_t CDECL _mbsnlen(const unsigned char* str, MSVCRT_size_t maxsize)
  *              _mbccpy_s_l(MSVCRT.@)
  */
 int CDECL _mbccpy_s_l(unsigned char* dest, MSVCRT_size_t maxsize,
-        int *copied, const unsigned char* src, MSVCRT__locale_t locale)
+        int *copied, const unsigned char* src, _locale_t locale)
 {
     if(copied) *copied = 0;
     if(!MSVCRT_CHECK_PMT(dest != NULL && maxsize >= 1)) return MSVCRT_EINVAL;
@@ -714,7 +714,7 @@ void CDECL _mbccpy(unsigned char* dest, const unsigned char* src)
  *              _mbccpy_l(MSVCRT.@)
  */
 void CDECL _mbccpy_l(unsigned char* dest, const unsigned char* src,
-        MSVCRT__locale_t locale)
+        _locale_t locale)
 {
     _mbccpy_s_l(dest, 2, NULL, src, locale);
 }
@@ -778,7 +778,7 @@ unsigned char* CDECL _mbsncpy(unsigned char* dst, const unsigned char* src, MSVC
  * string with 0
  */
 int CDECL _mbsnbcpy_s_l(unsigned char* dst, MSVCRT_size_t size,
-        const unsigned char* src, MSVCRT_size_t n, MSVCRT__locale_t locale)
+        const unsigned char* src, MSVCRT_size_t n, _locale_t locale)
 {
     MSVCRT_size_t pos = 0;
 
@@ -849,7 +849,7 @@ int CDECL _mbsnbcpy_s(unsigned char* dst, MSVCRT_size_t size, const unsigned cha
  *              _mbscpy_s_l(MSVCRT.@)
  */
 int CDECL _mbscpy_s_l(unsigned char *dst, MSVCRT_size_t size,
-        const unsigned char *src, MSVCRT__locale_t locale)
+        const unsigned char *src, _locale_t locale)
 {
     return _mbsnbcpy_s_l(dst, size, src, -1, locale);
 }
@@ -901,7 +901,7 @@ unsigned char* CDECL _mbsnbcpy(unsigned char* dst, const unsigned char* src, MSV
 /*********************************************************************
  *		_mbscmp_l(MSVCRT.@)
  */
-int CDECL _mbscmp_l(const unsigned char* str, const unsigned char* cmp, MSVCRT__locale_t locale)
+int CDECL _mbscmp_l(const unsigned char* str, const unsigned char* cmp, _locale_t locale)
 {
   pthreadmbcinfo mbcinfo;
 
@@ -931,7 +931,7 @@ int CDECL _mbscmp_l(const unsigned char* str, const unsigned char* cmp, MSVCRT__
 /*********************************************************************
  *		_mbscmp(MSVCRT.@)
  */
-int CDECL _mbscmp(const unsigned char* str, const unsigned char* cmp, MSVCRT__locale_t locale)
+int CDECL _mbscmp(const unsigned char* str, const unsigned char* cmp, _locale_t locale)
 {
     return _mbscmp_l(str, cmp, NULL);
 }
@@ -939,7 +939,7 @@ int CDECL _mbscmp(const unsigned char* str, const unsigned char* cmp, MSVCRT__lo
 /*********************************************************************
  *              _mbsnbicoll_l(MSVCRT.@)
  */
-int CDECL _mbsnbicoll_l(const unsigned char *str1, const unsigned char *str2, MSVCRT_size_t len, MSVCRT__locale_t locale)
+int CDECL _mbsnbicoll_l(const unsigned char *str1, const unsigned char *str2, MSVCRT_size_t len, _locale_t locale)
 {
     pthreadmbcinfo mbcinfo;
 
@@ -956,7 +956,7 @@ int CDECL _mbsnbicoll_l(const unsigned char *str1, const unsigned char *str2, MS
 /*********************************************************************
  *              _mbsicoll_l(MSVCRT.@)
  */
-int CDECL _mbsicoll_l(const unsigned char *str1, const unsigned char *str2, MSVCRT__locale_t locale)
+int CDECL _mbsicoll_l(const unsigned char *str1, const unsigned char *str2, _locale_t locale)
 {
     return _mbsnbicoll_l(str1, str2, -1, locale);
 }
@@ -985,7 +985,7 @@ int CDECL _mbsicoll(const unsigned char* str, const unsigned char* cmp)
 /*********************************************************************
  *              _mbsnbcoll_l(MSVCRT.@)
  */
-int CDECL _mbsnbcoll_l(const unsigned char *str1, const unsigned char *str2, MSVCRT_size_t len, MSVCRT__locale_t locale)
+int CDECL _mbsnbcoll_l(const unsigned char *str1, const unsigned char *str2, MSVCRT_size_t len, _locale_t locale)
 {
     pthreadmbcinfo mbcinfo;
 
@@ -1002,7 +1002,7 @@ int CDECL _mbsnbcoll_l(const unsigned char *str1, const unsigned char *str2, MSV
 /*********************************************************************
  *              _mbscoll_l(MSVCRT.@)
  */
-int CDECL _mbscoll_l(const unsigned char *str1, const unsigned char *str2, MSVCRT__locale_t locale)
+int CDECL _mbscoll_l(const unsigned char *str1, const unsigned char *str2, _locale_t locale)
 {
     return _mbsnbcoll_l(str1, str2, -1, locale);
 }
@@ -1211,7 +1211,7 @@ unsigned char * CDECL _mbscat( unsigned char *dst, const unsigned char *src )
  *		_mbscat_s_l (MSVCRT.@)
  */
 int CDECL _mbscat_s_l( unsigned char *dst, MSVCRT_size_t size,
-        const unsigned char *src, MSVCRT__locale_t locale )
+        const unsigned char *src, _locale_t locale )
 {
     MSVCRT_size_t i, j;
     int ret = 0;
@@ -1324,7 +1324,7 @@ unsigned char* CDECL _mbsrchr(const unsigned char* s, unsigned int x)
  *              _mbstok_s_l(MSVCRT.@)
  */
 unsigned char* CDECL _mbstok_s_l(unsigned char *str, const unsigned char *delim,
-        unsigned char **ctx, MSVCRT__locale_t locale)
+        unsigned char **ctx, _locale_t locale)
 {
     pthreadmbcinfo mbcinfo;
     unsigned int c;
@@ -1378,7 +1378,7 @@ unsigned char* CDECL _mbstok_s(unsigned char *str,
  *              _mbstok_l(MSVCRT.@)
  */
 unsigned char* CDECL _mbstok_l(unsigned char *str,
-        const unsigned char *delim, MSVCRT__locale_t locale)
+        const unsigned char *delim, _locale_t locale)
 {
     return _mbstok_s_l(str, delim, &msvcrt_get_thread_data()->mbstok_next, locale);
 }
@@ -1424,7 +1424,7 @@ unsigned int CDECL _mbbtombc(unsigned int c)
 /*********************************************************************
  *		_ismbbkana_l(MSVCRT.@)
  */
-int CDECL _ismbbkana_l(unsigned int c, MSVCRT__locale_t locale)
+int CDECL _ismbbkana_l(unsigned int c, _locale_t locale)
 {
     pthreadmbcinfo mbcinfo;
 
@@ -1452,7 +1452,7 @@ int CDECL _ismbbkana(unsigned int c)
 /*********************************************************************
  *              _ismbcdigit_l(MSVCRT.@)
  */
-int CDECL _ismbcdigit_l(unsigned int ch, MSVCRT__locale_t locale)
+int CDECL _ismbcdigit_l(unsigned int ch, _locale_t locale)
 {
     return MSVCRT__iswdigit_l( msvcrt_mbc_to_wc_l(ch, locale), locale );
 }
@@ -1468,7 +1468,7 @@ int CDECL _ismbcdigit(unsigned int ch)
 /*********************************************************************
  *              _ismbcgraph_l(MSVCRT.@)
  */
-int CDECL _ismbcgraph_l(unsigned int ch, MSVCRT__locale_t locale)
+int CDECL _ismbcgraph_l(unsigned int ch, _locale_t locale)
 {
     return MSVCRT__iswgraph_l( msvcrt_mbc_to_wc_l(ch, locale), locale );
 }
@@ -1484,7 +1484,7 @@ int CDECL _ismbcgraph(unsigned int ch)
 /*********************************************************************
  *              _ismbcalpha_l (MSVCRT.@)
  */
-int CDECL _ismbcalpha_l(unsigned int ch, MSVCRT__locale_t locale)
+int CDECL _ismbcalpha_l(unsigned int ch, _locale_t locale)
 {
     return MSVCRT__iswalpha_l( msvcrt_mbc_to_wc_l(ch, locale), locale );
 }
@@ -1500,7 +1500,7 @@ int CDECL _ismbcalpha(unsigned int ch)
 /*********************************************************************
  *              _ismbclower_l (MSVCRT.@)
  */
-int CDECL _ismbclower_l(unsigned int ch, MSVCRT__locale_t locale)
+int CDECL _ismbclower_l(unsigned int ch, _locale_t locale)
 {
     return MSVCRT__iswlower_l( msvcrt_mbc_to_wc_l(ch, locale), locale );
 }
@@ -1516,7 +1516,7 @@ int CDECL _ismbclower(unsigned int ch)
 /*********************************************************************
  *              _ismbcupper_l (MSVCRT.@)
  */
-int CDECL _ismbcupper_l(unsigned int ch, MSVCRT__locale_t locale)
+int CDECL _ismbcupper_l(unsigned int ch, _locale_t locale)
 {
     return MSVCRT__iswupper_l( msvcrt_mbc_to_wc_l(ch, locale), locale );
 }
@@ -1547,7 +1547,7 @@ int CDECL _ismbcsymbol(unsigned int ch)
 /*********************************************************************
  *              _ismbcalnum_l (MSVCRT.@)
  */
-int CDECL _ismbcalnum_l(unsigned int ch, MSVCRT__locale_t locale)
+int CDECL _ismbcalnum_l(unsigned int ch, _locale_t locale)
 {
     return MSVCRT__iswalnum_l( msvcrt_mbc_to_wc_l(ch, locale), locale );
 }
@@ -1563,7 +1563,7 @@ int CDECL _ismbcalnum(unsigned int ch)
 /*********************************************************************
  *              _ismbcspace_l (MSVCRT.@)
  */
-int CDECL _ismbcspace_l(unsigned int ch, MSVCRT__locale_t locale)
+int CDECL _ismbcspace_l(unsigned int ch, _locale_t locale)
 {
     return MSVCRT__iswspace_l( msvcrt_mbc_to_wc_l(ch, locale), locale );
 }
@@ -1579,7 +1579,7 @@ int CDECL _ismbcspace(unsigned int ch)
 /*********************************************************************
  *              _ismbcprint_l (MSVCRT.@)
  */
-int CDECL _ismbcprint_l(unsigned int ch, MSVCRT__locale_t locale)
+int CDECL _ismbcprint_l(unsigned int ch, _locale_t locale)
 {
     return MSVCRT__iswprint_l( msvcrt_mbc_to_wc_l(ch, locale), locale );
 }
@@ -1595,7 +1595,7 @@ int CDECL _ismbcprint(unsigned int ch)
 /*********************************************************************
  *              _ismbcpunct_l (MSVCRT.@)
  */
-int CDECL _ismbcpunct_l(unsigned int ch, MSVCRT__locale_t locale)
+int CDECL _ismbcpunct_l(unsigned int ch, _locale_t locale)
 {
     return MSVCRT__iswpunct_l( msvcrt_mbc_to_wc_l(ch, locale), locale );
 }
@@ -1638,7 +1638,7 @@ int CDECL _ismbckata(unsigned int c)
 /*********************************************************************
  *		_ismbblead_l(MSVCRT.@)
  */
-int CDECL _ismbblead_l(unsigned int c, MSVCRT__locale_t locale)
+int CDECL _ismbblead_l(unsigned int c, _locale_t locale)
 {
     pthreadmbcinfo mbcinfo;
 
@@ -1661,7 +1661,7 @@ int CDECL _ismbblead(unsigned int c)
 /*********************************************************************
  *              _ismbbtrail_l(MSVCRT.@)
  */
-int CDECL _ismbbtrail_l(unsigned int c, MSVCRT__locale_t locale)
+int CDECL _ismbbtrail_l(unsigned int c, _locale_t locale)
 {
     pthreadmbcinfo mbcinfo;
 
@@ -1684,7 +1684,7 @@ int CDECL _ismbbtrail(unsigned int c)
 /*********************************************************************
  *              _ismbclegal_l(MSVCRT.@)
  */
-int CDECL _ismbclegal_l(unsigned int c, MSVCRT__locale_t locale)
+int CDECL _ismbclegal_l(unsigned int c, _locale_t locale)
 {
     return _ismbblead_l(HIBYTE(c), locale) && _ismbbtrail_l(LOBYTE(c), locale);
 }
@@ -1735,7 +1735,7 @@ int CDECL _ismbstrail(const unsigned char* start, const unsigned char* str)
 /*********************************************************************
  *		_mbbtype_l(MSVCRT.@)
  */
-int CDECL _mbbtype_l(unsigned char c, int type, MSVCRT__locale_t locale)
+int CDECL _mbbtype_l(unsigned char c, int type, _locale_t locale)
 {
     if (type == 1)
         return _ismbbtrail_l(c, locale) ? _MBC_TRAIL : _MBC_ILLEGAL;
@@ -2152,7 +2152,7 @@ int CDECL _mbsupr_s(unsigned char* s, MSVCRT_size_t len)
  *              _mbsspn_l (MSVCRT.@)
  */
 MSVCRT_size_t CDECL _mbsspn_l(const unsigned char* string,
-        const unsigned char* set, MSVCRT__locale_t locale)
+        const unsigned char* set, _locale_t locale)
 {
     const unsigned char *p, *q;
 
@@ -2203,7 +2203,7 @@ unsigned char* CDECL _mbsspnp(const unsigned char* string, const unsigned char*
  *		_mbscspn_l (MSVCRT.@)
  */
 MSVCRT_size_t CDECL _mbscspn_l(const unsigned char* str,
-        const unsigned char* cmp, MSVCRT__locale_t locale)
+        const unsigned char* cmp, _locale_t locale)
 {
     const unsigned char *p, *q;
 
@@ -2360,7 +2360,7 @@ MSVCRT_size_t CDECL MSVCRT_mbrlen(const char *str, MSVCRT_size_t len, MSVCRT_mbs
 /*********************************************************************
  *		_mbstrlen_l(MSVCRT.@)
  */
-MSVCRT_size_t CDECL _mbstrlen_l(const char* str, MSVCRT__locale_t locale)
+MSVCRT_size_t CDECL _mbstrlen_l(const char* str, _locale_t locale)
 {
     pthreadlocinfo locinfo;
 
@@ -2394,7 +2394,7 @@ MSVCRT_size_t CDECL _mbstrlen(const char* str)
 /*********************************************************************
  *		_mbtowc_l(MSVCRT.@)
  */
-int CDECL MSVCRT_mbtowc_l(MSVCRT_wchar_t *dst, const char* str, MSVCRT_size_t n, MSVCRT__locale_t locale)
+int CDECL MSVCRT_mbtowc_l(MSVCRT_wchar_t *dst, const char* str, MSVCRT_size_t n, _locale_t locale)
 {
     pthreadlocinfo locinfo;
     MSVCRT_wchar_t tmpdst = '\0';
@@ -2506,7 +2506,7 @@ MSVCRT_size_t CDECL MSVCRT_mbrtowc(MSVCRT_wchar_t *dst, const char *str,
  *		_mbstowcs_l(MSVCRT.@)
  */
 MSVCRT_size_t CDECL MSVCRT__mbstowcs_l(MSVCRT_wchar_t *wcstr, const char *mbstr,
-        MSVCRT_size_t count, MSVCRT__locale_t locale)
+        MSVCRT_size_t count, _locale_t locale)
 {
     pthreadlocinfo locinfo;
     MSVCRT_size_t i, size;
@@ -2580,7 +2580,7 @@ MSVCRT_size_t CDECL MSVCRT_mbstowcs(MSVCRT_wchar_t *wcstr,
  */
 int CDECL MSVCRT__mbstowcs_s_l(MSVCRT_size_t *ret, MSVCRT_wchar_t *wcstr,
         MSVCRT_size_t size, const char *mbstr,
-        MSVCRT_size_t count, MSVCRT__locale_t locale)
+        MSVCRT_size_t count, _locale_t locale)
 {
     MSVCRT_size_t conv;
     int err = 0;
@@ -2721,7 +2721,7 @@ unsigned int CDECL _mbctokata(unsigned int c)
 /*********************************************************************
  *		_ismbcl0_l (MSVCRT.@)
  */
-int CDECL _ismbcl0_l(unsigned int c, MSVCRT__locale_t locale)
+int CDECL _ismbcl0_l(unsigned int c, _locale_t locale)
 {
     pthreadmbcinfo mbcinfo;
 
@@ -2750,7 +2750,7 @@ int CDECL _ismbcl0(unsigned int c)
 /*********************************************************************
  *		_ismbcl1_l (MSVCRT.@)
  */
-int CDECL _ismbcl1_l(unsigned int c, MSVCRT__locale_t locale)
+int CDECL _ismbcl1_l(unsigned int c, _locale_t locale)
 {
     pthreadmbcinfo mbcinfo;
 
@@ -2779,7 +2779,7 @@ int CDECL _ismbcl1(unsigned int c)
 /*********************************************************************
  *		_ismbcl2_l (MSVCRT.@)
  */
-int CDECL _ismbcl2_l(unsigned int c, MSVCRT__locale_t locale)
+int CDECL _ismbcl2_l(unsigned int c, _locale_t locale)
 {
     pthreadmbcinfo mbcinfo;
 
diff --git a/dlls/msvcrt/msvcrt.h b/dlls/msvcrt/msvcrt.h
index 5ecffc7f8ab..c8dddd54cd5 100644
--- a/dlls/msvcrt/msvcrt.h
+++ b/dlls/msvcrt/msvcrt.h
@@ -131,12 +131,6 @@ typedef struct threadmbcinfostruct {
     unsigned char mbcasemap[256];
 } threadmbcinfo;
 
-typedef struct MSVCRT_localeinfo_struct
-{
-    pthreadlocinfo locinfo;
-    pthreadmbcinfo mbcinfo;
-} MSVCRT__locale_tstruct, *MSVCRT__locale_t;
-
 typedef struct MSVCRT__onexit_table_t
 {
     MSVCRT__onexit_t *_first;
@@ -221,7 +215,7 @@ typedef struct __thread_data thread_data_t;
 extern thread_data_t *CDECL msvcrt_get_thread_data(void) DECLSPEC_HIDDEN;
 
 LCID MSVCRT_locale_to_LCID(const char*, unsigned short*, BOOL*) DECLSPEC_HIDDEN;
-extern MSVCRT__locale_t MSVCRT_locale DECLSPEC_HIDDEN;
+extern _locale_t MSVCRT_locale DECLSPEC_HIDDEN;
 extern __lc_time_data cloc_time_data DECLSPEC_HIDDEN;
 extern unsigned int MSVCRT___lc_codepage;
 extern int MSVCRT___lc_collate_cp;
@@ -879,9 +873,9 @@ int __cdecl      MSVCRT_iswalpha(MSVCRT_wint_t);
 int __cdecl      MSVCRT_iswspace(MSVCRT_wint_t);
 int __cdecl      MSVCRT_iswdigit(MSVCRT_wint_t);
 int __cdecl      MSVCRT_isleadbyte(int);
-int __cdecl      MSVCRT__isleadbyte_l(int, MSVCRT__locale_t);
-int __cdecl      MSVCRT__isspace_l(int, MSVCRT__locale_t);
-int __cdecl      MSVCRT__iswspace_l(MSVCRT_wchar_t, MSVCRT__locale_t);
+int __cdecl      MSVCRT__isleadbyte_l(int, _locale_t);
+int __cdecl      MSVCRT__isspace_l(int, _locale_t);
+int __cdecl      MSVCRT__iswspace_l(MSVCRT_wchar_t, _locale_t);
 
 void __cdecl     MSVCRT__lock_file(MSVCRT_FILE*);
 void __cdecl     MSVCRT__unlock_file(MSVCRT_FILE*);
@@ -928,13 +922,12 @@ int            __cdecl MSVCRT__set_printf_count_output(int);
 #define MSVCRT__ENABLE_PER_THREAD_LOCALE 1
 #define MSVCRT__DISABLE_PER_THREAD_LOCALE 2
 
-extern MSVCRT__locale_t MSVCRT_locale;
-MSVCRT__locale_t CDECL get_current_locale_noalloc(MSVCRT__locale_t locale) DECLSPEC_HIDDEN;
-void CDECL free_locale_noalloc(MSVCRT__locale_t locale) DECLSPEC_HIDDEN;
+_locale_t CDECL get_current_locale_noalloc(_locale_t locale) DECLSPEC_HIDDEN;
+void CDECL free_locale_noalloc(_locale_t locale) DECLSPEC_HIDDEN;
 pthreadlocinfo CDECL get_locinfo(void) DECLSPEC_HIDDEN;
 pthreadmbcinfo CDECL get_mbcinfo(void) DECLSPEC_HIDDEN;
 pthreadmbcinfo* CDECL get_mbcinfo_ptr(void) DECLSPEC_HIDDEN;
-void __cdecl MSVCRT__free_locale(MSVCRT__locale_t);
+void __cdecl MSVCRT__free_locale(_locale_t);
 threadmbcinfo* create_mbcinfo(int, LCID, threadmbcinfo*) DECLSPEC_HIDDEN;
 void free_locinfo(pthreadlocinfo) DECLSPEC_HIDDEN;
 void free_mbcinfo(pthreadmbcinfo) DECLSPEC_HIDDEN;
@@ -942,17 +935,17 @@ int __cdecl __crtLCMapStringA(LCID, DWORD, const char*, int, char*, int, unsigne
 int            __cdecl MSVCRT__write(int,const void*,unsigned int);
 int            __cdecl _getch(void);
 int            __cdecl _ismbblead(unsigned int);
-int            __cdecl _ismbblead_l(unsigned int, MSVCRT__locale_t);
+int            __cdecl _ismbblead_l(unsigned int, _locale_t);
 int            __cdecl _ismbclegal(unsigned int c);
 int            __cdecl _ismbstrail(const unsigned char* start, const unsigned char* str);
 int            __cdecl MSVCRT_mbtowc(MSVCRT_wchar_t*,const char*,MSVCRT_size_t);
-int            __cdecl MSVCRT_mbtowc_l(MSVCRT_wchar_t*,const char*,MSVCRT_size_t,MSVCRT__locale_t);
+int            __cdecl MSVCRT_mbtowc_l(MSVCRT_wchar_t*,const char*,MSVCRT_size_t,_locale_t);
 MSVCRT_size_t  __cdecl MSVCRT_mbstowcs(MSVCRT_wchar_t*,const char*,MSVCRT_size_t);
-MSVCRT_size_t  __cdecl MSVCRT__mbstowcs_l(MSVCRT_wchar_t*, const char*, MSVCRT_size_t, MSVCRT__locale_t);
+MSVCRT_size_t  __cdecl MSVCRT__mbstowcs_l(MSVCRT_wchar_t*, const char*, MSVCRT_size_t, _locale_t);
 int            __cdecl MSVCRT__mbstowcs_s_l(MSVCRT_size_t*, MSVCRT_wchar_t*,
-        MSVCRT_size_t, const char*, MSVCRT_size_t, MSVCRT__locale_t);
+        MSVCRT_size_t, const char*, MSVCRT_size_t, _locale_t);
 MSVCRT_size_t  __cdecl MSVCRT_wcstombs(char*,const MSVCRT_wchar_t*,MSVCRT_size_t);
-MSVCRT_size_t  __cdecl MSVCRT__wcstombs_l(char*, const MSVCRT_wchar_t*, MSVCRT_size_t, MSVCRT__locale_t);
+MSVCRT_size_t  __cdecl MSVCRT__wcstombs_l(char*, const MSVCRT_wchar_t*, MSVCRT_size_t, _locale_t);
 MSVCRT_intptr_t __cdecl MSVCRT__spawnve(int,const char*,const char* const *,const char* const *);
 MSVCRT_intptr_t __cdecl MSVRT__spawnvpe(int,const char*,const char* const *,const char* const *);
 MSVCRT_intptr_t __cdecl MSVCRT__wspawnve(int,const MSVCRT_wchar_t*,const MSVCRT_wchar_t* const *,const MSVCRT_wchar_t* const *);
@@ -975,7 +968,7 @@ MSVCRT_size_t __cdecl MSVCRT_strnlen(const char *,MSVCRT_size_t);
 MSVCRT_size_t __cdecl MSVCRT_wcsnlen(const MSVCRT_wchar_t*,MSVCRT_size_t);
 MSVCRT_wchar_t*** __cdecl MSVCRT___p__wenviron(void);
 INT     __cdecl MSVCRT_wctomb(char*,MSVCRT_wchar_t);
-int     __cdecl MSVCRT__wctomb_l(char*, MSVCRT_wchar_t, MSVCRT__locale_t);
+int     __cdecl MSVCRT__wctomb_l(char*, MSVCRT_wchar_t, _locale_t);
 char*   __cdecl MSVCRT__strdate(char* date);
 char*   __cdecl MSVCRT__strtime(char* date);
 int     __cdecl _setmbcp(int);
@@ -988,15 +981,15 @@ void __cdecl    MSVCRT__wsearchenv(const MSVCRT_wchar_t*, const MSVCRT_wchar_t*,
 MSVCRT_intptr_t __cdecl MSVCRT__spawnvpe(int, const char*, const char* const*, const char* const*);
 void __cdecl MSVCRT__invalid_parameter(const MSVCRT_wchar_t *expr, const MSVCRT_wchar_t *func,
                                        const MSVCRT_wchar_t *file, unsigned int line, uintptr_t arg);
-int __cdecl      MSVCRT__toupper_l(int,MSVCRT__locale_t);
-int __cdecl      MSVCRT__tolower_l(int,MSVCRT__locale_t);
-int __cdecl      MSVCRT__towupper_l(MSVCRT_wint_t,MSVCRT__locale_t);
-int __cdecl      MSVCRT__towlower_l(MSVCRT_wint_t,MSVCRT__locale_t);
+int __cdecl      MSVCRT__toupper_l(int,_locale_t);
+int __cdecl      MSVCRT__tolower_l(int,_locale_t);
+int __cdecl      MSVCRT__towupper_l(MSVCRT_wint_t,_locale_t);
+int __cdecl      MSVCRT__towlower_l(MSVCRT_wint_t,_locale_t);
 int __cdecl      MSVCRT__toupper(int); /* only use on lower-case ASCII characters */
 int __cdecl      MSVCRT__stricmp(const char*, const char*);
 int __cdecl      MSVCRT__strnicmp(const char*, const char*, MSVCRT_size_t);
-int __cdecl      MSVCRT__strnicoll_l(const char*, const char*, MSVCRT_size_t, MSVCRT__locale_t);
-int __cdecl      MSVCRT__strncoll_l(const char*, const char*, MSVCRT_size_t, MSVCRT__locale_t);
+int __cdecl      MSVCRT__strnicoll_l(const char*, const char*, MSVCRT_size_t, _locale_t);
+int __cdecl      MSVCRT__strncoll_l(const char*, const char*, MSVCRT_size_t, _locale_t);
 char* __cdecl    MSVCRT_strncat(char*,const char *,MSVCRT_size_t);
 int __cdecl      MSVCRT_strncmp(const char*, const char*, MSVCRT_size_t);
 int __cdecl      MSVCRT_strcmp(const char*, const char*);
@@ -1010,15 +1003,15 @@ int __cdecl MSVCRT_wcsncmp(const MSVCRT_wchar_t*, const MSVCRT_wchar_t*, MSVCRT_
 int __cdecl MSVCRT__wcsnicmp(const MSVCRT_wchar_t*, const MSVCRT_wchar_t*, MSVCRT_size_t);
 int __cdecl MSVCRT_towlower(MSVCRT_wint_t);
 int __cdecl MSVCRT_towupper(MSVCRT_wint_t);
-int __cdecl MSVCRT__isprint_l(int c, MSVCRT__locale_t locale);
-int __cdecl MSVCRT__iswalnum_l(MSVCRT_wchar_t, MSVCRT__locale_t);
-int __cdecl MSVCRT__iswdigit_l(MSVCRT_wchar_t, MSVCRT__locale_t);
-int __cdecl MSVCRT__iswgraph_l(MSVCRT_wchar_t, MSVCRT__locale_t);
-int __cdecl MSVCRT__iswalpha_l(MSVCRT_wchar_t, MSVCRT__locale_t);
-int __cdecl MSVCRT__iswlower_l(MSVCRT_wchar_t, MSVCRT__locale_t);
-int __cdecl MSVCRT__iswupper_l(MSVCRT_wchar_t, MSVCRT__locale_t);
-int __cdecl MSVCRT__iswprint_l(MSVCRT_wchar_t, MSVCRT__locale_t);
-int __cdecl MSVCRT__iswpunct_l(MSVCRT_wchar_t, MSVCRT__locale_t);
+int __cdecl MSVCRT__isprint_l(int c, _locale_t locale);
+int __cdecl MSVCRT__iswalnum_l(MSVCRT_wchar_t, _locale_t);
+int __cdecl MSVCRT__iswdigit_l(MSVCRT_wchar_t, _locale_t);
+int __cdecl MSVCRT__iswgraph_l(MSVCRT_wchar_t, _locale_t);
+int __cdecl MSVCRT__iswalpha_l(MSVCRT_wchar_t, _locale_t);
+int __cdecl MSVCRT__iswlower_l(MSVCRT_wchar_t, _locale_t);
+int __cdecl MSVCRT__iswupper_l(MSVCRT_wchar_t, _locale_t);
+int __cdecl MSVCRT__iswprint_l(MSVCRT_wchar_t, _locale_t);
+int __cdecl MSVCRT__iswpunct_l(MSVCRT_wchar_t, _locale_t);
 MSVCRT_size_t __cdecl MSVCRT_wcslen(const MSVCRT_wchar_t*);
 MSVCRT_wchar_t* __cdecl MSVCRT_wcscpy(MSVCRT_wchar_t*, const MSVCRT_wchar_t*);
 MSVCRT_wchar_t* __cdecl MSVCRT_wcschr(const MSVCRT_wchar_t*, MSVCRT_wchar_t);
@@ -1072,9 +1065,9 @@ typedef union _printf_arg
     double get_double;
 } printf_arg;
 typedef printf_arg (*args_clbk)(void*, int, int, __ms_va_list*);
-int pf_printf_a(puts_clbk_a, void*, const char*, MSVCRT__locale_t,
+int pf_printf_a(puts_clbk_a, void*, const char*, _locale_t,
         DWORD, args_clbk, void*, __ms_va_list*) DECLSPEC_HIDDEN;
-int pf_printf_w(puts_clbk_w, void*, const MSVCRT_wchar_t*, MSVCRT__locale_t,
+int pf_printf_w(puts_clbk_w, void*, const MSVCRT_wchar_t*, _locale_t,
         DWORD, args_clbk, void*, __ms_va_list*) DECLSPEC_HIDDEN;
 int create_positional_ctx_a(void*, const char*, __ms_va_list) DECLSPEC_HIDDEN;
 int create_positional_ctx_w(void*, const MSVCRT_wchar_t*, __ms_va_list) DECLSPEC_HIDDEN;
diff --git a/dlls/msvcrt/printf.h b/dlls/msvcrt/printf.h
index 3be60db369b..11daee8cd88 100644
--- a/dlls/msvcrt/printf.h
+++ b/dlls/msvcrt/printf.h
@@ -109,7 +109,7 @@ static inline int FUNC_NAME(pf_fill)(FUNC_NAME(puts_clbk) pf_puts, void *puts_ct
 #ifndef PRINTF_HELPERS
 #define PRINTF_HELPERS
 static inline int wcstombs_len(char *mbstr, const MSVCRT_wchar_t *wcstr,
-        int len, MSVCRT__locale_t locale)
+        int len, _locale_t locale)
 {
     char buf[MSVCRT_MB_LEN_MAX];
     int i, r, mblen = 0;
@@ -123,7 +123,7 @@ static inline int wcstombs_len(char *mbstr, const MSVCRT_wchar_t *wcstr,
 }
 
 static inline int mbstowcs_len(MSVCRT_wchar_t *wcstr, const char *mbstr,
-        int len, MSVCRT__locale_t locale)
+        int len, _locale_t locale)
 {
     int i, r, wlen = 0;
     WCHAR buf;
@@ -138,7 +138,7 @@ static inline int mbstowcs_len(MSVCRT_wchar_t *wcstr, const char *mbstr,
 #endif
 
 static inline int FUNC_NAME(pf_output_wstr)(FUNC_NAME(puts_clbk) pf_puts, void *puts_ctx,
-        const MSVCRT_wchar_t *str, int len, MSVCRT__locale_t locale)
+        const MSVCRT_wchar_t *str, int len, _locale_t locale)
 {
 #ifdef PRINTF_WIDE
     return pf_puts(puts_ctx, len, str);
@@ -160,7 +160,7 @@ static inline int FUNC_NAME(pf_output_wstr)(FUNC_NAME(puts_clbk) pf_puts, void *
 }
 
 static inline int FUNC_NAME(pf_output_str)(FUNC_NAME(puts_clbk) pf_puts, void *puts_ctx,
-        const char *str, int len, MSVCRT__locale_t locale)
+        const char *str, int len, _locale_t locale)
 {
 #ifdef PRINTF_WIDE
     LPWSTR out;
@@ -182,7 +182,7 @@ static inline int FUNC_NAME(pf_output_str)(FUNC_NAME(puts_clbk) pf_puts, void *p
 }
 
 static inline int FUNC_NAME(pf_output_format_wstr)(FUNC_NAME(puts_clbk) pf_puts, void *puts_ctx,
-        const MSVCRT_wchar_t *str, int len, pf_flags *flags, MSVCRT__locale_t locale)
+        const MSVCRT_wchar_t *str, int len, pf_flags *flags, _locale_t locale)
 {
     int r, ret;
 
@@ -212,7 +212,7 @@ static inline int FUNC_NAME(pf_output_format_wstr)(FUNC_NAME(puts_clbk) pf_puts,
 }
 
 static inline int FUNC_NAME(pf_output_format_str)(FUNC_NAME(puts_clbk) pf_puts, void *puts_ctx,
-        const char *str, int len, pf_flags *flags, MSVCRT__locale_t locale)
+        const char *str, int len, pf_flags *flags, _locale_t locale)
 {
     int r, ret;
 
@@ -242,7 +242,7 @@ static inline int FUNC_NAME(pf_output_format_str)(FUNC_NAME(puts_clbk) pf_puts,
 }
 
 static inline int FUNC_NAME(pf_handle_string)(FUNC_NAME(puts_clbk) pf_puts, void *puts_ctx,
-        const void *str, int len, pf_flags *flags, MSVCRT__locale_t locale, BOOL legacy_wide)
+        const void *str, int len, pf_flags *flags, _locale_t locale, BOOL legacy_wide)
 {
     BOOL api_is_wide = sizeof(APICHAR) == sizeof(MSVCRT_wchar_t);
     BOOL complement_is_narrow = legacy_wide ? api_is_wide : FALSE;
@@ -268,7 +268,7 @@ static inline int FUNC_NAME(pf_handle_string)(FUNC_NAME(puts_clbk) pf_puts, void
 }
 
 static inline int FUNC_NAME(pf_output_special_fp)(FUNC_NAME(puts_clbk) pf_puts, void *puts_ctx,
-        double v, pf_flags *flags, MSVCRT__locale_t locale,
+        double v, pf_flags *flags, _locale_t locale,
         BOOL legacy_msvcrt_compat, BOOL three_digit_exp)
 {
     APICHAR pfx[16], sfx[8], *p;
@@ -397,7 +397,7 @@ static inline int FUNC_NAME(pf_output_special_fp)(FUNC_NAME(puts_clbk) pf_puts,
 }
 
 static inline int FUNC_NAME(pf_output_hex_fp)(FUNC_NAME(puts_clbk) pf_puts, void *puts_ctx,
-        double v, pf_flags *flags, MSVCRT__locale_t locale, BOOL standard_rounding)
+        double v, pf_flags *flags, _locale_t locale, BOOL standard_rounding)
 {
     const APICHAR digits[2][16] = {
         { '0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f' },
@@ -588,7 +588,7 @@ static inline void FUNC_NAME(pf_integer_conv)(APICHAR *buf, pf_flags *flags, LON
 }
 
 static inline int FUNC_NAME(pf_output_fp)(FUNC_NAME(puts_clbk) pf_puts, void *puts_ctx,
-        double v, pf_flags *flags, MSVCRT__locale_t locale, BOOL three_digit_exp,
+        double v, pf_flags *flags, _locale_t locale, BOOL three_digit_exp,
         BOOL standard_rounding)
 {
     int e2, e10 = 0, round_pos, round_limb, radix_pos, first_limb_len, i, len, r, ret;
@@ -951,7 +951,7 @@ static inline int FUNC_NAME(pf_output_fp)(FUNC_NAME(puts_clbk) pf_puts, void *pu
 }
 
 int FUNC_NAME(pf_printf)(FUNC_NAME(puts_clbk) pf_puts, void *puts_ctx, const APICHAR *fmt,
-        MSVCRT__locale_t locale, DWORD options,
+        _locale_t locale, DWORD options,
         args_clbk pf_args, void *args_ctx, __ms_va_list *valist)
 {
     const APICHAR *q, *p = fmt;
diff --git a/dlls/msvcrt/scanf.c b/dlls/msvcrt/scanf.c
index 4b2ac2ed4a1..19743c60d00 100644
--- a/dlls/msvcrt/scanf.c
+++ b/dlls/msvcrt/scanf.c
@@ -161,7 +161,7 @@ int WINAPIV MSVCRT_fscanf(MSVCRT_FILE *file, const char *format, ...)
  *		_fscanf_l (MSVCRT.@)
  */
 int WINAPIV MSVCRT__fscanf_l(MSVCRT_FILE *file, const char *format,
-        MSVCRT__locale_t locale, ...)
+        _locale_t locale, ...)
 {
     __ms_va_list valist;
     int res;
@@ -190,7 +190,7 @@ int WINAPIV MSVCRT_fscanf_s(MSVCRT_FILE *file, const char *format, ...)
  *		_fscanf_s_l (MSVCRT.@)
  */
 int WINAPIV MSVCRT__fscanf_s_l(MSVCRT_FILE *file, const char *format,
-        MSVCRT__locale_t locale, ...)
+        _locale_t locale, ...)
 {
     __ms_va_list valist;
     int res;
@@ -218,7 +218,7 @@ int WINAPIV MSVCRT_scanf(const char *format, ...)
 /*********************************************************************
  *		_scanf_l (MSVCRT.@)
  */
-int WINAPIV MSVCRT__scanf_l(const char *format, MSVCRT__locale_t locale, ...)
+int WINAPIV MSVCRT__scanf_l(const char *format, _locale_t locale, ...)
 {
     __ms_va_list valist;
     int res;
@@ -246,7 +246,7 @@ int WINAPIV MSVCRT_scanf_s(const char *format, ...)
 /*********************************************************************
  *		_scanf_s_l (MSVCRT.@)
  */
-int WINAPIV MSVCRT__scanf_s_l(const char *format, MSVCRT__locale_t locale, ...)
+int WINAPIV MSVCRT__scanf_s_l(const char *format, _locale_t locale, ...)
 {
     __ms_va_list valist;
     int res;
@@ -275,7 +275,7 @@ int WINAPIV MSVCRT_fwscanf(MSVCRT_FILE *file, const MSVCRT_wchar_t *format, ...)
  *		_fwscanf_l (MSVCRT.@)
  */
 int WINAPIV MSVCRT__fwscanf_l(MSVCRT_FILE *file, const MSVCRT_wchar_t *format,
-        MSVCRT__locale_t locale, ...)
+        _locale_t locale, ...)
 {
     __ms_va_list valist;
     int res;
@@ -304,7 +304,7 @@ int WINAPIV MSVCRT_fwscanf_s(MSVCRT_FILE *file, const MSVCRT_wchar_t *format, ..
  *		_fwscanf_s_l (MSVCRT.@)
  */
 int WINAPIV MSVCRT__fwscanf_s_l(MSVCRT_FILE *file, const MSVCRT_wchar_t *format,
-        MSVCRT__locale_t locale, ...)
+        _locale_t locale, ...)
 {
     __ms_va_list valist;
     int res;
@@ -333,7 +333,7 @@ int WINAPIV MSVCRT_wscanf(const MSVCRT_wchar_t *format, ...)
  *		_wscanf_l (MSVCRT.@)
  */
 int WINAPIV MSVCRT__wscanf_l(const MSVCRT_wchar_t *format,
-        MSVCRT__locale_t locale, ...)
+        _locale_t locale, ...)
 {
     __ms_va_list valist;
     int res;
@@ -362,7 +362,7 @@ int WINAPIV MSVCRT_wscanf_s(const MSVCRT_wchar_t *format, ...)
  *		_wscanf_s_l (MSVCRT.@)
  */
 int WINAPIV MSVCRT__wscanf_s_l(const MSVCRT_wchar_t *format,
-        MSVCRT__locale_t locale, ...)
+        _locale_t locale, ...)
 {
     __ms_va_list valist;
     int res;
@@ -391,7 +391,7 @@ int WINAPIV MSVCRT_sscanf(const char *str, const char *format, ...)
  *		_sscanf_l (MSVCRT.@)
  */
 int WINAPIV MSVCRT__sscanf_l(const char *str, const char *format,
-        MSVCRT__locale_t locale, ...)
+        _locale_t locale, ...)
 {
     __ms_va_list valist;
     int res;
@@ -420,7 +420,7 @@ int WINAPIV MSVCRT_sscanf_s(const char *str, const char *format, ...)
  *		_sscanf_s_l (MSVCRT.@)
  */
 int WINAPIV MSVCRT__sscanf_s_l(const char *str, const char *format,
-        MSVCRT__locale_t locale, ...)
+        _locale_t locale, ...)
 {
     __ms_va_list valist;
     int res;
@@ -449,7 +449,7 @@ int WINAPIV MSVCRT_swscanf(const MSVCRT_wchar_t *str, const MSVCRT_wchar_t *form
  *		_swscanf_l (MSVCRT.@)
  */
 int WINAPIV MSVCRT__swscanf_l(const MSVCRT_wchar_t *str, const MSVCRT_wchar_t *format,
-        MSVCRT__locale_t locale, ...)
+        _locale_t locale, ...)
 {
     __ms_va_list valist;
     int res;
@@ -478,7 +478,7 @@ int WINAPIV MSVCRT_swscanf_s(const MSVCRT_wchar_t *str, const MSVCRT_wchar_t *fo
  *		_swscanf_s_l (MSVCRT.@)
  */
 int WINAPIV MSVCRT__swscanf_s_l(const MSVCRT_wchar_t *str, const MSVCRT_wchar_t *format,
-        MSVCRT__locale_t locale, ...)
+        _locale_t locale, ...)
 {
     __ms_va_list valist;
     int res;
@@ -506,7 +506,7 @@ int WINAPIV _cscanf(const char *format, ...)
 /*********************************************************************
  *		_cscanf_l (MSVCRT.@)
  */
-int WINAPIV _cscanf_l(const char *format, MSVCRT__locale_t locale, ...)
+int WINAPIV _cscanf_l(const char *format, _locale_t locale, ...)
 {
     __ms_va_list valist;
     int res;
@@ -534,7 +534,7 @@ int WINAPIV _cscanf_s(const char *format, ...)
 /*********************************************************************
  *		_cscanf_s_l (MSVCRT.@)
  */
-int WINAPIV _cscanf_s_l(const char *format, MSVCRT__locale_t locale, ...)
+int WINAPIV _cscanf_s_l(const char *format, _locale_t locale, ...)
 {
     __ms_va_list valist;
     int res;
@@ -562,7 +562,7 @@ int WINAPIV _cwscanf(const MSVCRT_wchar_t *format, ...)
 /*********************************************************************
  *		_cwscanf_l (MSVCRT.@)
  */
-int WINAPIV _cwscanf_l(const MSVCRT_wchar_t *format, MSVCRT__locale_t locale, ...)
+int WINAPIV _cwscanf_l(const MSVCRT_wchar_t *format, _locale_t locale, ...)
 {
     __ms_va_list valist;
     int res;
@@ -590,7 +590,7 @@ int WINAPIV _cwscanf_s(const MSVCRT_wchar_t *format, ...)
 /*********************************************************************
  *		_cwscanf_s_l (MSVCRT.@)
  */
-int WINAPIV _cwscanf_s_l(const MSVCRT_wchar_t *format, MSVCRT__locale_t locale, ...)
+int WINAPIV _cwscanf_s_l(const MSVCRT_wchar_t *format, _locale_t locale, ...)
 {
     __ms_va_list valist;
     int res;
@@ -619,7 +619,7 @@ int WINAPIV MSVCRT__snscanf(char *input, MSVCRT_size_t length, const char *forma
  *		_snscanf_l (MSVCRT.@)
  */
 int WINAPIV MSVCRT__snscanf_l(char *input, MSVCRT_size_t length,
-        const char *format, MSVCRT__locale_t locale, ...)
+        const char *format, _locale_t locale, ...)
 {
     __ms_va_list valist;
     int res;
@@ -648,7 +648,7 @@ int WINAPIV MSVCRT__snscanf_s(char *input, MSVCRT_size_t length, const char *for
  *		_snscanf_s_l (MSVCRT.@)
  */
 int WINAPIV MSVCRT__snscanf_s_l(char *input, MSVCRT_size_t length,
-        const char *format, MSVCRT__locale_t locale, ...)
+        const char *format, _locale_t locale, ...)
 {
     __ms_va_list valist;
     int res;
@@ -666,7 +666,7 @@ int WINAPIV MSVCRT__snscanf_s_l(char *input, MSVCRT_size_t length,
 int CDECL MSVCRT__stdio_common_vsscanf(unsigned __int64 options,
                                        const char *input, MSVCRT_size_t length,
                                        const char *format,
-                                       MSVCRT__locale_t locale,
+                                       _locale_t locale,
                                        __ms_va_list valist)
 {
     /* LEGACY_WIDE_SPECIFIERS only has got an effect on the wide
@@ -686,7 +686,7 @@ int CDECL MSVCRT__stdio_common_vsscanf(unsigned __int64 options,
 int CDECL MSVCRT__stdio_common_vswscanf(unsigned __int64 options,
                                         const MSVCRT_wchar_t *input, MSVCRT_size_t length,
                                         const MSVCRT_wchar_t *format,
-                                        MSVCRT__locale_t locale,
+                                        _locale_t locale,
                                         __ms_va_list valist)
 {
     /* LEGACY_WIDE_SPECIFIERS only has got an effect on the wide
@@ -706,7 +706,7 @@ int CDECL MSVCRT__stdio_common_vswscanf(unsigned __int64 options,
 int CDECL MSVCRT__stdio_common_vfscanf(unsigned __int64 options,
                                        MSVCRT_FILE *file,
                                        const char *format,
-                                       MSVCRT__locale_t locale,
+                                       _locale_t locale,
                                        __ms_va_list valist)
 {
     if (options & ~UCRTBASE_SCANF_SECURECRT)
@@ -723,7 +723,7 @@ int CDECL MSVCRT__stdio_common_vfscanf(unsigned __int64 options,
 int CDECL MSVCRT__stdio_common_vfwscanf(unsigned __int64 options,
                                         MSVCRT_FILE *file,
                                         const MSVCRT_wchar_t *format,
-                                        MSVCRT__locale_t locale,
+                                        _locale_t locale,
                                         __ms_va_list valist)
 {
     if (options & ~UCRTBASE_SCANF_SECURECRT)
@@ -753,7 +753,7 @@ int WINAPIV MSVCRT__snwscanf(MSVCRT_wchar_t *input, MSVCRT_size_t length,
  *		_snwscanf_l (MSVCRT.@)
  */
 int WINAPIV MSVCRT__snwscanf_l(MSVCRT_wchar_t *input, MSVCRT_size_t length,
-        const MSVCRT_wchar_t *format, MSVCRT__locale_t locale, ...)
+        const MSVCRT_wchar_t *format, _locale_t locale, ...)
 {
     __ms_va_list valist;
     int res;
@@ -783,7 +783,7 @@ int WINAPIV MSVCRT__snwscanf_s(MSVCRT_wchar_t *input, MSVCRT_size_t length,
  *		_snscanf_s_l (MSVCRT.@)
  */
 int WINAPIV MSVCRT__snwscanf_s_l(MSVCRT_wchar_t *input, MSVCRT_size_t length,
-        const MSVCRT_wchar_t *format, MSVCRT__locale_t locale, ...)
+        const MSVCRT_wchar_t *format, _locale_t locale, ...)
 {
     __ms_va_list valist;
     int res;
diff --git a/dlls/msvcrt/scanf.h b/dlls/msvcrt/scanf.h
index 74579d22034..64be13c6a33 100644
--- a/dlls/msvcrt/scanf.h
+++ b/dlls/msvcrt/scanf.h
@@ -52,15 +52,15 @@
 #define _UNLOCK_FILE_(file) MSVCRT__unlock_file(MSVCRT_stdin)
 #ifdef WIDE_SCANF
 #ifdef SECURE
-#define _FUNCTION_ static int MSVCRT_vcwscanf_s_l(const MSVCRT_wchar_t *format, MSVCRT__locale_t locale, __ms_va_list ap)
+#define _FUNCTION_ static int MSVCRT_vcwscanf_s_l(const MSVCRT_wchar_t *format, _locale_t locale, __ms_va_list ap)
 #else  /* SECURE */
-#define _FUNCTION_ static int MSVCRT_vcwscanf_l(const MSVCRT_wchar_t *format, MSVCRT__locale_t locale, __ms_va_list ap)
+#define _FUNCTION_ static int MSVCRT_vcwscanf_l(const MSVCRT_wchar_t *format, _locale_t locale, __ms_va_list ap)
 #endif /* SECURE */
 #else  /* WIDE_SCANF */
 #ifdef SECURE
-#define _FUNCTION_ static int MSVCRT_vcscanf_s_l(const char *format, MSVCRT__locale_t locale, __ms_va_list ap)
+#define _FUNCTION_ static int MSVCRT_vcscanf_s_l(const char *format, _locale_t locale, __ms_va_list ap)
 #else  /* SECURE */
-#define _FUNCTION_ static int MSVCRT_vcscanf_l(const char *format, MSVCRT__locale_t locale, __ms_va_list ap)
+#define _FUNCTION_ static int MSVCRT_vcscanf_l(const char *format, _locale_t locale, __ms_va_list ap)
 #endif /* SECURE */
 #endif /* WIDE_SCANF */
 #else
@@ -84,15 +84,15 @@
 #define _UNLOCK_FILE_(file) do {} while(0)
 #ifdef WIDE_SCANF
 #ifdef SECURE
-#define _FUNCTION_ static int MSVCRT_vsnwscanf_s_l(const MSVCRT_wchar_t *file, MSVCRT_size_t length, const MSVCRT_wchar_t *format, MSVCRT__locale_t locale, __ms_va_list ap)
+#define _FUNCTION_ static int MSVCRT_vsnwscanf_s_l(const MSVCRT_wchar_t *file, MSVCRT_size_t length, const MSVCRT_wchar_t *format, _locale_t locale, __ms_va_list ap)
 #else  /* SECURE */
-#define _FUNCTION_ static int MSVCRT_vsnwscanf_l(const MSVCRT_wchar_t *file, MSVCRT_size_t length, const MSVCRT_wchar_t *format, MSVCRT__locale_t locale, __ms_va_list ap)
+#define _FUNCTION_ static int MSVCRT_vsnwscanf_l(const MSVCRT_wchar_t *file, MSVCRT_size_t length, const MSVCRT_wchar_t *format, _locale_t locale, __ms_va_list ap)
 #endif /* SECURE */
 #else /* WIDE_SCANF */
 #ifdef SECURE
-#define _FUNCTION_ static int MSVCRT_vsnscanf_s_l(const char *file, MSVCRT_size_t length, const char *format, MSVCRT__locale_t locale, __ms_va_list ap)
+#define _FUNCTION_ static int MSVCRT_vsnscanf_s_l(const char *file, MSVCRT_size_t length, const char *format, _locale_t locale, __ms_va_list ap)
 #else  /* SECURE */
-#define _FUNCTION_ static int MSVCRT_vsnscanf_l(const char *file, MSVCRT_size_t length, const char *format, MSVCRT__locale_t locale, __ms_va_list ap)
+#define _FUNCTION_ static int MSVCRT_vsnscanf_l(const char *file, MSVCRT_size_t length, const char *format, _locale_t locale, __ms_va_list ap)
 #endif /* SECURE */
 #endif /* WIDE_SCANF */
 #else /* STRING_LEN */
@@ -106,15 +106,15 @@
 #define _UNLOCK_FILE_(file) do {} while(0)
 #ifdef WIDE_SCANF
 #ifdef SECURE
-#define _FUNCTION_ static int MSVCRT_vswscanf_s_l(const MSVCRT_wchar_t *file, const MSVCRT_wchar_t *format, MSVCRT__locale_t locale, __ms_va_list ap)
+#define _FUNCTION_ static int MSVCRT_vswscanf_s_l(const MSVCRT_wchar_t *file, const MSVCRT_wchar_t *format, _locale_t locale, __ms_va_list ap)
 #else  /* SECURE */
-#define _FUNCTION_ static int MSVCRT_vswscanf_l(const MSVCRT_wchar_t *file, const MSVCRT_wchar_t *format, MSVCRT__locale_t locale, __ms_va_list ap)
+#define _FUNCTION_ static int MSVCRT_vswscanf_l(const MSVCRT_wchar_t *file, const MSVCRT_wchar_t *format, _locale_t locale, __ms_va_list ap)
 #endif /* SECURE */
 #else /* WIDE_SCANF */
 #ifdef SECURE
-#define _FUNCTION_ static int MSVCRT_vsscanf_s_l(const char *file, const char *format, MSVCRT__locale_t locale, __ms_va_list ap)
+#define _FUNCTION_ static int MSVCRT_vsscanf_s_l(const char *file, const char *format, _locale_t locale, __ms_va_list ap)
 #else  /* SECURE */
-#define _FUNCTION_ static int MSVCRT_vsscanf_l(const char *file, const char *format, MSVCRT__locale_t locale, __ms_va_list ap)
+#define _FUNCTION_ static int MSVCRT_vsscanf_l(const char *file, const char *format, _locale_t locale, __ms_va_list ap)
 #endif /* SECURE */
 #endif /* WIDE_SCANF */
 #endif /* STRING_LEN */
@@ -127,9 +127,9 @@
 #define _LOCK_FILE_(file) MSVCRT__lock_file(file)
 #define _UNLOCK_FILE_(file) MSVCRT__unlock_file(file)
 #ifdef SECURE
-#define _FUNCTION_ static int MSVCRT_vfwscanf_s_l(MSVCRT_FILE* file, const MSVCRT_wchar_t *format, MSVCRT__locale_t locale, __ms_va_list ap)
+#define _FUNCTION_ static int MSVCRT_vfwscanf_s_l(MSVCRT_FILE* file, const MSVCRT_wchar_t *format, _locale_t locale, __ms_va_list ap)
 #else  /* SECURE */
-#define _FUNCTION_ static int MSVCRT_vfwscanf_l(MSVCRT_FILE* file, const MSVCRT_wchar_t *format, MSVCRT__locale_t locale, __ms_va_list ap)
+#define _FUNCTION_ static int MSVCRT_vfwscanf_l(MSVCRT_FILE* file, const MSVCRT_wchar_t *format, _locale_t locale, __ms_va_list ap)
 #endif /* SECURE */
 #else /* WIDE_SCANF */
 #define _GETC_FUNC_(file) MSVCRT_fgetc(file)
@@ -139,9 +139,9 @@
 #define _LOCK_FILE_(file) MSVCRT__lock_file(file)
 #define _UNLOCK_FILE_(file) MSVCRT__unlock_file(file)
 #ifdef SECURE
-#define _FUNCTION_ static int MSVCRT_vfscanf_s_l(MSVCRT_FILE* file, const char *format, MSVCRT__locale_t locale, __ms_va_list ap)
+#define _FUNCTION_ static int MSVCRT_vfscanf_s_l(MSVCRT_FILE* file, const char *format, _locale_t locale, __ms_va_list ap)
 #else  /* SECURE */
-#define _FUNCTION_ static int MSVCRT_vfscanf_l(MSVCRT_FILE* file, const char *format, MSVCRT__locale_t locale, __ms_va_list ap)
+#define _FUNCTION_ static int MSVCRT_vfscanf_l(MSVCRT_FILE* file, const char *format, _locale_t locale, __ms_va_list ap)
 #endif /* SECURE */
 #endif /* WIDE_SCANF */
 #endif /* STRING */
diff --git a/dlls/msvcrt/string.c b/dlls/msvcrt/string.c
index b1cb1f68afd..9c8ed35f266 100644
--- a/dlls/msvcrt/string.c
+++ b/dlls/msvcrt/string.c
@@ -53,7 +53,7 @@ char* CDECL MSVCRT__strdup(const char* str)
 /*********************************************************************
  *		_strlwr_s_l (MSVCRT.@)
  */
-int CDECL MSVCRT__strlwr_s_l(char *str, MSVCRT_size_t len, MSVCRT__locale_t locale)
+int CDECL MSVCRT__strlwr_s_l(char *str, MSVCRT_size_t len, _locale_t locale)
 {
     pthreadlocinfo locinfo;
     char *ptr = str;
@@ -114,7 +114,7 @@ int CDECL MSVCRT__strlwr_s(char *str, MSVCRT_size_t len)
 /*********************************************************************
  *		_strlwr_l (MSVCRT.@)
  */
-char* CDECL _strlwr_l(char *str, MSVCRT__locale_t locale)
+char* CDECL _strlwr_l(char *str, _locale_t locale)
 {
     MSVCRT__strlwr_s_l(str, -1, locale);
     return str;
@@ -132,7 +132,7 @@ char* CDECL MSVCRT__strlwr(char *str)
 /*********************************************************************
  *              _strupr_s_l (MSVCRT.@)
  */
-int CDECL MSVCRT__strupr_s_l(char *str, MSVCRT_size_t len, MSVCRT__locale_t locale)
+int CDECL MSVCRT__strupr_s_l(char *str, MSVCRT_size_t len, _locale_t locale)
 {
     pthreadlocinfo locinfo;
     char *ptr = str;
@@ -193,7 +193,7 @@ int CDECL MSVCRT__strupr_s(char *str, MSVCRT_size_t len)
 /*********************************************************************
  *              _strupr_l (MSVCRT.@)
  */
-char* CDECL MSVCRT__strupr_l(char *str, MSVCRT__locale_t locale)
+char* CDECL MSVCRT__strupr_l(char *str, _locale_t locale)
 {
     MSVCRT__strupr_s_l(str, -1, locale);
     return str;
@@ -1000,7 +1000,7 @@ static void strtod_str_unget(void *ctx)
     (*p)--;
 }
 
-static inline double strtod_helper(const char *str, char **end, MSVCRT__locale_t locale, int *perr)
+static inline double strtod_helper(const char *str, char **end, _locale_t locale, int *perr)
 {
     pthreadlocinfo locinfo;
     const char *beg, *p;
@@ -1040,7 +1040,7 @@ static inline double strtod_helper(const char *str, char **end, MSVCRT__locale_t
 /*********************************************************************
  *		strtod_l  (MSVCRT.@)
  */
-double CDECL MSVCRT_strtod_l(const char *str, char **end, MSVCRT__locale_t locale)
+double CDECL MSVCRT_strtod_l(const char *str, char **end, _locale_t locale)
 {
     return strtod_helper(str, end, locale, NULL);
 }
@@ -1058,7 +1058,7 @@ double CDECL MSVCRT_strtod( const char *str, char **end )
 /*********************************************************************
  *		strtof_l  (MSVCR120.@)
  */
-float CDECL MSVCRT__strtof_l( const char *str, char **end, MSVCRT__locale_t locale )
+float CDECL MSVCRT__strtof_l( const char *str, char **end, _locale_t locale )
 {
     return MSVCRT_strtod_l(str, end, locale);
 }
@@ -1084,7 +1084,7 @@ double CDECL MSVCRT_atof( const char *str )
 /*********************************************************************
  *		_atof_l  (MSVCRT.@)
  */
-double CDECL MSVCRT__atof_l( const char *str, MSVCRT__locale_t locale)
+double CDECL MSVCRT__atof_l( const char *str, _locale_t locale)
 {
     return MSVCRT_strtod_l(str, NULL, locale);
 }
@@ -1092,7 +1092,7 @@ double CDECL MSVCRT__atof_l( const char *str, MSVCRT__locale_t locale)
 /*********************************************************************
  *		_atoflt_l  (MSVCRT.@)
  */
-int CDECL MSVCRT__atoflt_l( MSVCRT__CRT_FLOAT *value, char *str, MSVCRT__locale_t locale)
+int CDECL MSVCRT__atoflt_l( MSVCRT__CRT_FLOAT *value, char *str, _locale_t locale)
 {
     double d;
     int err;
@@ -1117,7 +1117,7 @@ int CDECL MSVCRT__atoflt(MSVCRT__CRT_FLOAT *value, char *str)
 /*********************************************************************
  *              _atodbl_l  (MSVCRT.@)
  */
-int CDECL MSVCRT__atodbl_l(MSVCRT__CRT_DOUBLE *value, char *str, MSVCRT__locale_t locale)
+int CDECL MSVCRT__atodbl_l(MSVCRT__CRT_DOUBLE *value, char *str, _locale_t locale)
 {
     int err;
 
@@ -1140,7 +1140,7 @@ int CDECL MSVCRT__atodbl(MSVCRT__CRT_DOUBLE *value, char *str)
 /*********************************************************************
  *		_strcoll_l (MSVCRT.@)
  */
-int CDECL MSVCRT_strcoll_l( const char* str1, const char* str2, MSVCRT__locale_t locale )
+int CDECL MSVCRT_strcoll_l( const char* str1, const char* str2, _locale_t locale )
 {
     pthreadlocinfo locinfo;
 
@@ -1165,7 +1165,7 @@ int CDECL MSVCRT_strcoll( const char* str1, const char* str2 )
 /*********************************************************************
  *		_stricoll_l (MSVCRT.@)
  */
-int CDECL MSVCRT__stricoll_l( const char* str1, const char* str2, MSVCRT__locale_t locale )
+int CDECL MSVCRT__stricoll_l( const char* str1, const char* str2, _locale_t locale )
 {
     pthreadlocinfo locinfo;
 
@@ -1191,7 +1191,7 @@ int CDECL MSVCRT__stricoll( const char* str1, const char* str2 )
 /*********************************************************************
  *              _strncoll_l (MSVCRT.@)
  */
-int CDECL MSVCRT__strncoll_l( const char* str1, const char* str2, MSVCRT_size_t count, MSVCRT__locale_t locale )
+int CDECL MSVCRT__strncoll_l( const char* str1, const char* str2, MSVCRT_size_t count, _locale_t locale )
 {
     pthreadlocinfo locinfo;
 
@@ -1218,7 +1218,7 @@ int CDECL MSVCRT__strncoll( const char* str1, const char* str2, MSVCRT_size_t co
 /*********************************************************************
  *              _strnicoll_l (MSVCRT.@)
  */
-int CDECL MSVCRT__strnicoll_l( const char* str1, const char* str2, MSVCRT_size_t count, MSVCRT__locale_t locale )
+int CDECL MSVCRT__strnicoll_l( const char* str1, const char* str2, MSVCRT_size_t count, _locale_t locale )
 {
     pthreadlocinfo locinfo;
 
@@ -1384,7 +1384,7 @@ char* __cdecl MSVCRT_strncat(char *dst, const char *src, MSVCRT_size_t len)
  *		_strxfrm_l (MSVCRT.@)
  */
 MSVCRT_size_t CDECL MSVCRT__strxfrm_l( char *dest, const char *src,
-        MSVCRT_size_t len, MSVCRT__locale_t locale )
+        MSVCRT_size_t len, _locale_t locale )
 {
     pthreadlocinfo locinfo;
     int ret;
@@ -1438,7 +1438,7 @@ MSVCRT_size_t CDECL MSVCRT_strxfrm( char *dest, const char *src, MSVCRT_size_t l
  *		__STRINGTOLD_L (MSVCR80.@)
  */
 int CDECL __STRINGTOLD_L( MSVCRT__LDOUBLE *value, char **endptr,
-        const char *str, int flags, MSVCRT__locale_t locale )
+        const char *str, int flags, _locale_t locale )
 {
     pthreadlocinfo locinfo;
     const char *beg, *p;
@@ -1477,7 +1477,7 @@ int CDECL __STRINGTOLD( MSVCRT__LDOUBLE *value, char **endptr, const char *str,
 /********************************************************************
  *              _atoldbl_l (MSVCRT.@)
  */
-int CDECL MSVCRT__atoldbl_l( MSVCRT__LDOUBLE *value, const char *str, MSVCRT__locale_t locale )
+int CDECL MSVCRT__atoldbl_l( MSVCRT__LDOUBLE *value, const char *str, _locale_t locale )
 {
     char *endptr;
     switch(__STRINGTOLD_L( value, &endptr, str, 0, locale ))
@@ -1524,7 +1524,7 @@ MSVCRT_size_t CDECL MSVCRT_strnlen(const char *s, MSVCRT_size_t maxlen)
  *
  * FIXME: locale parameter is ignored
  */
-__int64 CDECL MSVCRT_strtoi64_l(const char *nptr, char **endptr, int base, MSVCRT__locale_t locale)
+__int64 CDECL MSVCRT_strtoi64_l(const char *nptr, char **endptr, int base, _locale_t locale)
 {
     const char *p = nptr;
     BOOL negative = FALSE;
@@ -1604,7 +1604,7 @@ __int64 CDECL MSVCRT_strtoi64(const char *nptr, char **endptr, int base)
 /*********************************************************************
  *  _atoi_l (MSVCRT.@)
  */
-int __cdecl MSVCRT__atoi_l(const char *str, MSVCRT__locale_t locale)
+int __cdecl MSVCRT__atoi_l(const char *str, _locale_t locale)
 {
     __int64 ret = MSVCRT_strtoi64_l(str, NULL, 10, locale);
 
@@ -1656,7 +1656,7 @@ int CDECL MSVCRT_atoi(const char *str)
 /******************************************************************
  *      _atoi64_l (MSVCRT.@)
  */
-__int64 CDECL MSVCRT__atoi64_l(const char *str, MSVCRT__locale_t locale)
+__int64 CDECL MSVCRT__atoi64_l(const char *str, _locale_t locale)
 {
     return MSVCRT_strtoi64_l(str, NULL, 10, locale);
 }
@@ -1672,7 +1672,7 @@ __int64 CDECL MSVCRT__atoi64(const char *str)
 /******************************************************************
  *      _atol_l (MSVCRT.@)
  */
-MSVCRT_long CDECL MSVCRT__atol_l(const char *str, MSVCRT__locale_t locale)
+MSVCRT_long CDECL MSVCRT__atol_l(const char *str, _locale_t locale)
 {
     __int64 ret = MSVCRT_strtoi64_l(str, NULL, 10, locale);
 
@@ -1703,7 +1703,7 @@ MSVCRT_long CDECL MSVCRT_atol(const char *str)
 /******************************************************************
  *      _atoll_l (MSVCR120.@)
  */
-MSVCRT_longlong CDECL MSVCRT__atoll_l(const char* str, MSVCRT__locale_t locale)
+MSVCRT_longlong CDECL MSVCRT__atoll_l(const char* str, _locale_t locale)
 {
     return MSVCRT_strtoi64_l(str, NULL, 10, locale);
 }
@@ -1722,7 +1722,7 @@ MSVCRT_longlong CDECL MSVCRT_atoll(const char* str)
  *		_strtol_l (MSVCRT.@)
  */
 MSVCRT_long CDECL MSVCRT__strtol_l(const char* nptr,
-        char** end, int base, MSVCRT__locale_t locale)
+        char** end, int base, _locale_t locale)
 {
     __int64 ret = MSVCRT_strtoi64_l(nptr, end, base, locale);
 
@@ -1748,7 +1748,7 @@ MSVCRT_long CDECL MSVCRT_strtol(const char* nptr, char** end, int base)
 /******************************************************************
  *		_strtoul_l (MSVCRT.@)
  */
-MSVCRT_ulong CDECL MSVCRT_strtoul_l(const char* nptr, char** end, int base, MSVCRT__locale_t locale)
+MSVCRT_ulong CDECL MSVCRT_strtoul_l(const char* nptr, char** end, int base, _locale_t locale)
 {
     __int64 ret = MSVCRT_strtoi64_l(nptr, end, base, locale);
 
@@ -1776,7 +1776,7 @@ MSVCRT_ulong CDECL MSVCRT_strtoul(const char* nptr, char** end, int base)
  *
  * FIXME: locale parameter is ignored
  */
-unsigned __int64 CDECL MSVCRT_strtoui64_l(const char *nptr, char **endptr, int base, MSVCRT__locale_t locale)
+unsigned __int64 CDECL MSVCRT_strtoui64_l(const char *nptr, char **endptr, int base, _locale_t locale)
 {
     const char *p = nptr;
     BOOL negative = FALSE;
@@ -2650,7 +2650,7 @@ int __cdecl MSVCRT_strncmp(const char *str1, const char *str2, MSVCRT_size_t len
  *                  _strnicmp_l   (MSVCRT.@)
  */
 int __cdecl MSVCRT__strnicmp_l(const char *s1, const char *s2,
-        MSVCRT_size_t count, MSVCRT__locale_t locale)
+        MSVCRT_size_t count, _locale_t locale)
 {
     pthreadlocinfo locinfo;
     int c1, c2;
@@ -2689,7 +2689,7 @@ int __cdecl MSVCRT__strnicmp_l(const char *s1, const char *s2,
 /*********************************************************************
  *                  _stricmp_l   (MSVCRT.@)
  */
-int __cdecl MSVCRT__stricmp_l(const char *s1, const char *s2, MSVCRT__locale_t locale)
+int __cdecl MSVCRT__stricmp_l(const char *s1, const char *s2, _locale_t locale)
 {
     return MSVCRT__strnicmp_l(s1, s2, -1, locale);
 }
@@ -2756,7 +2756,7 @@ char* __cdecl MSVCRT_strstr(const char *haystack, const char *needle)
 /*********************************************************************
  *                  _memicmp_l   (MSVCRT.@)
  */
-int __cdecl MSVCRT__memicmp_l(const char *s1, const char *s2, MSVCRT_size_t len, MSVCRT__locale_t locale)
+int __cdecl MSVCRT__memicmp_l(const char *s1, const char *s2, MSVCRT_size_t len, _locale_t locale)
 {
     int ret = 0;
 
diff --git a/dlls/msvcrt/time.c b/dlls/msvcrt/time.c
index a3268702ba3..f833dcf1ef8 100644
--- a/dlls/msvcrt/time.c
+++ b/dlls/msvcrt/time.c
@@ -1192,7 +1192,7 @@ static inline BOOL strftime_tzdiff(STRFTIME_CHAR *str, MSVCRT_size_t *pos, MSVCR
 
 static MSVCRT_size_t strftime_impl(STRFTIME_CHAR *str, MSVCRT_size_t max,
         const STRFTIME_CHAR *format, const struct MSVCRT_tm *mstm,
-        __lc_time_data *time_data, MSVCRT__locale_t loc)
+        __lc_time_data *time_data, _locale_t loc)
 {
     MSVCRT_size_t ret, tmp;
     BOOL alternate;
@@ -1543,7 +1543,7 @@ einval_error:
 }
 
 static MSVCRT_size_t strftime_helper(char *str, MSVCRT_size_t max, const char *format,
-        const struct MSVCRT_tm *mstm, __lc_time_data *time_data, MSVCRT__locale_t loc)
+        const struct MSVCRT_tm *mstm, __lc_time_data *time_data, _locale_t loc)
 {
 #if _MSVCR_VER <= 90
     TRACE("(%p %Iu %s %p %p %p)\n", str, max, format, mstm, time_data, loc);
@@ -1582,7 +1582,7 @@ static MSVCRT_size_t strftime_helper(char *str, MSVCRT_size_t max, const char *f
  *     _strftime_l (MSVCR80.@)
  */
 MSVCRT_size_t CDECL MSVCRT__strftime_l( char *str, MSVCRT_size_t max, const char *format,
-        const struct MSVCRT_tm *mstm, MSVCRT__locale_t loc )
+        const struct MSVCRT_tm *mstm, _locale_t loc )
 {
     return strftime_helper(str, max, format, mstm, NULL, loc);
 }
@@ -1608,7 +1608,7 @@ MSVCRT_size_t CDECL MSVCRT_strftime( char *str, MSVCRT_size_t max, const char *f
 
 static MSVCRT_size_t wcsftime_helper( MSVCRT_wchar_t *str, MSVCRT_size_t max,
         const MSVCRT_wchar_t *format, const struct MSVCRT_tm *mstm,
-        __lc_time_data *time_data, MSVCRT__locale_t loc )
+        __lc_time_data *time_data, _locale_t loc )
 {
 #if _MSVCR_VER <= 90
     char *s, *fmt;
@@ -1640,7 +1640,7 @@ static MSVCRT_size_t wcsftime_helper( MSVCRT_wchar_t *str, MSVCRT_size_t max,
  *              _wcsftime_l (MSVCRT.@)
  */
 MSVCRT_size_t CDECL MSVCRT__wcsftime_l( MSVCRT_wchar_t *str, MSVCRT_size_t max,
-        const MSVCRT_wchar_t *format, const struct MSVCRT_tm *mstm, MSVCRT__locale_t loc )
+        const MSVCRT_wchar_t *format, const struct MSVCRT_tm *mstm, _locale_t loc )
 {
     return wcsftime_helper(str, max, format, mstm, NULL, loc);
 }
diff --git a/dlls/msvcrt/wcs.c b/dlls/msvcrt/wcs.c
index d60fb9a2adc..54886ac5b64 100644
--- a/dlls/msvcrt/wcs.c
+++ b/dlls/msvcrt/wcs.c
@@ -88,7 +88,7 @@ MSVCRT_wchar_t* CDECL MSVCRT__wcsdup( const MSVCRT_wchar_t* str )
 /*********************************************************************
  *              _towlower_l (MSVCRT.@)
  */
-int CDECL MSVCRT__towlower_l(MSVCRT_wint_t c, MSVCRT__locale_t locale)
+int CDECL MSVCRT__towlower_l(MSVCRT_wint_t c, _locale_t locale)
 {
     pthreadlocinfo locinfo;
     MSVCRT_wchar_t ret;
@@ -117,9 +117,9 @@ int CDECL MSVCRT_towlower(MSVCRT_wint_t c)
     return MSVCRT__towlower_l(c, NULL);
 }
 
-INT CDECL MSVCRT__wcsicmp_l(const MSVCRT_wchar_t *str1, const MSVCRT_wchar_t *str2, MSVCRT__locale_t locale)
+INT CDECL MSVCRT__wcsicmp_l(const MSVCRT_wchar_t *str1, const MSVCRT_wchar_t *str2, _locale_t locale)
 {
-    MSVCRT__locale_tstruct tmp = {0};
+    _locale_tstruct tmp = {0};
     MSVCRT_wchar_t c1, c2;
 
     if(!MSVCRT_CHECK_PMT(str1 != NULL) || !MSVCRT_CHECK_PMT(str2 != NULL))
@@ -160,9 +160,9 @@ INT CDECL MSVCRT__wcsicmp( const MSVCRT_wchar_t* str1, const MSVCRT_wchar_t* str
  *              _wcsnicmp_l (MSVCRT.@)
  */
 INT CDECL MSVCRT__wcsnicmp_l(const MSVCRT_wchar_t *str1, const MSVCRT_wchar_t *str2,
-        MSVCRT_size_t n, MSVCRT__locale_t locale)
+        MSVCRT_size_t n, _locale_t locale)
 {
-    MSVCRT__locale_tstruct tmp = {0};
+    _locale_tstruct tmp = {0};
     MSVCRT_wchar_t c1, c2;
 
     if (!n)
@@ -195,7 +195,7 @@ INT CDECL MSVCRT__wcsnicmp(const MSVCRT_wchar_t *str1, const MSVCRT_wchar_t *str
 /*********************************************************************
  *              _wcsicoll_l (MSVCRT.@)
  */
-int CDECL MSVCRT__wcsicoll_l(const MSVCRT_wchar_t* str1, const MSVCRT_wchar_t* str2, MSVCRT__locale_t locale)
+int CDECL MSVCRT__wcsicoll_l(const MSVCRT_wchar_t* str1, const MSVCRT_wchar_t* str2, _locale_t locale)
 {
     pthreadlocinfo locinfo;
 
@@ -237,7 +237,7 @@ INT CDECL MSVCRT__wcsicoll( const MSVCRT_wchar_t* str1, const MSVCRT_wchar_t* st
  *              _wcsnicoll_l (MSVCRT.@)
  */
 int CDECL MSVCRT__wcsnicoll_l(const MSVCRT_wchar_t* str1, const MSVCRT_wchar_t* str2,
-			      MSVCRT_size_t count, MSVCRT__locale_t locale)
+			      MSVCRT_size_t count, _locale_t locale)
 {
     pthreadlocinfo locinfo;
 
@@ -363,9 +363,9 @@ MSVCRT_wchar_t* CDECL MSVCRT__wcsset( MSVCRT_wchar_t* str, MSVCRT_wchar_t c )
  *		_wcsupr_s_l (MSVCRT.@)
  */
 int CDECL MSVCRT__wcsupr_s_l( MSVCRT_wchar_t* str, MSVCRT_size_t n,
-   MSVCRT__locale_t locale )
+   _locale_t locale )
 {
-  MSVCRT__locale_tstruct tmp = {0};
+  _locale_tstruct tmp = {0};
   MSVCRT_wchar_t* ptr = str;
 
   if (!str || !n)
@@ -410,7 +410,7 @@ INT CDECL MSVCRT__wcsupr_s( MSVCRT_wchar_t* str, MSVCRT_size_t n )
 /******************************************************************
  *              _wcsupr_l (MSVCRT.@)
  */
-MSVCRT_wchar_t* CDECL MSVCRT__wcsupr_l( MSVCRT_wchar_t *str, MSVCRT__locale_t locale )
+MSVCRT_wchar_t* CDECL MSVCRT__wcsupr_l( MSVCRT_wchar_t *str, _locale_t locale )
 {
     MSVCRT__wcsupr_s_l( str, -1, locale);
     return str;
@@ -427,9 +427,9 @@ MSVCRT_wchar_t* CDECL MSVCRT__wcsupr( MSVCRT_wchar_t *str )
 /******************************************************************
  *		_wcslwr_s_l (MSVCRT.@)
  */
-int CDECL MSVCRT__wcslwr_s_l( MSVCRT_wchar_t* str, MSVCRT_size_t n, MSVCRT__locale_t locale )
+int CDECL MSVCRT__wcslwr_s_l( MSVCRT_wchar_t* str, MSVCRT_size_t n, _locale_t locale )
 {
-  MSVCRT__locale_tstruct tmp = {0};
+  _locale_tstruct tmp = {0};
   MSVCRT_wchar_t* ptr = str;
 
   if (!str || !n)
@@ -473,7 +473,7 @@ int CDECL MSVCRT__wcslwr_s( MSVCRT_wchar_t* str, MSVCRT_size_t n )
 /******************************************************************
  *		_wcslwr_l (MSVCRT.@)
  */
-MSVCRT_wchar_t* CDECL MSVCRT__wcslwr_l( MSVCRT_wchar_t* str, MSVCRT__locale_t locale )
+MSVCRT_wchar_t* CDECL MSVCRT__wcslwr_l( MSVCRT_wchar_t* str, _locale_t locale )
 {
     MSVCRT__wcslwr_s_l(str, -1, locale);
     return str;
@@ -507,7 +507,7 @@ int CDECL MSVCRT_wcsncmp(const MSVCRT_wchar_t *str1, const MSVCRT_wchar_t *str2,
  *              _wcsncoll_l (MSVCRT.@)
  */
 int CDECL MSVCRT__wcsncoll_l(const MSVCRT_wchar_t* str1, const MSVCRT_wchar_t* str2,
-			      MSVCRT_size_t count, MSVCRT__locale_t locale)
+			      MSVCRT_size_t count, _locale_t locale)
 {
     pthreadlocinfo locinfo;
 
@@ -548,7 +548,7 @@ static void strtod_wstr_unget(void *ctx)
  *		_wcstod_l (MSVCRT.@)
  */
 double CDECL MSVCRT__wcstod_l(const MSVCRT_wchar_t* str, MSVCRT_wchar_t** end,
-        MSVCRT__locale_t locale)
+        _locale_t locale)
 {
     pthreadlocinfo locinfo;
     const MSVCRT_wchar_t *beg, *p;
@@ -583,7 +583,7 @@ double CDECL MSVCRT__wcstod_l(const MSVCRT_wchar_t* str, MSVCRT_wchar_t** end,
  * wcsrtombs_l (INTERNAL)
  */
 static MSVCRT_size_t MSVCRT_wcsrtombs_l(char *mbstr, const MSVCRT_wchar_t **wcstr,
-        MSVCRT_size_t count, MSVCRT__locale_t locale)
+        MSVCRT_size_t count, _locale_t locale)
 {
     pthreadlocinfo locinfo;
     MSVCRT_size_t tmp = 0;
@@ -654,7 +654,7 @@ static MSVCRT_size_t MSVCRT_wcsrtombs_l(char *mbstr, const MSVCRT_wchar_t **wcst
  *		_wcstombs_l (MSVCRT.@)
  */
 MSVCRT_size_t CDECL MSVCRT__wcstombs_l(char *mbstr, const MSVCRT_wchar_t *wcstr,
-        MSVCRT_size_t count, MSVCRT__locale_t locale)
+        MSVCRT_size_t count, _locale_t locale)
 {
     return MSVCRT_wcsrtombs_l(mbstr, &wcstr, count, locale);
 }
@@ -685,7 +685,7 @@ MSVCRT_size_t CDECL MSVCRT_wcsrtombs(char *mbstr, const MSVCRT_wchar_t **wcstr,
  */
 static int MSVCRT_wcsrtombs_s_l(MSVCRT_size_t *ret, char *mbstr,
         MSVCRT_size_t size, const MSVCRT_wchar_t **wcstr,
-        MSVCRT_size_t count, MSVCRT__locale_t locale)
+        MSVCRT_size_t count, _locale_t locale)
 {
     MSVCRT_size_t conv;
     int err;
@@ -740,7 +740,7 @@ static int MSVCRT_wcsrtombs_s_l(MSVCRT_size_t *ret, char *mbstr,
  */
 int CDECL MSVCRT__wcstombs_s_l(MSVCRT_size_t *ret, char *mbstr,
         MSVCRT_size_t size, const MSVCRT_wchar_t *wcstr,
-        MSVCRT_size_t count, MSVCRT__locale_t locale)
+        MSVCRT_size_t count, _locale_t locale)
 {
     return MSVCRT_wcsrtombs_s_l(ret, mbstr, size, &wcstr,count, locale);
 }
@@ -785,7 +785,7 @@ double CDECL MSVCRT__wtof(const MSVCRT_wchar_t *str)
 /*********************************************************************
  *		_wtof_l (MSVCRT.@)
  */
-double CDECL MSVCRT__wtof_l(const MSVCRT_wchar_t *str, MSVCRT__locale_t locale)
+double CDECL MSVCRT__wtof_l(const MSVCRT_wchar_t *str, _locale_t locale)
 {
     return MSVCRT__wcstod_l(str, NULL, locale);
 }
@@ -795,7 +795,7 @@ double CDECL MSVCRT__wtof_l(const MSVCRT_wchar_t *str, MSVCRT__locale_t locale)
 /*********************************************************************
  *              _wcstof_l  (MSVCR120.@)
  */
-float CDECL MSVCRT__wcstof_l( const MSVCRT_wchar_t *str, MSVCRT_wchar_t **end, MSVCRT__locale_t locale )
+float CDECL MSVCRT__wcstof_l( const MSVCRT_wchar_t *str, MSVCRT_wchar_t **end, _locale_t locale )
 {
     return MSVCRT__wcstod_l(str, end, locale);
 }
@@ -894,7 +894,7 @@ int CDECL __stdio_common_vsprintf( unsigned __int64 options, char *str, size_t l
     if (options & ~UCRTBASE_PRINTF_MASK)
         FIXME("options %s not handled\n", wine_dbgstr_longlong(options));
     ret = pf_printf_a(puts_clbk_str_c99_a,
-            &ctx, format, (MSVCRT__locale_t)locale, options & UCRTBASE_PRINTF_MASK, arg_clbk_valist, NULL, &valist);
+            &ctx, format, (_locale_t)locale, options & UCRTBASE_PRINTF_MASK, arg_clbk_valist, NULL, &valist);
     puts_clbk_str_a(&ctx, 1, &nullbyte);
 
     if(!str)
@@ -916,7 +916,7 @@ int CDECL __stdio_common_vsprintf( unsigned __int64 options, char *str, size_t l
  *		_vsnprintf_l (MSVCRT.@)
  */
 int CDECL MSVCRT_vsnprintf_l( char *str, MSVCRT_size_t len, const char *format,
-                            MSVCRT__locale_t locale, __ms_va_list valist )
+                            _locale_t locale, __ms_va_list valist )
 {
     static const char nullbyte = '\0';
     struct _str_ctx_a ctx = {len, str};
@@ -932,7 +932,7 @@ int CDECL MSVCRT_vsnprintf_l( char *str, MSVCRT_size_t len, const char *format,
  *		_vsprintf_l (MSVCRT.@)
  */
 int CDECL MSVCRT_vsprintf_l( char *str, const char *format,
-                            MSVCRT__locale_t locale, __ms_va_list valist )
+                            _locale_t locale, __ms_va_list valist )
 {
     return MSVCRT_vsnprintf_l(str, INT_MAX, format, locale, valist);
 }
@@ -941,7 +941,7 @@ int CDECL MSVCRT_vsprintf_l( char *str, const char *format,
  *		_sprintf_l (MSVCRT.@)
  */
 int WINAPIV MSVCRT_sprintf_l(char *str, const char *format,
-                           MSVCRT__locale_t locale, ...)
+                           _locale_t locale, ...)
 {
     int retval;
     __ms_va_list valist;
@@ -953,7 +953,7 @@ int WINAPIV MSVCRT_sprintf_l(char *str, const char *format,
 
 static int CDECL MSVCRT_vsnprintf_s_l_opt( char *str, MSVCRT_size_t sizeOfBuffer,
         MSVCRT_size_t count, const char *format, DWORD options,
-        MSVCRT__locale_t locale, __ms_va_list valist )
+        _locale_t locale, __ms_va_list valist )
 {
     static const char nullbyte = '\0';
     struct _str_ctx_a ctx;
@@ -985,7 +985,7 @@ static int CDECL MSVCRT_vsnprintf_s_l_opt( char *str, MSVCRT_size_t sizeOfBuffer
 
 static int MSVCRT_vsnwprintf_s_l_opt( MSVCRT_wchar_t *str, MSVCRT_size_t sizeOfBuffer,
         MSVCRT_size_t count, const MSVCRT_wchar_t *format, DWORD options,
-        MSVCRT__locale_t locale, __ms_va_list valist)
+        _locale_t locale, __ms_va_list valist)
 {
     static const MSVCRT_wchar_t nullbyte = '\0';
     struct _str_ctx_w ctx;
@@ -1019,7 +1019,7 @@ static int MSVCRT_vsnwprintf_s_l_opt( MSVCRT_wchar_t *str, MSVCRT_size_t sizeOfB
  */
 int CDECL MSVCRT_vsnprintf_s_l( char *str, MSVCRT_size_t sizeOfBuffer,
         MSVCRT_size_t count, const char *format,
-        MSVCRT__locale_t locale, __ms_va_list valist )
+        _locale_t locale, __ms_va_list valist )
 {
     return MSVCRT_vsnprintf_s_l_opt(str, sizeOfBuffer, count, format, 0, locale, valist);
 }
@@ -1028,7 +1028,7 @@ int CDECL MSVCRT_vsnprintf_s_l( char *str, MSVCRT_size_t sizeOfBuffer,
  *		_vsprintf_s_l (MSVCRT.@)
  */
 int CDECL MSVCRT_vsprintf_s_l( char *str, MSVCRT_size_t count, const char *format,
-                               MSVCRT__locale_t locale, __ms_va_list valist )
+                               _locale_t locale, __ms_va_list valist )
 {
     return MSVCRT_vsnprintf_s_l(str, INT_MAX, count, format, locale, valist);
 }
@@ -1037,7 +1037,7 @@ int CDECL MSVCRT_vsprintf_s_l( char *str, MSVCRT_size_t count, const char *forma
  *		_sprintf_s_l (MSVCRT.@)
  */
 int WINAPIV MSVCRT_sprintf_s_l( char *str, MSVCRT_size_t count, const char *format,
-                                MSVCRT__locale_t locale, ...)
+                                _locale_t locale, ...)
 {
     int retval;
     __ms_va_list valist;
@@ -1060,7 +1060,7 @@ int CDECL MSVCRT_vsnprintf_s( char *str, MSVCRT_size_t sizeOfBuffer,
  *              _vsnprintf_c_l (MSVCRT.@)
  */
 int CDECL MSVCRT_vsnprintf_c_l(char *str, MSVCRT_size_t len, const char *format,
-        MSVCRT__locale_t locale, __ms_va_list valist)
+        _locale_t locale, __ms_va_list valist)
 {
     return MSVCRT_vsnprintf_s_l_opt(str, len, len, format, 0, locale, valist);
 }
@@ -1081,7 +1081,7 @@ int CDECL MSVCRT_vsnprintf_c(char *str, MSVCRT_size_t len,
  */
 int CDECL MSVCRT__stdio_common_vsnprintf_s( unsigned __int64 options,
         char *str, MSVCRT_size_t sizeOfBuffer, MSVCRT_size_t count,
-        const char *format, MSVCRT__locale_t locale, __ms_va_list valist )
+        const char *format, _locale_t locale, __ms_va_list valist )
 {
     if (options & ~UCRTBASE_PRINTF_MASK)
         FIXME("options %s not handled\n", wine_dbgstr_longlong(options));
@@ -1093,7 +1093,7 @@ int CDECL MSVCRT__stdio_common_vsnprintf_s( unsigned __int64 options,
  */
 int CDECL MSVCRT__stdio_common_vsnwprintf_s( unsigned __int64 options,
         MSVCRT_wchar_t *str, MSVCRT_size_t sizeOfBuffer, MSVCRT_size_t count,
-        const MSVCRT_wchar_t *format, MSVCRT__locale_t locale, __ms_va_list valist )
+        const MSVCRT_wchar_t *format, _locale_t locale, __ms_va_list valist )
 {
     if (options & ~UCRTBASE_PRINTF_MASK)
         FIXME("options %s not handled\n", wine_dbgstr_longlong(options));
@@ -1105,7 +1105,7 @@ int CDECL MSVCRT__stdio_common_vsnwprintf_s( unsigned __int64 options,
  */
 int CDECL MSVCRT__stdio_common_vswprintf_s( unsigned __int64 options,
         MSVCRT_wchar_t *str, MSVCRT_size_t count, const MSVCRT_wchar_t *format,
-        MSVCRT__locale_t locale, __ms_va_list valist )
+        _locale_t locale, __ms_va_list valist )
 {
     return MSVCRT__stdio_common_vsnwprintf_s(options, str, INT_MAX, count, format, locale, valist);
 }
@@ -1115,7 +1115,7 @@ int CDECL MSVCRT__stdio_common_vswprintf_s( unsigned __int64 options,
  */
 int CDECL MSVCRT__stdio_common_vsprintf_s( unsigned __int64 options,
         char *str, MSVCRT_size_t count, const char *format,
-        MSVCRT__locale_t locale, __ms_va_list valist )
+        _locale_t locale, __ms_va_list valist )
 {
     if (options & ~UCRTBASE_PRINTF_MASK)
         FIXME("options %s not handled\n", wine_dbgstr_longlong(options));
@@ -1152,7 +1152,7 @@ int CDECL MSVCRT__vscprintf( const char *format, __ms_va_list valist )
  *              _vscprintf_l (MSVCRT.@)
  */
 int CDECL MSVCRT__vscprintf_l(const char *format,
-        MSVCRT__locale_t locale, __ms_va_list valist)
+        _locale_t locale, __ms_va_list valist)
 {
     return MSVCRT_vsnprintf_l(NULL, INT_MAX, format, locale, valist);
 }
@@ -1161,7 +1161,7 @@ int CDECL MSVCRT__vscprintf_l(const char *format,
  *		_vscprintf_p_l (MSVCRT.@)
  */
 int CDECL MSVCRT__vscprintf_p_l(const char *format,
-        MSVCRT__locale_t locale, __ms_va_list args)
+        _locale_t locale, __ms_va_list args)
 {
     printf_arg args_ctx[MSVCRT__ARGMAX+1];
     struct _str_ctx_a puts_ctx = {INT_MAX, NULL};
@@ -1212,7 +1212,7 @@ int WINAPIV MSVCRT__snprintf(char *str, MSVCRT_size_t len, const char *format, .
  *		_snprintf_l (MSVCRT.@)
  */
 int WINAPIV MSVCRT__snprintf_l(char *str, MSVCRT_size_t count, const char *format,
-        MSVCRT__locale_t locale, ...)
+        _locale_t locale, ...)
 {
     int retval;
     __ms_va_list valist;
@@ -1226,7 +1226,7 @@ int WINAPIV MSVCRT__snprintf_l(char *str, MSVCRT_size_t count, const char *forma
  *              _snprintf_c_l (MSVCRT.@)
  */
 int WINAPIV MSVCRT_snprintf_c_l(char *str, MSVCRT_size_t count, const char *format,
-        MSVCRT__locale_t locale, ...)
+        _locale_t locale, ...)
 {
     int retval;
     __ms_va_list valist;
@@ -1253,7 +1253,7 @@ int WINAPIV MSVCRT_snprintf_c(char *str, MSVCRT_size_t count, const char *format
  *              _snprintf_s_l (MSVCRT.@)
  */
 int WINAPIV MSVCRT_snprintf_s_l(char *str, MSVCRT_size_t len, MSVCRT_size_t count,
-        const char *format, MSVCRT__locale_t locale, ...)
+        const char *format, _locale_t locale, ...)
 {
     int retval;
     __ms_va_list valist;
@@ -1310,7 +1310,7 @@ int CDECL MSVCRT_vsnwprintf(MSVCRT_wchar_t *str, MSVCRT_size_t len,
  *              _vsnwprintf_l (MSVCRT.@)
  */
 int CDECL MSVCRT_vsnwprintf_l(MSVCRT_wchar_t *str, MSVCRT_size_t len,
-        const MSVCRT_wchar_t *format, MSVCRT__locale_t locale,
+        const MSVCRT_wchar_t *format, _locale_t locale,
         __ms_va_list valist)
 {
     static const MSVCRT_wchar_t nullbyte = '\0';
@@ -1327,7 +1327,7 @@ int CDECL MSVCRT_vsnwprintf_l(MSVCRT_wchar_t *str, MSVCRT_size_t len,
  *              _vswprintf_c_l (MSVCRT.@)
  */
 int CDECL MSVCRT_vswprintf_c_l(MSVCRT_wchar_t *str, MSVCRT_size_t len,
-        const MSVCRT_wchar_t *format, MSVCRT__locale_t locale,
+        const MSVCRT_wchar_t *format, _locale_t locale,
         __ms_va_list valist)
 {
     return MSVCRT_vsnwprintf_s_l_opt(str, len, len, format, 0, locale, valist);
@@ -1343,7 +1343,7 @@ int CDECL MSVCRT_vswprintf_c(MSVCRT_wchar_t *str, MSVCRT_size_t len,
 }
 
 static int MSVCRT_vswprintf_p_l_opt(MSVCRT_wchar_t *buffer, MSVCRT_size_t length,
-        const MSVCRT_wchar_t *format, DWORD options, MSVCRT__locale_t locale, __ms_va_list args)
+        const MSVCRT_wchar_t *format, DWORD options, _locale_t locale, __ms_va_list args)
 {
     static const MSVCRT_wchar_t nullbyte = '\0';
     printf_arg args_ctx[MSVCRT__ARGMAX+1];
@@ -1373,7 +1373,7 @@ static int MSVCRT_vswprintf_p_l_opt(MSVCRT_wchar_t *buffer, MSVCRT_size_t length
  *		_vswprintf_p_l (MSVCRT.@)
  */
 int CDECL MSVCRT_vswprintf_p_l(MSVCRT_wchar_t *buffer, MSVCRT_size_t length,
-        const MSVCRT_wchar_t *format, MSVCRT__locale_t locale, __ms_va_list args)
+        const MSVCRT_wchar_t *format, _locale_t locale, __ms_va_list args)
 {
     return MSVCRT_vswprintf_p_l_opt(buffer, length, format, 0, locale, args);
 }
@@ -1395,7 +1395,7 @@ int CDECL MSVCRT__vswprintf_p(MSVCRT_wchar_t *buffer, MSVCRT_size_t length,
  */
 int CDECL MSVCRT__stdio_common_vswprintf_p( unsigned __int64 options,
         MSVCRT_wchar_t *str, MSVCRT_size_t count, const MSVCRT_wchar_t *format,
-        MSVCRT__locale_t locale, __ms_va_list valist )
+        _locale_t locale, __ms_va_list valist )
 {
     if (options & ~UCRTBASE_PRINTF_MASK)
         FIXME("options %s not handled\n", wine_dbgstr_longlong(options));
@@ -1408,7 +1408,7 @@ int CDECL MSVCRT__stdio_common_vswprintf_p( unsigned __int64 options,
  */
 int CDECL MSVCRT_vsnwprintf_s_l( MSVCRT_wchar_t *str, MSVCRT_size_t sizeOfBuffer,
         MSVCRT_size_t count, const MSVCRT_wchar_t *format,
-        MSVCRT__locale_t locale, __ms_va_list valist)
+        _locale_t locale, __ms_va_list valist)
 {
     return MSVCRT_vsnwprintf_s_l_opt(str, sizeOfBuffer, count, format, 0, locale, valist);
 }
@@ -1440,7 +1440,7 @@ int WINAPIV MSVCRT__snwprintf( MSVCRT_wchar_t *str, MSVCRT_size_t len, const MSV
  *		_snwprintf_l (MSVCRT.@)
  */
 int WINAPIV MSVCRT__snwprintf_l( MSVCRT_wchar_t *str, MSVCRT_size_t len, const MSVCRT_wchar_t *format,
-        MSVCRT__locale_t locale, ...)
+        _locale_t locale, ...)
 {
     int retval;
     __ms_va_list valist;
@@ -1468,7 +1468,7 @@ int WINAPIV MSVCRT__snwprintf_s( MSVCRT_wchar_t *str, MSVCRT_size_t len, MSVCRT_
  *              _snwprintf_s_l (MSVCRT.@)
  */
 int WINAPIV MSVCRT__snwprintf_s_l( MSVCRT_wchar_t *str, MSVCRT_size_t len, MSVCRT_size_t count,
-        const MSVCRT_wchar_t *format, MSVCRT__locale_t locale, ... )
+        const MSVCRT_wchar_t *format, _locale_t locale, ... )
 {
     int retval;
     __ms_va_list valist;
@@ -1505,7 +1505,7 @@ static int puts_clbk_str_c99_w(void *ctx, int len, const MSVCRT_wchar_t *str)
  */
 int CDECL MSVCRT__stdio_common_vswprintf( unsigned __int64 options,
         MSVCRT_wchar_t *str, MSVCRT_size_t len, const MSVCRT_wchar_t *format,
-        MSVCRT__locale_t locale, __ms_va_list valist )
+        _locale_t locale, __ms_va_list valist )
 {
     static const MSVCRT_wchar_t nullbyte = '\0';
     struct _str_ctx_w ctx = {len, str};
@@ -1608,7 +1608,7 @@ int WINAPIV MSVCRT_swprintf_s(MSVCRT_wchar_t *str, MSVCRT_size_t numberOfElement
  *              _swprintf_s_l (MSVCRT.@)
  */
 int WINAPIV MSVCRT__swprintf_s_l(MSVCRT_wchar_t *str, MSVCRT_size_t numberOfElements,
-        const MSVCRT_wchar_t *format, MSVCRT__locale_t locale, ... )
+        const MSVCRT_wchar_t *format, _locale_t locale, ... )
 {
     __ms_va_list ap;
     int r;
@@ -1624,7 +1624,7 @@ int WINAPIV MSVCRT__swprintf_s_l(MSVCRT_wchar_t *str, MSVCRT_size_t numberOfElem
  *              _swprintf_c_l (MSVCRT.@)
  */
 int WINAPIV MSVCRT_swprintf_c_l(MSVCRT_wchar_t *str, MSVCRT_size_t len,
-        const MSVCRT_wchar_t *format, MSVCRT__locale_t locale, ... )
+        const MSVCRT_wchar_t *format, _locale_t locale, ... )
 {
     __ms_va_list ap;
     int r;
@@ -1664,7 +1664,7 @@ int CDECL MSVCRT_vswprintf( MSVCRT_wchar_t* str, const MSVCRT_wchar_t* format, _
  *		_vswprintf (MSVCRT.@)
  */
 int CDECL MSVCRT_vswprintf_l( MSVCRT_wchar_t* str, const MSVCRT_wchar_t* format,
-        MSVCRT__locale_t locale, __ms_va_list args )
+        _locale_t locale, __ms_va_list args )
 {
     return MSVCRT_vsnwprintf_l( str, INT_MAX, format, locale, args );
 }
@@ -1680,7 +1680,7 @@ int CDECL MSVCRT__vscwprintf( const MSVCRT_wchar_t *format, __ms_va_list args )
 /*********************************************************************
  *		_vscwprintf_l (MSVCRT.@)
  */
-int CDECL MSVCRT__vscwprintf_l( const MSVCRT_wchar_t *format, MSVCRT__locale_t locale, __ms_va_list args )
+int CDECL MSVCRT__vscwprintf_l( const MSVCRT_wchar_t *format, _locale_t locale, __ms_va_list args )
 {
     return MSVCRT_vsnwprintf_l( NULL, INT_MAX, format, locale, args );
 }
@@ -1688,7 +1688,7 @@ int CDECL MSVCRT__vscwprintf_l( const MSVCRT_wchar_t *format, MSVCRT__locale_t l
 /*********************************************************************
  *		_vscwprintf_p_l (MSVCRT.@)
  */
-int CDECL MSVCRT__vscwprintf_p_l( const MSVCRT_wchar_t *format, MSVCRT__locale_t locale, __ms_va_list args )
+int CDECL MSVCRT__vscwprintf_p_l( const MSVCRT_wchar_t *format, _locale_t locale, __ms_va_list args )
 {
     return MSVCRT_vswprintf_p_l_opt( NULL, INT_MAX, format, 0, locale, args );
 }
@@ -1716,14 +1716,14 @@ int CDECL MSVCRT_vswprintf_s(MSVCRT_wchar_t* str, MSVCRT_size_t numberOfElements
  *              _vswprintf_s_l (MSVCRT.@)
  */
 int CDECL MSVCRT_vswprintf_s_l(MSVCRT_wchar_t* str, MSVCRT_size_t numberOfElements,
-        const MSVCRT_wchar_t* format, MSVCRT__locale_t locale, __ms_va_list args)
+        const MSVCRT_wchar_t* format, _locale_t locale, __ms_va_list args)
 {
     return MSVCRT_vsnwprintf_s_l(str, numberOfElements, INT_MAX,
             format, locale, args );
 }
 
 static int MSVCRT_vsprintf_p_l_opt(char *buffer, MSVCRT_size_t length, const char *format,
-        DWORD options, MSVCRT__locale_t locale, __ms_va_list args)
+        DWORD options, _locale_t locale, __ms_va_list args)
 {
     static const char nullbyte = '\0';
     printf_arg args_ctx[MSVCRT__ARGMAX+1];
@@ -1753,7 +1753,7 @@ static int MSVCRT_vsprintf_p_l_opt(char *buffer, MSVCRT_size_t length, const cha
  *              _vsprintf_p_l (MSVCRT.@)
  */
 int CDECL MSVCRT_vsprintf_p_l(char *buffer, MSVCRT_size_t length, const char *format,
-        MSVCRT__locale_t locale, __ms_va_list args)
+        _locale_t locale, __ms_va_list args)
 {
     return MSVCRT_vsprintf_p_l_opt(buffer, length, format, 0, locale, args);
 }
@@ -1772,7 +1772,7 @@ int CDECL MSVCRT_vsprintf_p(char *buffer, MSVCRT_size_t length,
  *              __stdio_common_vsprintf_p (UCRTBASE.@)
  */
 int CDECL MSVCRT__stdio_common_vsprintf_p(unsigned __int64 options, char *buffer, MSVCRT_size_t length,
-        const char *format, MSVCRT__locale_t locale, __ms_va_list args)
+        const char *format, _locale_t locale, __ms_va_list args)
 {
     if (options & ~UCRTBASE_PRINTF_MASK)
         FIXME("options %s not handled\n", wine_dbgstr_longlong(options));
@@ -1784,7 +1784,7 @@ int CDECL MSVCRT__stdio_common_vsprintf_p(unsigned __int64 options, char *buffer
  *		_sprintf_p_l (MSVCRT.@)
  */
 int WINAPIV MSVCRT_sprintf_p_l(char *buffer, MSVCRT_size_t length,
-        const char *format, MSVCRT__locale_t locale, ...)
+        const char *format, _locale_t locale, ...)
 {
     __ms_va_list valist;
     int r;
@@ -1800,7 +1800,7 @@ int WINAPIV MSVCRT_sprintf_p_l(char *buffer, MSVCRT_size_t length,
  *		__swprintf_l (MSVCRT.@)
  */
 int WINAPIV MSVCRT___swprintf_l( MSVCRT_wchar_t *str, const MSVCRT_wchar_t *format,
-        MSVCRT__locale_t locale, ...)
+        _locale_t locale, ...)
 {
     int retval;
     __ms_va_list valist;
@@ -1831,7 +1831,7 @@ int WINAPIV MSVCRT__sprintf_p(char *buffer, MSVCRT_size_t length, const char *fo
  *		_swprintf_p_l (MSVCRT.@)
  */
 int WINAPIV MSVCRT_swprintf_p_l(MSVCRT_wchar_t *buffer, MSVCRT_size_t length,
-        const MSVCRT_wchar_t *format, MSVCRT__locale_t locale, ...)
+        const MSVCRT_wchar_t *format, _locale_t locale, ...)
 {
     __ms_va_list valist;
     int r;
@@ -1864,7 +1864,7 @@ int CDECL MSVCRT_wcscmp(const MSVCRT_wchar_t *str1, const MSVCRT_wchar_t *str2)
 /*********************************************************************
  *              _wcscoll_l (MSVCRT.@)
  */
-int CDECL MSVCRT__wcscoll_l(const MSVCRT_wchar_t* str1, const MSVCRT_wchar_t* str2, MSVCRT__locale_t locale)
+int CDECL MSVCRT__wcscoll_l(const MSVCRT_wchar_t* str1, const MSVCRT_wchar_t* str2, _locale_t locale)
 {
     pthreadlocinfo locinfo;
 
@@ -1945,7 +1945,7 @@ MSVCRT_wchar_t * CDECL MSVCRT_wcstok( MSVCRT_wchar_t *str, const MSVCRT_wchar_t
  *		_wctomb_s_l (MSVCRT.@)
  */
 int CDECL MSVCRT__wctomb_s_l(int *len, char *mbchar, MSVCRT_size_t size,
-        MSVCRT_wchar_t wch, MSVCRT__locale_t locale)
+        MSVCRT_wchar_t wch, _locale_t locale)
 {
     pthreadlocinfo locinfo;
     BOOL error = FALSE;
@@ -2017,7 +2017,7 @@ int CDECL MSVCRT_wctomb_s(int *len, char *mbchar, MSVCRT_size_t size, MSVCRT_wch
 /*********************************************************************
  *              _wctomb_l (MSVCRT.@)
  */
-int CDECL MSVCRT__wctomb_l(char *dst, MSVCRT_wchar_t ch, MSVCRT__locale_t locale)
+int CDECL MSVCRT__wctomb_l(char *dst, MSVCRT_wchar_t ch, _locale_t locale)
 {
     int len;
 
@@ -2082,7 +2082,7 @@ MSVCRT_size_t CDECL MSVCRT_wcrtomb( char *dst, MSVCRT_wchar_t ch, MSVCRT_mbstate
 /*********************************************************************
  *		_iswctype_l (MSVCRT.@)
  */
-INT CDECL MSVCRT__iswctype_l( MSVCRT_wchar_t wc, wctype_t type, MSVCRT__locale_t locale )
+INT CDECL MSVCRT__iswctype_l( MSVCRT_wchar_t wc, wctype_t type, _locale_t locale )
 {
     WORD ct;
 
@@ -2108,7 +2108,7 @@ INT CDECL MSVCRT_iswctype( MSVCRT_wchar_t wc, wctype_t type )
 /*********************************************************************
  *		_iswalnum_l (MSVCRT.@)
  */
-int CDECL MSVCRT__iswalnum_l( MSVCRT_wchar_t wc, MSVCRT__locale_t locale )
+int CDECL MSVCRT__iswalnum_l( MSVCRT_wchar_t wc, _locale_t locale )
 {
     return MSVCRT__iswctype_l( wc, MSVCRT__ALPHA | MSVCRT__DIGIT, locale );
 }
@@ -2124,7 +2124,7 @@ INT CDECL MSVCRT_iswalnum( MSVCRT_wchar_t wc )
 /*********************************************************************
  *              iswalpha_l (MSVCRT.@)
  */
-INT CDECL MSVCRT__iswalpha_l( MSVCRT_wchar_t wc, MSVCRT__locale_t locale )
+INT CDECL MSVCRT__iswalpha_l( MSVCRT_wchar_t wc, _locale_t locale )
 {
     return MSVCRT__iswctype_l( wc, MSVCRT__ALPHA, locale );
 }
@@ -2140,7 +2140,7 @@ INT CDECL MSVCRT_iswalpha( MSVCRT_wchar_t wc )
 /*********************************************************************
  *		_iswcntrl_l (MSVCRT.@)
  */
-int CDECL MSVCRT__iswcntrl_l( MSVCRT_wchar_t wc, MSVCRT__locale_t locale )
+int CDECL MSVCRT__iswcntrl_l( MSVCRT_wchar_t wc, _locale_t locale )
 {
     return MSVCRT__iswctype_l( wc, MSVCRT__CONTROL, locale );
 }
@@ -2156,7 +2156,7 @@ INT CDECL MSVCRT_iswcntrl( MSVCRT_wchar_t wc )
 /*********************************************************************
  *		_iswdigit_l (MSVCRT.@)
  */
-INT CDECL MSVCRT__iswdigit_l( MSVCRT_wchar_t wc, MSVCRT__locale_t locale )
+INT CDECL MSVCRT__iswdigit_l( MSVCRT_wchar_t wc, _locale_t locale )
 {
     return MSVCRT__iswctype_l( wc, MSVCRT__DIGIT, locale );
 }
@@ -2172,7 +2172,7 @@ INT CDECL MSVCRT_iswdigit( MSVCRT_wchar_t wc )
 /*********************************************************************
  *		_iswgraph_l (MSVCRT.@)
  */
-int CDECL MSVCRT__iswgraph_l( MSVCRT_wchar_t wc, MSVCRT__locale_t locale )
+int CDECL MSVCRT__iswgraph_l( MSVCRT_wchar_t wc, _locale_t locale )
 {
     return MSVCRT__iswctype_l( wc, MSVCRT__ALPHA | MSVCRT__DIGIT | MSVCRT__PUNCT, locale );
 }
@@ -2188,7 +2188,7 @@ INT CDECL MSVCRT_iswgraph( MSVCRT_wchar_t wc )
 /*********************************************************************
  *		_iswlower_l (MSVCRT.@)
  */
-int CDECL MSVCRT__iswlower_l( MSVCRT_wchar_t wc, MSVCRT__locale_t locale )
+int CDECL MSVCRT__iswlower_l( MSVCRT_wchar_t wc, _locale_t locale )
 {
     return MSVCRT__iswctype_l( wc, MSVCRT__LOWER, locale );
 }
@@ -2204,7 +2204,7 @@ INT CDECL MSVCRT_iswlower( MSVCRT_wchar_t wc )
 /*********************************************************************
  *		_iswprint_l (MSVCRT.@)
  */
-int CDECL MSVCRT__iswprint_l( MSVCRT_wchar_t wc, MSVCRT__locale_t locale )
+int CDECL MSVCRT__iswprint_l( MSVCRT_wchar_t wc, _locale_t locale )
 {
     return MSVCRT__iswctype_l( wc, MSVCRT__ALPHA | MSVCRT__BLANK |
             MSVCRT__DIGIT | MSVCRT__PUNCT, locale );
@@ -2221,7 +2221,7 @@ INT CDECL MSVCRT_iswprint( MSVCRT_wchar_t wc )
 /*********************************************************************
  *		_iswpunct_l (MSVCRT.@)
  */
-INT CDECL MSVCRT__iswpunct_l( MSVCRT_wchar_t wc, MSVCRT__locale_t locale )
+INT CDECL MSVCRT__iswpunct_l( MSVCRT_wchar_t wc, _locale_t locale )
 {
     return MSVCRT__iswctype_l( wc, MSVCRT__PUNCT, locale );
 }
@@ -2237,7 +2237,7 @@ INT CDECL MSVCRT_iswpunct( MSVCRT_wchar_t wc )
 /*********************************************************************
  *		_iswspace_l (MSVCRT.@)
  */
-INT CDECL MSVCRT__iswspace_l( MSVCRT_wchar_t wc, MSVCRT__locale_t locale )
+INT CDECL MSVCRT__iswspace_l( MSVCRT_wchar_t wc, _locale_t locale )
 {
     return MSVCRT__iswctype_l( wc, MSVCRT__SPACE, locale );
 }
@@ -2253,7 +2253,7 @@ INT CDECL MSVCRT_iswspace( MSVCRT_wchar_t wc )
 /*********************************************************************
  *		_iswupper_l (MSVCRT.@)
  */
-int CDECL MSVCRT__iswupper_l( MSVCRT_wchar_t wc, MSVCRT__locale_t locale )
+int CDECL MSVCRT__iswupper_l( MSVCRT_wchar_t wc, _locale_t locale )
 {
     return MSVCRT__iswctype_l( wc, MSVCRT__UPPER, locale );
 }
@@ -2269,7 +2269,7 @@ INT CDECL MSVCRT_iswupper( MSVCRT_wchar_t wc )
 /*********************************************************************
  *		_iswxdigit_l (MSVCRT.@)
  */
-int CDECL MSVCRT__iswxdigit_l( MSVCRT_wchar_t wc, MSVCRT__locale_t locale )
+int CDECL MSVCRT__iswxdigit_l( MSVCRT_wchar_t wc, _locale_t locale )
 {
     return MSVCRT__iswctype_l( wc, MSVCRT__HEX, locale );
 }
@@ -2285,7 +2285,7 @@ INT CDECL MSVCRT_iswxdigit( MSVCRT_wchar_t wc )
 /*********************************************************************
  *		_iswblank_l (MSVCRT.@)
  */
-INT CDECL MSVCRT__iswblank_l( MSVCRT_wchar_t wc, MSVCRT__locale_t locale )
+INT CDECL MSVCRT__iswblank_l( MSVCRT_wchar_t wc, _locale_t locale )
 {
     return wc == '\t' || MSVCRT__iswctype_l( wc, MSVCRT__BLANK, locale );
 }
@@ -2516,7 +2516,7 @@ static int wctoint(WCHAR c, int base)
  * FIXME: locale parameter is ignored
  */
 __int64 CDECL MSVCRT__wcstoi64_l(const MSVCRT_wchar_t *nptr,
-        MSVCRT_wchar_t **endptr, int base, MSVCRT__locale_t locale)
+        MSVCRT_wchar_t **endptr, int base, _locale_t locale)
 {
     BOOL negative = FALSE, empty = TRUE;
     __int64 ret = 0;
@@ -2590,7 +2590,7 @@ __int64 CDECL MSVCRT__wcstoi64(const MSVCRT_wchar_t *nptr,
  *  _wcstol_l (MSVCRT.@)
  */
 MSVCRT_long CDECL MSVCRT__wcstol_l(const MSVCRT_wchar_t *s,
-        MSVCRT_wchar_t **end, int base, MSVCRT__locale_t locale)
+        MSVCRT_wchar_t **end, int base, _locale_t locale)
 {
     __int64 ret = MSVCRT__wcstoi64_l(s, end, base, locale);
 
@@ -2616,7 +2616,7 @@ MSVCRT_long CDECL MSVCRT_wcstol(const MSVCRT_wchar_t *s,
 /*********************************************************************
  *  _wtoi_l (MSVCRT.@)
  */
-int __cdecl MSVCRT__wtoi_l(const MSVCRT_wchar_t *str, MSVCRT__locale_t locale)
+int __cdecl MSVCRT__wtoi_l(const MSVCRT_wchar_t *str, _locale_t locale)
 {
     __int64 ret = MSVCRT__wcstoi64_l(str, NULL, 10, locale);
 
@@ -2641,7 +2641,7 @@ int __cdecl MSVCRT__wtoi(const MSVCRT_wchar_t *str)
 /*********************************************************************
  *  _wtol_l (MSVCRT.@)
  */
-MSVCRT_long __cdecl MSVCRT__wtol_l(const MSVCRT_wchar_t *str, MSVCRT__locale_t locale)
+MSVCRT_long __cdecl MSVCRT__wtol_l(const MSVCRT_wchar_t *str, _locale_t locale)
 {
     __int64 ret = MSVCRT__wcstoi64_l(str, NULL, 10, locale);
 
@@ -2668,7 +2668,7 @@ MSVCRT_long __cdecl MSVCRT__wtol(const MSVCRT_wchar_t *str)
 /*********************************************************************
  *  _wtoll_l (MSVCR120.@)
  */
-MSVCRT_longlong __cdecl MSVCRT__wtoll_l(const MSVCRT_wchar_t *str, MSVCRT__locale_t locale)
+MSVCRT_longlong __cdecl MSVCRT__wtoll_l(const MSVCRT_wchar_t *str, _locale_t locale)
 {
     return MSVCRT__wcstoi64_l(str, NULL, 10, locale);
 }
@@ -2689,7 +2689,7 @@ MSVCRT_longlong __cdecl MSVCRT__wtoll(const MSVCRT_wchar_t *str)
  * FIXME: locale parameter is ignored
  */
 unsigned __int64 CDECL MSVCRT__wcstoui64_l(const MSVCRT_wchar_t *nptr,
-        MSVCRT_wchar_t **endptr, int base, MSVCRT__locale_t locale)
+        MSVCRT_wchar_t **endptr, int base, _locale_t locale)
 {
     BOOL negative = FALSE, empty = TRUE;
     unsigned __int64 ret = 0;
@@ -2757,7 +2757,7 @@ unsigned __int64 CDECL MSVCRT__wcstoui64(const MSVCRT_wchar_t *nptr,
  *  _wcstoul_l (MSVCRT.@)
  */
 MSVCRT_ulong __cdecl MSVCRT__wcstoul_l(const MSVCRT_wchar_t *s,
-        MSVCRT_wchar_t **end, int base, MSVCRT__locale_t locale)
+        MSVCRT_wchar_t **end, int base, _locale_t locale)
 {
     __int64 ret = MSVCRT__wcstoi64_l(s, end, base, locale);
 
@@ -2794,7 +2794,7 @@ MSVCRT_size_t CDECL MSVCRT_wcsnlen(const MSVCRT_wchar_t *s, MSVCRT_size_t maxlen
 /*********************************************************************
  *              _towupper_l (MSVCRT.@)
  */
-int CDECL MSVCRT__towupper_l(MSVCRT_wint_t c, MSVCRT__locale_t locale)
+int CDECL MSVCRT__towupper_l(MSVCRT_wint_t c, _locale_t locale)
 {
     pthreadlocinfo locinfo;
     MSVCRT_wchar_t ret;
@@ -2875,7 +2875,7 @@ MSVCRT_wchar_t* CDECL MSVCRT_wcsstr(const MSVCRT_wchar_t *str, const MSVCRT_wcha
 /*********************************************************************
  *              _wtoi64_l (MSVCRT.@)
  */
-__int64 CDECL MSVCRT__wtoi64_l(const MSVCRT_wchar_t *str, MSVCRT__locale_t locale)
+__int64 CDECL MSVCRT__wtoi64_l(const MSVCRT_wchar_t *str, _locale_t locale)
 {
     ULONGLONG RunningTotal = 0;
     BOOL bMinus = FALSE;
@@ -2911,7 +2911,7 @@ __int64 CDECL MSVCRT__wtoi64(const MSVCRT_wchar_t *str)
  *              _wcsxfrm_l (MSVCRT.@)
  */
 MSVCRT_size_t CDECL MSVCRT__wcsxfrm_l(MSVCRT_wchar_t *dest, const MSVCRT_wchar_t *src,
-        MSVCRT_size_t len, MSVCRT__locale_t locale)
+        MSVCRT_size_t len, _locale_t locale)
 {
     pthreadlocinfo locinfo;
     int i, ret;

