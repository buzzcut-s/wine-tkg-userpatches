From: Chip Davis <cdavis@codeweavers.com>
Subject: [PATCH] msvcrt: Fix the btowc() function.
Message-Id: <20191211175311.36526-1-cdavis@codeweavers.com>
Date: Wed, 11 Dec 2019 11:53:11 -0600

This function returns WEOF on conversion failure. It should only operate
on single-byte characters in the C locale. Finally, it should use the
current locale's codepage, instead of the current locale itself, to do
conversions.

Signed-off-by: Chip Davis <cdavis@codeweavers.com>
---

Notes:
    v2: Actually run the tests. Add new tests. Make them pass.

 dlls/msvcrt/locale.c       |  8 +++--
 dlls/msvcrt/tests/string.c | 61 ++++++++++++++++++++++++++++++++++++++
 2 files changed, 66 insertions(+), 3 deletions(-)

diff --git a/dlls/msvcrt/locale.c b/dlls/msvcrt/locale.c
index 11ad9ed5f5f..c2dd10667f7 100644
--- a/dlls/msvcrt/locale.c
+++ b/dlls/msvcrt/locale.c
@@ -787,9 +787,11 @@ MSVCRT_wint_t CDECL MSVCRT_btowc(int c)
     unsigned char letter = c;
     MSVCRT_wchar_t ret;
 
-    if(!MultiByteToWideChar(get_locinfo()->lc_handle[MSVCRT_LC_CTYPE],
-                0, (LPCSTR)&letter, 1, &ret, 1))
-        return 0;
+    if(!get_locinfo()->lc_codepage)
+        return c <= 255 ? c : MSVCRT_WEOF;
+    if(!MultiByteToWideChar(get_locinfo()->lc_codepage,
+                MB_ERR_INVALID_CHARS, (LPCSTR)&letter, 1, &ret, 1))
+        return MSVCRT_WEOF;
 
     return ret;
 }
diff --git a/dlls/msvcrt/tests/string.c b/dlls/msvcrt/tests/string.c
index f4c4657791c..1be4dcb129c 100644
--- a/dlls/msvcrt/tests/string.c
+++ b/dlls/msvcrt/tests/string.c
@@ -87,6 +87,7 @@ static int (__cdecl *p_wcslwr_s)(wchar_t*,size_t);
 static errno_t (__cdecl *p_mbsupr_s)(unsigned char *str, size_t numberOfElements);
 static errno_t (__cdecl *p_mbslwr_s)(unsigned char *str, size_t numberOfElements);
 static int (__cdecl *p_wctob)(wint_t);
+static wint_t (__cdecl *p_btowc)(int);
 static size_t (__cdecl *p_wcrtomb)(char*, wchar_t, mbstate_t*);
 static int (__cdecl *p_wcrtomb_s)(size_t*, char*, size_t, wchar_t, mbstate_t*);
 static int (__cdecl *p_tolower)(int);
@@ -2829,6 +2830,64 @@ static void test_wctob(void)
     _setmbcp(cp);
 }
 
+static void test_btowc(void)
+{
+    wint_t ret;
+    int cp = _getmbcp();
+
+    if(!p_btowc || !setlocale(LC_ALL, "chinese-traditional")) {
+        win_skip("Skipping btowc tests\n");
+        return;
+    }
+
+    ret = p_btowc(0x61);
+    ok(ret == 0x61, "ret = %x\n", ret);
+
+    ret = p_btowc(0x81);
+    ok(ret == WEOF, "ret = %x\n", ret);
+
+    ret = p_btowc(0xe0);
+    ok(ret == WEOF, "ret = %x\n", ret);
+
+    _setmbcp(1250);
+    ret = p_btowc(0x61);
+    ok(ret == 0x61, "ret = %x\n", ret);
+
+    ret = p_btowc(0x81);
+    ok(ret == WEOF, "ret = %x\n", ret);
+
+    ret = p_btowc(0xe0);
+    ok(ret == WEOF, "ret = %x\n", ret);
+
+    setlocale(LC_ALL, "C");
+    ret = p_btowc(0x61);
+    ok(ret == 0x61, "ret = %x\n", ret);
+
+    ret = p_btowc(0x81);
+    ok(ret == 0x81, "ret = %x\n", ret);
+
+    ret = p_btowc(0x9f);
+    ok(ret == 0x9f, "ret = %x\n", ret);
+
+    ret = p_btowc(0xe0);
+    ok(ret == 0xe0, "ret = %x\n", ret);
+
+    _setmbcp(0);
+    ret = p_btowc(0x61);
+    ok(ret == 0x61, "ret = %x\n", ret);
+
+    ret = p_btowc(0x81);
+    ok(ret == 0x81, "ret = %x\n", ret);
+
+    ret = p_btowc(0x9f);
+    ok(ret == 0x9f, "ret = %x\n", ret);
+
+    ret = p_btowc(0xe0);
+    ok(ret == 0xe0, "ret = %x\n", ret);
+
+    _setmbcp(cp);
+}
+
 static void test_wctomb(void)
 {
     mbstate_t state;
@@ -4007,6 +4066,7 @@ START_TEST(string)
     p_wcslwr_s = (void*)GetProcAddress(hMsvcrt, "_wcslwr_s");
     p_mbsupr_s = (void*)GetProcAddress(hMsvcrt, "_mbsupr_s");
     p_mbslwr_s = (void*)GetProcAddress(hMsvcrt, "_mbslwr_s");
+    p_btowc = (void*)GetProcAddress(hMsvcrt, "btowc");
     p_wctob = (void*)GetProcAddress(hMsvcrt, "wctob");
     p_wcrtomb = (void*)GetProcAddress(hMsvcrt, "wcrtomb");
     p_wcrtomb_s = (void*)GetProcAddress(hMsvcrt, "wcrtomb_s");
@@ -4083,6 +4143,7 @@ START_TEST(string)
     test__mbsupr_s();
     test__mbslwr_s();
     test_wctob();
+    test_btowc();
     test_wctomb();
     test__atodbl();
     test__stricmp();

-- 
2.24.0

